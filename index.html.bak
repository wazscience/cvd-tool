<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data:; connect-src 'self'; report-uri /csp-report">
    <title>CVD Risk Toolkit with Lp(a) Post-Test Modifier</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="page-container">
        <header class="main-header">
            <div class="container">
                <div class="header-content">
                    <div class="logo-container">
                        <h1>CVD Risk Toolkit</h1>
                        <span class="tagline">with Lp(a) Post-Test Modifier</span>
                    </div>
                    <div class="header-actions">
                        <button class="theme-toggle" id="theme-toggle" aria-label="Toggle dark mode">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="5"></circle><path d="M12 1v2M12 21v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4"></path></svg>
                        </button>
                    </div>
                </div>
                <p class="header-description">Calculate 10-year cardiovascular disease risk using established risk calculators with lipoprotein(a) adjustment</p>
            </div>
        </header>
        
        <main class="main-content">
            <div class="container">
                <div class="legal-disclaimer-banner">
                    <p><strong>Healthcare Professional Use Only:</strong> This tool is designed to support clinical decision-making, not replace it. Always use clinical judgment.</p>
                </div>
                
                <div class="tabs-container">
                    <div class="tabs">
                        <button class="tab" data-tab="medication-tab">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"></path></svg>
                            <span>Medication Management</span>
                        </button>
                        <button class="tab active" data-tab="frs-tab">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 2v20M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H7"></path></svg>
                            <span>Framingham Risk Score</span>
                        </button>
                        <button class="tab" data-tab="qrisk-tab">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4.8 2.3A.3.3 0 1 0 5 2H4a2 2 0 0 0-2 2v5a6 6 0 0 0 6 6v0a6 6 0 0 0 6-6V4a2 2 0 0 0-2-2h-1a.2.2 0 1 0 .3.3"></path><path d="M8 15v1a6 6 0 0 0 6 6v0a6 6 0 0 0 6-6v-4"></path><circle cx="20" cy="10" r="2"></circle></svg>
                            <span>QRISK3</span>
                        </button>
                        <button class="tab" data-tab="both-tab">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 3v18h18"></path><path d="m19 9-5 5-4-4-3 3"></path></svg>
                            <span>Compare Both</span>
                        </button>
                    </div>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="CVD Risk Toolkit with Lp(a) Post-Test Modifier for cardiovascular risk assessment with lipoprotein(a) adjustment">
    <meta name="author" content="CVD Risk Toolkit Team">
    <!-- Version control comment to track updates -->
    <!-- Version: 1.0.0 - Initial Release -->
    <!-- Last Updated: April 14, 2025 -->
    <title>CVD Risk Toolkit with Lp(a) Post-Test Modifier</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="page-container">
        <header class="main-header">
            <div class="container">
                <div class="header-content">
                    <div class="logo-container">
                        <h1>CVD Risk Toolkit</h1>
                        <span class="tagline">with Lp(a) Post-Test Modifier</span>
                    </div>
                    <div class="header-actions">
                        <button class="theme-toggle" id="theme-toggle" aria-label="Toggle dark mode">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="5"></circle><path d="M12 1v2M12 21v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4"></path></svg>
                        </button>
                    </div>
                </div>
                <p class="header-description">Calculate 10-year cardiovascular disease risk using established risk calculators with lipoprotein(a) adjustment</p>
            </div>
        </header>
        
        <main class="main-content">
            <div class="container">
                <div class="legal-disclaimer-banner">
                    <p><strong>Healthcare Professional Use Only:</strong> This tool is designed to support clinical decision-making, not replace it. Always use clinical judgment.</p>
                </div>
                
                <div class="tabs-container">
                    <div class="tabs">
                        <button class="tab" data-tab="medication-tab">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"></path></svg>
                            <span>Medication Management</span>
                        </button>
                        <button class="tab active" data-tab="frs-tab">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 2v20M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H7"></path></svg>
                            <span>Framingham Risk Score</span>
                        </button>
                        <button class="tab" data-tab="qrisk-tab">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4.8 2.3A.3.3 0 1 0 5 2H4a2 2 0 0 0-2 2v5a6 6 0 0 0 6 6v0a6 6 0 0 0 6-6V4a2 2 0 0 0-2-2h-1a.2.2 0 1 0 .3.3"></path><path d="M8 15v1a6 6 0 0 0 6 6v0a6 6 0 0 0 6-6v-4"></path><circle cx="20" cy="10" r="2"></circle></svg>
                            <span>QRISK3</span>
                        </button>
                        <button class="tab" data-tab="both-tab">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 3v18h18"></path><path d="m19 9-5 5-4-4-3 3"></path></svg>
                            <span>Compare Both</span>
                        </button>
                    </div>
<!-- Framingham Risk Score Tab -->
                    <div id="frs-tab" class="tab-content active">
                        <form id="frs-form" class="clinical-form">
                            <div class="form-header">
                                <h2 class="section-title">Framingham Risk Score Calculator</h2>
                                <p class="section-description">The Framingham Risk Score estimates 10-year cardiovascular disease risk based on the Framingham Heart Study.</p>
                            </div>
                            
                            <div class="card">
                                <div class="card-header active">
                                    <h3>Patient Demographics</h3>
                                    <span class="toggle-icon">â–¼</span>
                                </div>
                                <div class="card-body active">
                                    <div class="form-row">
                                        <div class="form-group">
                                            <label class="required">Age</label>
                                            <input type="number" id="frs-age" min="30" max="74" placeholder="30-74 years" required>
                                            <div class="error-message">Please enter a valid age between 30 and 74</div>
                                        </div>
                                        
                                        <div class="form-group">
                                            <label class="required">Sex</label>
                                            <select id="frs-sex" required>
                                                <option value="" selected disabled>Select</option>
                                                <option value="male">Male</option>
                                                <option value="female">Female</option>
                                            </select>
                                            <div class="error-message">Please select sex</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="card">
                                <div class="card-header active">
                                    <h3>Lipid Profile</h3>
                                    <span class="toggle-icon">â–¼</span>
                                </div>
                                <div class="card-body active">
                                    <div class="form-row">
                                        <div class="form-group">
                                            <label class="required">Total Cholesterol</label>
                                            <div class="input-group">
                                                <input type="number" id="frs-total-chol" min="1" max="15" placeholder="Enter value" required step="0.1">
                                                <select id="frs-total-chol-unit" class="unit-selector">
                                                    <option value="mmol/L">mmol/L</option>
                                                    <option value="mg/dL">mg/dL</option>
                                                </select>
                                            </div>
                                            <div class="error-message">Please enter a valid value between 1 and 15</div>
                                        </div>
                                        
                                        <div class="form-group">
                                            <label class="required">HDL Cholesterol</label>
                                            <div class="input-group">
                                                <input type="number" id="frs-hdl" min="0.5" max="3" placeholder="Enter value" required step="0.1">
                                                <select id="frs-hdl-unit" class="unit-selector">
                                                    <option value="mmol/L">mmol/L</option>
                                                    <option value="mg/dL">mg/dL</option>
                                                </select>
                                            </div>
                                            <div class="error-message">Please enter a valid value between 0.5 and 3</div>
                                        </div>
                                    </div>
                                    
                                    <div class="form-row">
                                        <div class="form-group">
                                            <label>LDL Cholesterol
                                                <div class="tooltip-container">
                                                    <div class="info-icon">i</div>
                                                    <div class="tooltip-text">LDL cholesterol level is used to determine specific treatment recommendations according to clinical guidelines.</div>
                                                </div>
                                            </label>
                                            <div class="input-group">
                                                <input type="number" id="frs-ldl" min="0.5" max="10" placeholder="Enter value (optional)" step="0.1">
                                                <select id="frs-ldl-unit" class="unit-selector">
                                                    <option value="mmol/L">mmol/L</option>
                                                    <option value="mg/dL">mg/dL</option>
                                                </select>
                                            </div>
                                            <div class="error-message">Please enter a valid value between 0.5 and 10</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="card">
                                <div class="card-header active">
                                    <h3>Blood Pressure</h3>
                                    <span class="toggle-icon">â–¼</span>
                                </div>
                                <div class="card-body active">
                                    <div class="form-row">
                                        <div class="form-group">
                                            <label class="required">Systolic Blood Pressure</label>
                                            <div class="input-group">
                                                <input type="number" id="frs-sbp" min="90" max="200" placeholder="Enter value" required>
                                                <span class="unit-selector">mmHg</span>
                                            </div>
                                            <div class="error-message">Please enter a valid value between 90 and 200</div>
                                        </div>
                                        
                                        <div class="form-group">
                                            <label class="required">Blood Pressure Treatment</label>
                                            <select id="frs-bp-treatment" required>
                                                <option value="" selected disabled>Select</option>
                                                <option value="yes">Yes</option>
                                                <option value="no">No</option>
                                            </select>
                                            <div class="error-message">Please select blood pressure treatment status</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="card">
                                <div class="card-header active">
                                    <h3>Risk Factors</h3>
                                    <span class="toggle-icon">â–¼</span>
                                </div>
                                <div class="card-body active">
                                    <div class="form-row">
                                        <div class="form-group">
                                            <label class="required">Smoker</label>
                                            <select id="frs-smoker" required>
                                                <option value="" selected disabled>Select</option>
                                                <option value="yes">Yes</option>
                                                <option value="no">No</option>
                                            </select>
                                            <div class="error-message">Please select smoker status</div>
                                        </div>
                                        
                                        <div class="form-group">
                                            <label>Diabetes</label>
                                            <select id="frs-diabetes">
                                                <option value="no" selected>No</option>
                                                <option value="yes">Yes</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="card">
                                <div class="card-header">
                                    <h3>Lipoprotein(a) Modifier</h3>
                                    <span class="toggle-icon">â–¼</span>
                                </div>
                                <div class="card-body">
                                    <!-- Area for Lp(a) research update notices (empty by default) -->
                                    <div id="lpa-research-updates" class="research-update-container" style="display: none;">
                                        <!-- Dynamically updated with new research -->
                                    </div>
                                    
                                    <div class="form-row">
                                        <div class="form-group">
                                            <label>Lp(a) Level
                                                <div class="tooltip-container">
                                                    <div class="info-icon">i</div>
                                                    <div class="tooltip-text" id="frs-lpa-tooltip">Elevated Lp(a) (â‰¥50 mg/dL or â‰¥100 nmol/L) is an independent risk factor that increases cardiovascular risk.</div>
                                                </div>
                                            </label>
                                            <div class="input-group">
                                                <input type="number" id="frs-lpa" min="0" max="500" placeholder="Enter value (optional)" step="1">
                                                <select id="frs-lpa-unit" class="unit-selector">
                                                    <option value="mg/dL">mg/dL</option>
                                                    <option value="nmol/L">nmol/L</option>
                                                </select>
                                            </div>
                                            <div class="error-message">Please enter a valid value between 0 and 500</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="form-actions">
                                <button type="button" class="secondary-btn" onclick="resetForm('frs-form')">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"></path><path d="M3 3v5h5"></path></svg>
                                    Reset Form
                                </button>
                                <button type="button" class="primary-btn" onclick="calculateFRS()">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 3v18h18"></path><path d="m19 9-5 5-4-4-3 3"></path></svg>
                                    Calculate FRS Risk
                                </button>
                            </div>
                        </form>
                    </div>
<!-- QRISK3 Tab -->
                    <div id="qrisk-tab" class="tab-content">
                        <form id="qrisk-form" class="clinical-form">
                            <div class="form-header">
                                <h2 class="section-title">QRISK3 Calculator</h2>
                                <p class="section-description">QRISK3 estimates 10-year cardiovascular risk, accounting for multiple factors including ethnicity and additional health conditions.</p>
                            </div>
                            
                            <div class="card">
                                <div class="card-header active">
                                    <h3>Patient Demographics</h3>
                                    <span class="toggle-icon">â–¼</span>
                                </div>
                                <div class="card-body active">
                                    <div class="form-row">
                                        <div class="form-group">
                                            <label class="required">Age</label>
                                            <input type="number" id="qrisk-age" min="25" max="84" placeholder="25-84 years" required>
                                            <div class="error-message">Please enter a valid age between 25 and 84</div>
                                        </div>
                                        
                                        <div class="form-group">
                                            <label class="required">Sex</label>
                                            <select id="qrisk-sex" required>
                                                <option value="" selected disabled>Select</option>
                                                <option value="male">Male</option>
                                                <option value="female">Female</option>
                                            </select>
                                            <div class="error-message">Please select sex</div>
                                        </div>
                                    </div>
                                    
                                    <div class="form-row">
                                        <div class="form-group">
                                            <label class="required">Ethnicity</label>
                                            <select id="qrisk-ethnicity" required>
                                                <option value="" selected disabled>Select</option>
                                                <option value="white">White</option>
                                                <option value="indian">Indian</option>
                                                <option value="pakistani">Pakistani</option>
                                                <option value="bangladeshi">Bangladeshi</option>
                                                <option value="other_asian">Other Asian</option>
                                                <option value="black_caribbean">Black Caribbean</option>
                                                <option value="black_african">Black African</option>
                                                <option value="chinese">Chinese</option>
                                                <option value="other">Other</option>
                                            </select>
                                            <div class="error-message">Please select ethnicity</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="card">
                                <div class="card-header active">
                                    <h3>Physical Measurements</h3>
                                    <span class="toggle-icon">â–¼</span>
                                </div>
                                <div class="card-body active">
                                    <div class="form-row">
                                        <div class="form-group">
                                            <label class="required">Height</label>
                                            <div class="input-group">
                                                <input type="number" id="qrisk-height" min="100" max="250" placeholder="Enter value" required>
                                                <select id="qrisk-height-unit" class="unit-selector" onchange="toggleHeightInputs('qrisk')">
                                                    <option value="cm">cm</option>
                                                    <option value="ft/in">ft/in</option>
                                                </select>
                                            </div>
                                            <div id="qrisk-height-ft-container" class="height-ft-container" style="display: none;">
                                                <input type="number" id="qrisk-height-feet" min="3" max="7" placeholder="Feet">
                                                <input type="number" id="qrisk-height-inches" min="0" max="11" placeholder="Inches">
                                            </div>
                                            <div class="error-message">Please enter a valid height</div>
                                        </div>
                                        
                                        <div class="form-group">
                                            <label class="required">Weight</label>
                                            <div class="input-group">
                                                <input type="number" id="qrisk-weight" min="30" max="200" placeholder="Enter value" required>
                                                <select id="qrisk-weight-unit" class="unit-selector">
                                                    <option value="kg">kg</option>
                                                    <option value="lb">lb</option>
                                                </select>
                                            </div>
                                            <div class="error-message">Please enter a valid weight between 30 and 200</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="card">
                                <div class="card-header active">
                                    <h3>Blood Pressure</h3>
                                    <span class="toggle-icon">â–¼</span>
                                </div>
                                <div class="card-body active">
                                    <div class="form-row">
                                        <div class="form-group">
                                            <label class="required">Systolic Blood Pressure</label>
                                            <div class="input-group">
                                                <input type="number" id="qrisk-sbp" min="70" max="210" placeholder="Enter value" required>
                                                <span class="unit-selector">mmHg</span>
                                            </div>
                                            <div class="error-message">Please enter a valid value between 70 and 210</div>
                                        </div>
                                        
                                        <div class="form-group">
                                            <label>Standard Deviation of SBP</label>
                                            <div class="input-group">
                                                <input type="number" id="qrisk-sbp-sd" min="0" max="30" placeholder="Enter if known">
                                                <span class="unit-selector">mmHg</span>
                                            </div>
                                            <a class="toggle-link" id="qrisk-toggle-sbp-readings">Calculate from multiple readings</a>
                                            
                                            <div id="qrisk-sbp-readings" style="display: none; margin-top: 10px;">
                                                <div class="sbp-readings-container">
                                                    <div class="sbp-reading">
                                                        <label for="qrisk-sbp-reading-1">Reading 1</label>
                                                        <input type="number" id="qrisk-sbp-reading-1" min="70" max="210" placeholder="mmHg">
                                                    </div>
                                                    <div class="sbp-reading">
                                                        <label for="qrisk-sbp-reading-2">Reading 2</label>
                                                        <input type="number" id="qrisk-sbp-reading-2" min="70" max="210" placeholder="mmHg">
                                                    </div>
                                                    <div class="sbp-reading">
                                                        <label for="qrisk-sbp-reading-3">Reading 3</label>
                                                        <input type="number" id="qrisk-sbp-reading-3" min="70" max="210" placeholder="mmHg">
                                                    </div>
                                                    <div class="sbp-reading">
                                                        <label for="qrisk-sbp-reading-4">Reading 4</label>
                                                        <input type="number" id="qrisk-sbp-reading-4" min="70" max="210" placeholder="mmHg">
                                                    </div>
                                                    <div class="sbp-reading">
                                                        <label for="qrisk-sbp-reading-5">Reading 5</label>
                                                        <input type="number" id="qrisk-sbp-reading-5" min="70" max="210" placeholder="mmHg">
                                                    </div>
                                                    <div class="sbp-reading">
                                                        <label for="qrisk-sbp-reading-6">Reading 6</label>
                                                        <input type="number" id="qrisk-sbp-reading-6" min="70" max="210" placeholder="mmHg">
                                                    </div>
                                                </div>
                                                <button type="button" class="sbp-calc-btn" onclick="calculateSBPStandardDeviation('qrisk')">Calculate SD</button>
                                                <div id="qrisk-sbp-sd-result" class="sbp-result"></div>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div class="form-row">
                                        <div class="form-group">
                                            <label>On Blood Pressure Treatment</label>
                                            <select id="qrisk-bp-treatment">
                                                <option value="no" selected>No</option>
                                                <option value="yes">Yes</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="card">
                                <div class="card-header active">
                                    <h3>Lipid Profile</h3>
                                    <span class="toggle-icon">â–¼</span>
                                </div>
                                <div class="card-body active">
                                    <div class="form-row">
                                        <div class="form-group">
                                            <label class="required">Total Cholesterol</label>
                                            <div class="input-group">
                                                <input type="number" id="qrisk-total-chol" min="1" max="15" placeholder="Enter value" required step="0.1">
                                                <select id="qrisk-total-chol-unit" class="unit-selector">
                                                    <option value="mmol/L">mmol/L</option>
                                                    <option value="mg/dL">mg/dL</option>
                                                </select>
                                            </div>
                                            <div class="error-message">Please enter a valid value between 1 and 15</div>
                                        </div>
                                        
                                        <div class="form-group">
                                            <label class="required">HDL Cholesterol</label>
                                            <div class="input-group">
                                                <input type="number" id="qrisk-hdl" min="0.5" max="3" placeholder="Enter value" required step="0.1">
                                                <select id="qrisk-hdl-unit" class="unit-selector">
                                                    <option value="mmol/L">mmol/L</option>
                                                    <option value="mg/dL">mg/dL</option>
                                                </select>
                                            </div>
                                            <div class="error-message">Please enter a valid value between 0.5 and 3</div>
                                        </div>
                                    </div>
                                    
                                    <div class="form-row">
                                        <div class="form-group">
                                            <label>LDL Cholesterol
                                                <div class="tooltip-container">
                                                    <div class="info-icon">i</div>
                                                    <div class="tooltip-text">LDL cholesterol level is used to determine specific treatment recommendations according to clinical guidelines.</div>
                                                </div>
                                            </label>
                                            <div class="input-group">
                                                <input type="number" id="qrisk-ldl" min="0.5" max="10" placeholder="Enter value (optional)" step="0.1">
                                                <select id="qrisk-ldl-unit" class="unit-selector">
                                                    <option value="mmol/L">mmol/L</option>
                                                    <option value="mg/dL">mg/dL</option>
                                                </select>
                                            </div>
                                            <div class="error-message">Please enter a valid value between 0.5 and 10</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="card">
                                <div class="card-header active">
                                    <h3>Risk Factors</h3>
                                    <span class="toggle-icon">â–¼</span>
                                </div>
                                <div class="card-body active">
                                    <div class="form-row">
                                        <div class="form-group">
                                            <label class="required">Smoker Status</label>
                                            <select id="qrisk-smoker" required>
                                                <option value="" selected disabled>Select</option>
                                                <option value="non">Non-smoker</option>
                                                <option value="ex">Ex-smoker</option>
                                                <option value="light">Light smoker (< 10/day)</option>
                                                <option value="moderate">Moderate smoker (10-19/day)</option>
                                                <option value="heavy">Heavy smoker (20+/day)</option>
                                            </select>
                                            <div class="error-message">Please select smoker status</div>
                                        </div>
                                        
                                        <div class="form-group">
                                            <label class="required">Diabetes Status</label>
                                            <select id="qrisk-diabetes" required>
                                                <option value="" selected disabled>Select</option>
                                                <option value="none">None</option>
                                                <option value="type1">Type 1</option>
                                                <option value="type2">Type 2</option>
                                            </select>
                                            <div class="error-message">Please select diabetes status</div>
                                        </div>
                                    </div>
                                    
                                    <div class="form-row">
                                        <div class="form-group">
                                            <label class="required">Family History of CVD</label>
                                            <select id="qrisk-family-history" required>
                                                <option value="" selected disabled>Select</option>
                                                <option value="yes">Yes</option>
                                                <option value="no">No</option>
                                            </select>
                                            <div class="error-message">Please select an option</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="card">
                                <div class="card-header">
                                    <h3>Medical Conditions</h3>
                                    <span class="toggle-icon">â–¼</span>
                                </div>
                                <div class="card-body">
                                    <div class="checkbox-group">
                                        <div class="checkbox-item">
                                            <input type="checkbox" id="qrisk-af">
                                            <label for="qrisk-af">Atrial Fibrillation</label>
                                        </div>
                                        
                                        <div class="checkbox-item">
                                            <input type="checkbox" id="qrisk-ra">
                                            <label for="qrisk-ra">Rheumatoid Arthritis</label>
                                        </div>
                                        
                                        <div class="checkbox-item">
                                            <input type="checkbox" id="qrisk-ckd">
                                            <label for="qrisk-ckd">Chronic Kidney Disease</label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="card">
                                <div class="card-header">
                                    <h3>Lipoprotein(a) Modifier</h3>
                                    <span class="toggle-icon">â–¼</span>
                                </div>
                                <div class="card-body">
                                    <!-- Area for Lp(a) research update notices (empty by default) -->
                                    <div id="qrisk-lpa-research-updates" class="research-update-container" style="display: none;">
                                        <!-- Dynamically updated with new research -->
                                    </div>
                                    
                                    <div class="form-row">
                                        <div class="form-group">
                                            <label>Lp(a) Level
                                                <div class="tooltip-container">
                                                    <div class="info-icon">i</div>
                                                    <div class="tooltip-text" id="qrisk-lpa-tooltip">Elevated Lp(a) (â‰¥50 mg/dL or â‰¥100 nmol/L) is an independent risk factor that increases cardiovascular risk.</div>
                                                </div>
                                            </label>
                                            <div class="input-group">
                                                <input type="number" id="qrisk-lpa" min="0" max="500" placeholder="Enter value (optional)" step="1">
                                                <select id="qrisk-lpa-unit" class="unit-selector">
                                                    <option value="mg/dL">mg/dL</option>
                                                    <option value="nmol/L">nmol/L</option>
                                                </select>
                                            </div>
                                            <div class="error-message">Please enter a valid value between 0 and 500</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="form-actions">
                                <button type="button" class="secondary-btn" onclick="resetForm('qrisk-form')">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"></path><path d="M3 3v5h5"></path></svg>
                                    Reset Form
                                </button>
                                <button type="button" class="primary-btn" onclick="calculateQRISK()">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 3v18h18"></path><path d="m19 9-5 5-4-4-3 3"></path></svg>
                                    Calculate QRISK3 Score
                                </button>
                            </div>
                        </form>
                    </div>
<!-- Compare Both Tab -->
<div id="both-tab" class="tab-content">
    <div class="form-header">
        <h2 class="section-title">Compare Risk Assessment Methods</h2>
        <p class="section-description">Calculate and compare both Framingham Risk Score and QRISK3 to provide a more comprehensive assessment.</p>
    </div>
    
    <div class="card">
        <div class="card-header active">
            <h3>Instructions</h3>
            <span class="toggle-icon">â–¼</span>
        </div>
        <div class="card-body active">
            <div class="info-box">
                <div class="info-icon-large">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
                </div>
                <div class="info-content">
                    <h4>How to use this comparison tool:</h4>
                    <ol>
                        <li>Complete <strong>both</strong> the Framingham Risk Score and QRISK3 calculator forms</li>
                        <li>Click the "Compare Both Scores" button below</li>
                        <li>The results will show both risk scores side by side with their respective risk modifiers</li>
                        <li>Treatment recommendations will be based on the higher risk score in accordance with clinical guidelines</li>
                    </ol>
                </div>
            </div>
            
            <div class="comparison-status">
                <div class="status-item">
                    <div class="status-icon" id="frs-status-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="m15 9-6 6"></path><path d="m9 9 6 6"></path></svg>
                    </div>
                    <div class="status-text">
                        <span class="status-label">Framingham Risk Score:</span>
                        <span class="status-value" id="frs-status">Not completed</span>
                    </div>
                </div>
                <div class="status-item">
                    <div class="status-icon" id="qrisk-status-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="m15 9-6 6"></path><path d="m9 9 6 6"></path></svg>
                    </div>
                    <div class="status-text">
                        <span class="status-label">QRISK3:</span>
                        <span class="status-value" id="qrisk-status">Not completed</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="card">
        <div class="card-header active">
            <h3>Why Compare Both Methods?</h3>
            <span class="toggle-icon">â–¼</span>
        </div>
        <div class="card-body active">
            <div class="comparison-benefits">
                <div class="benefit-item">
                    <div class="benefit-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 20h9"></path><path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"></path></svg>
                    </div>
                    <div class="benefit-content">
                        <h4>Different Populations</h4>
                        <p>Framingham is derived from a US cohort while QRISK3 is UK-based. Different demographics may be better represented by one score or the other.</p>
                    </div>
                </div>
                <div class="benefit-item">
                    <div class="benefit-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 11V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6"></path><path d="M9 22h9a2 2 0 0 0 2-2v-7"></path><path d="M13 5v6"></path><path d="M10 8h6"></path><circle cx="17" cy="17" r="3"></circle></svg>
                    </div>
                    <div class="benefit-content">
                        <h4>Additional Risk Factors</h4>
                        <p>QRISK3 includes additional factors like ethnicity, family history, and specific medical conditions that Framingham does not consider.</p>
                    </div>
                </div>
                <div class="benefit-item">
                    <div class="benefit-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon></svg>
                    </div>
                    <div class="benefit-content">
                        <h4>Improved Accuracy</h4>
                        <p>Combining risk assessment methods can provide a more comprehensive evaluation, potentially identifying at-risk individuals who might be missed by a single calculator.</p>
                    </div>
                </div>
                <div class="benefit-item">
                    <div class="benefit-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"></path></svg>
                    </div>
                    <div class="benefit-content">
                        <h4>Clinical Decision Support</h4>
                        <p>When risk scores differ, it prompts clinicians to explore potential factors that may be influencing cardiovascular risk assessment.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="card">
        <div class="card-header">
            <h3>Comparison Limitations</h3>
            <span class="toggle-icon">â–¼</span>
        </div>
        <div class="card-body">
            <div class="alert alert-info">
                <p><strong>Important considerations when comparing risk scores:</strong></p>
                <ul>
                    <li>These scores are developed from different populations with different baseline risks</li>
                    <li>Both calculators have their own limitations and may over- or under-estimate risk in certain individuals</li>
                    <li>Clinical judgment should always be used alongside these risk estimation tools</li>
                    <li>Treatment decisions should consider individual patient factors, preferences, and risk-benefit discussions</li>
                </ul>
            </div>
        </div>
    </div>
    
    <div class="form-actions">
        <button type="button" class="primary-btn calculate-both-btn" onclick="calculateBoth()">
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path><polyline points="3.27 6.96 12 12.01 20.73 6.96"></polyline><line x1="12" y1="22.08" x2="12" y2="12"></line></svg>
            Compare Both Scores
        </button>
    </div>
</div>
<!-- Results Section -->
<div class="results-section" id="results-container">
    <div class="results-header">
        <h2 class="section-title">CVD Risk Assessment Results</h2>
        <div class="results-meta">
            <div class="meta-item" id="results-date">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect><line x1="16" y1="2" x2="16" y2="6"></line><line x1="8" y1="2" x2="8" y2="6"></line><line x1="3" y1="10" x2="21" y2="10"></line></svg>
                <span></span>
            </div>
            <div class="meta-item" id="results-id">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg>
                <span>Anonymous Assessment</span>
            </div>
        </div>
    </div>

    <!-- Risk results will be populated here -->
    <div id="risk-results">
        <!-- This section is initially empty and will be populated when calculations are performed -->
    </div>
    
    <!-- Template for single risk result -->
    <template id="single-risk-template">
        <div class="results-card">
            <div class="risk-header">
                <h3 class="risk-title"></h3>
                <div class="risk-badge"></div>
            </div>
            
            <div class="risk-visualization">
                <div class="risk-gauge">
                    <div class="gauge-value">
                        <span class="risk-value"></span>
                    </div>
                    <div class="gauge-scale">
                        <div class="scale-marker low" style="left: 10%;">
                            <span>Low</span>
                        </div>
                        <div class="scale-marker moderate" style="left: 30%;">
                            <span>Moderate</span>
                        </div>
                        <div class="scale-marker high" style="left: 70%;">
                            <span>High</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="risk-details">
                <div class="results-row">
                    <div class="results-label">Base Risk:</div>
                    <div class="results-value base-risk"></div>
                </div>
                <div class="results-row lpa-modifier-row">
                    <div class="results-label">Lp(a) Modifier:</div>
                    <div class="results-value lpa-modifier"></div>
                </div>
                <div class="results-row">
                    <div class="results-label">Adjusted Risk:</div>
                    <div class="results-value adjusted-risk"></div>
                </div>
                <div class="results-row risk-category-row">
                    <div class="results-label">Risk Category:</div>
                    <div class="results-value risk-category"></div>
                </div>
            </div>
            
            <div class="risk-interpretation"></div>
        </div>
    </template>
    
    <!-- Template for comparison results -->
    <template id="comparison-risk-template">
        <div class="results-card comparison-card">
            <div class="risk-header">
                <h3 class="risk-title">Comparison of Risk Assessments</h3>
            </div>
            
            <div class="comparison-visualization">
                <div class="comparison-chart">
                    <div class="chart-container" id="comparison-chart-container">
                        <!-- Chart will be rendered here -->
                    </div>
                </div>
            </div>
            
            <div class="comparison-details">
                <div class="comparison-table">
                    <div class="table-header">
                        <div class="table-cell"></div>
                        <div class="table-cell">Framingham</div>
                        <div class="table-cell">QRISK3</div>
                    </div>
                    <div class="table-row">
                        <div class="table-cell">Base Risk</div>
                        <div class="table-cell" id="compare-frs-base"></div>
                        <div class="table-cell" id="compare-qrisk-base"></div>
                    </div>
                    <div class="table-row">
                        <div class="table-cell">Lp(a) Modifier</div>
                        <div class="table-cell" id="compare-frs-lpa"></div>
                        <div class="table-cell" id="compare-qrisk-lpa"></div>
                    </div>
                    <div class="table-row">
                        <div class="table-cell">Adjusted Risk</div>
                        <div class="table-cell" id="compare-frs-adjusted"></div>
                        <div class="table-cell" id="compare-qrisk-adjusted"></div>
                    </div>
                    <div class="table-row">
                        <div class="table-cell">Risk Category</div>
                        <div class="table-cell" id="compare-frs-category"></div>
                        <div class="table-cell" id="compare-qrisk-category"></div>
                    </div>
                </div>
            </div>
            
            <div class="comparison-conclusion">
                <h4>Clinical Interpretation</h4>
                <p id="comparison-interpretation"></p>
            </div>
        </div>
    </template>
    
    <!-- Treatment recommendations section -->
    <div class="treatment-recommendations" id="treatment-recommendations">
        <h3 class="section-title">Treatment Recommendations</h3>
        <div class="recommendations-content" id="recommendations-content">
            <!-- Will be populated with recommendations -->
        </div>
        
        <!-- Clinical guidelines citations -->
        <div class="guidelines-citation">
            <h4>Clinical Guidelines Reference</h4>
            <div class="citation-content">
                <p>Recommendations based on:</p>
                <ul>
                    <li>2021 Canadian Cardiovascular Society Guidelines for the Management of Dyslipidemia for the Prevention of Cardiovascular Disease in Adults</li>
                    <li>2019 ESC/EAS Guidelines for the management of dyslipidaemias</li>
                    <li>2018 AHA/ACC/AACVPR/AAPA/ABC/ACPM/ADA/AGS/APhA/ASPC/NLA/PCNA Guideline on the Management of Blood Cholesterol</li>
                </ul>
            </div>
        </div>
    </div>
    
    <!-- Export and actions section -->
    <div class="export-section">
        <h3 class="section-title">Export & Actions</h3>
        <div class="export-buttons">
            <button type="button" id="export-csv" class="export-btn" onclick="exportResults('csv')">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" y1="15" x2="12" y2="3"></line></svg>
                Export to CSV
            </button>
            <button type="button" id="export-pdf" class="export-btn" onclick="exportResults('pdf')">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg>
                Export to PDF
            </button>
            <button type="button" id="print-results" class="export-btn" onclick="window.print()">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="6 9 6 2 18 2 18 9"></polyline><path d="M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"></path><rect x="6" y="14" width="12" height="8"></rect></svg>
                Print Results
            </button>
        </div>
    </div>
    
    <!-- Legal disclaimer -->
    <div class="legal-disclaimer">
        <h5>Disclaimer</h5>
        <p>This risk assessment tool is intended to support clinical decision-making by qualified healthcare professionals. The calculations are based on established risk algorithms but have inherent limitations and should not be the sole basis for diagnosis or treatment decisions.</p>
        <p>The Lp(a) risk modification is based on current evidence but is an evolving area of research. Always exercise clinical judgment and refer to updated guidelines when making treatment decisions.</p>
        <p>This tool does not store or transmit patient information. All calculations are performed locally in your browser.</p>
    </div>
</div>
<!-- Medication Management Tab -->
<div id="medication-tab" class="tab-content">
    <form id="medication-form" class="clinical-form">
        <div class="form-header">
            <h2 class="section-title">Medication Management</h2>
            <p class="section-description">Evaluate current lipid-lowering therapy and receive personalized medication recommendations based on risk assessment and clinical guidelines.</p>
        </div>
        
        <div class="card">
            <div class="card-header active">
                <h3>Prevention Category</h3>
                <span class="toggle-icon">â–¼</span>
            </div>
            <div class="card-body active">
                <div class="form-row">
                    <div class="form-group">
                        <label class="required">Prevention Category
                            <div class="tooltip-container">
                                <div class="info-icon">i</div>
                                <div class="tooltip-text">Primary prevention is for patients without established cardiovascular disease. Secondary prevention is for patients with existing cardiovascular disease.</div>
                            </div>
                        </label>
                        <select id="prevention-category" required>
                            <option value="" selected disabled>Select</option>
                            <option value="primary">Primary Prevention</option>
                            <option value="secondary">Secondary Prevention</option>
                        </select>
                        <div class="error-message">Please select a prevention category</div>
                    </div>
                    
                    <div class="form-group">
                        <label>Secondary Prevention Details
                            <div class="tooltip-container">
                                <div class="info-icon">i</div>
                                <div class="tooltip-text">Specify qualifying condition(s) for secondary prevention. This affects treatment targets and PCSK9 inhibitor coverage criteria.</div>
                            </div>
                        </label>
                        <select id="secondary-details" disabled>
                            <option value="" selected disabled>Select if applicable</option>
                            <option value="mi">MI or ACS within past 2 years</option>
                            <option value="stroke">Ischemic stroke/TIA</option>
                            <option value="cad">Coronary artery disease (other)</option>
                            <option value="pad">Peripheral arterial disease</option>
                            <option value="multi">Multiple vascular territories</option>
                        </select>
                        <div class="error-message">Please select secondary prevention details</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card">
            <div class="card-header active">
                <h3>Current Lipid Profile</h3>
                <span class="toggle-icon">â–¼</span>
            </div>
            <div class="card-body active">
                <div class="form-row">
                    <div class="form-group">
                        <label class="required">Total Cholesterol</label>
                        <div class="input-group">
                            <input type="number" id="med-total-chol" min="1" max="15" placeholder="Enter value" required step="0.1">
                            <select id="med-total-chol-unit" class="unit-selector">
                                <option value="mmol/L">mmol/L</option>
                                <option value="mg/dL">mg/dL</option>
                            </select>
                        </div>
                        <div class="error-message">Please enter a valid value between 1 and 15</div>
                    </div>
                    
                    <div class="form-group">
                        <label class="required">LDL Cholesterol</label>
                        <div class="input-group">
                            <input type="number" id="med-ldl" min="0.5" max="10" placeholder="Enter value" required step="0.1">
                            <select id="med-ldl-unit" class="unit-selector">
                                <option value="mmol/L">mmol/L</option>
                                <option value="mg/dL">mg/dL</option>
                            </select>
                        </div>
                        <div class="error-message">Please enter a valid value between 0.5 and 10</div>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label class="required">HDL Cholesterol</label>
                        <div class="input-group">
                            <input type="number" id="med-hdl" min="0.5" max="3" placeholder="Enter value" required step="0.1">
                            <select id="med-hdl-unit" class="unit-selector">
                                <option value="mmol/L">mmol/L</option>
                                <option value="mg/dL">mg/dL</option>
                            </select>
                        </div>
                        <div class="error-message">Please enter a valid value between 0.5 and 3</div>
                    </div>
                    
                    <div class="form-group">
                        <label class="required">Triglycerides</label>
                        <div class="input-group">
                            <input type="number" id="med-trig" min="0.5" max="15" placeholder="Enter value" required step="0.1">
                            <select id="med-trig-unit" class="unit-selector">
                                <option value="mmol/L">mmol/L</option>
                                <option value="mg/dL">mg/dL</option>
                            </select>
                        </div>
                        <div class="error-message">Please enter a valid value between 0.5 and 15</div>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label>Non-HDL Cholesterol</label>
                        <div class="input-group">
                            <input type="number" id="med-non-hdl" placeholder="Auto-calculated" disabled step="0.1">
                            <span class="unit-selector" id="med-non-hdl-unit">mmol/L</span>
                        </div>
                        <a class="toggle-link" id="toggle-manual-non-hdl">Enter manually</a>
                        <div class="error-message">Please enter a valid non-HDL value</div>
                    </div>
                    
                    <div class="form-group">
                        <label>ApoB
                            <div class="tooltip-container">
                                <div class="info-icon">i</div>
                                <div class="tooltip-text">ApoB is now recommended as a risk marker in certain high-risk patients and is required for PCSK9 inhibitor coverage.</div>
                            </div>
                        </label>
                        <div class="input-group">
                            <input type="number" id="med-apob" min="0.2" max="2.5" placeholder="Enter value (optional)" step="0.01">
                            <select id="med-apob-unit" class="unit-selector">
                                <option value="g/L">g/L</option>
                                <option value="mg/dL">mg/dL</option>
                            </select>
                        </div>
                        <div class="error-message">Please enter a valid value between 0.2 and 2.5</div>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label>Lp(a)
                            <div class="tooltip-container">
                                <div class="info-icon">i</div>
                                <div class="tooltip-text">Elevated Lp(a) levels â‰¥50 mg/dL (or â‰¥100 nmol/L) are associated with increased cardiovascular risk and may influence treatment decisions.</div>
                            </div>
                        </label>
                        <div class="input-group">
                            <input type="number" id="med-lpa" min="0" max="500" placeholder="Enter value (optional)" step="1">
                            <select id="med-lpa-unit" class="unit-selector">
                                <option value="mg/dL">mg/dL</option>
                                <option value="nmol/L">nmol/L</option>
                            </select>
                        </div>
                        <div class="error-message">Please enter a valid value between 0 and 500</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card">
            <div class="card-header active">
                <h3>Current Lipid-Lowering Medications</h3>
                <span class="toggle-icon">â–¼</span>
            </div>
            <div class="card-body active">
                <!-- Statins -->
                <div class="medication-section">
                    <h4 class="medication-category">Statin Therapy</h4>
                    <div class="form-row">
                        <div class="form-group">
                            <label>Statin</label>
                            <select id="med-statin">
                                <option value="none" selected>None</option>
                                <option value="atorvastatin">Atorvastatin (Lipitor)</option>
                                <option value="rosuvastatin">Rosuvastatin (Crestor)</option>
                                <option value="simvastatin">Simvastatin (Zocor)</option>
                                <option value="pravastatin">Pravastatin (Pravachol)</option>
                                <option value="lovastatin">Lovastatin (Mevacor)</option>
                                <option value="fluvastatin">Fluvastatin (Lescol)</option>
                                <option value="pitavastatin">Pitavastatin (Livalo)</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label>Statin Dose</label>
                            <select id="med-statin-dose" disabled>
                                <option value="" selected>Select dose</option>
                                <!-- Options will be populated by JavaScript based on selected statin -->
                            </select>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label>Statin Intolerance</label>
                            <select id="med-statin-intolerance">
                                <option value="no" selected>No</option>
                                <option value="partial">Partial (tolerates lower doses)</option>
                                <option value="complete">Complete (cannot tolerate any statin)</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label>Intolerance Details
                                <div class="tooltip-container">
                                    <div class="info-icon">i</div>
                                    <div class="tooltip-text">Documentation of intolerance is required for PCSK9 inhibitor coverage.</div>
                                </div>
                            </label>
                            <select id="med-intolerance-type" disabled>
                                <option value="" selected>Select if applicable</option>
                                <option value="myalgia">Myalgia without CK elevation</option>
                                <option value="myositis">Myositis (CK elevation &lt;10Ã— ULN)</option>
                                <option value="myopathy">Myopathy (CK elevation â‰¥10Ã— ULN)</option>
                                <option value="rhabdo">Rhabdomyolysis</option>
                                <option value="liver">Liver enzyme elevation â‰¥3Ã— ULN</option>
                                <option value="other">Other documented intolerance</option>
                            </select>
                        </div>
                    </div>
                </div>
                
                <!-- Other medications -->
                <div class="medication-section">
                    <h4 class="medication-category">Additional Lipid-Lowering Therapies</h4>
                    <div class="checkbox-group">
                        <div class="checkbox-item">
                            <input type="checkbox" id="med-ezetimibe">
                            <label for="med-ezetimibe">Ezetimibe (Ezetrol)</label>
                        </div>
                        <div class="checkbox-item">
                            <input type="checkbox" id="med-pcsk9">
                            <label for="med-pcsk9">PCSK9 Inhibitor</label>
                        </div>
                        <div class="checkbox-item">
                            <input type="checkbox" id="med-fibrate">
                            <label for="med-fibrate">Fibrate</label>
                        </div>
                        <div class="checkbox-item">
                            <input type="checkbox" id="med-niacin">
                            <label for="med-niacin">Niacin</label>
                        </div>
                        <div class="checkbox-item">
                            <input type="checkbox" id="med-bile-acid">
                            <label for="med-bile-acid">Bile Acid Sequestrant</label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- PCSK9 specific fields, conditionally displayed -->
        <div class="card" id="pcsk9-details" style="display: none;">
            <div class="card-header active">
                <h3>PCSK9 Inhibitor Details</h3>
                <span class="toggle-icon">â–¼</span>
            </div>
            <div class="card-body active">
                <div class="form-row">
                    <div class="form-group">
                        <label>PCSK9 Inhibitor Type</label>
                        <select id="med-pcsk9-type">
                            <option value="" selected disabled>Select</option>
                            <option value="evolocumab">Evolocumab (Repatha)</option>
                            <option value="alirocumab">Alirocumab (Praluent)</option>
                            <option value="inclisiran">Inclisiran (Leqvio)</option>
                        </select>
                        <div class="error-message">Please select a PCSK9 inhibitor type</div>
                    </div>
                    
                    <div class="form-group">
                        <label>PCSK9 Inhibitor Dose</label>
                        <select id="med-pcsk9-dose" disabled>
                            <option value="" selected>Select dose</option>
                            <!-- Options will be populated by JavaScript based on selected PCSK9 inhibitor -->
                        </select>
                        <div class="error-message">Please select a dose</div>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label>Duration on Maximum Therapy
                            <div class="tooltip-container">
                                <div class="info-icon">i</div>
                                <div class="tooltip-text">BC PharmaCare requires at least 3 months on maximum tolerated statin + ezetimibe before PCSK9 inhibitor coverage.</div>
                            </div>
                        </label>
                        <select id="med-max-therapy-duration">
                            <option value="" selected disabled>Select</option>
                            <option value="<3">&lt;3 months</option>
                            <option value="3-6">3-6 months</option>
                            <option value=">6">&gt;6 months</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>LDL Reduction on Current Therapy</label>
                        <div class="input-group">
                            <input type="number" id="med-ldl-reduction" min="0" max="100" placeholder="% reduction">
                            <span class="unit-selector">%</span>
                        </div>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="alert alert-info">
                        <strong>BC PharmaCare Coverage Criteria</strong>
                        <ul>
                            <li>For secondary prevention: LDL â‰¥2.0 mmol/L despite maximum tolerated statin + ezetimibe</li>
                            <li>For FH with DLCN score â‰¥6: LDL â‰¥3.5 mmol/L despite maximum tolerated statin + ezetimibe</li>
                            <li>For primary prevention with high risk: LDL â‰¥3.5 mmol/L despite maximum tolerated statin + ezetimibe</li>
                            <li>Baseline and follow-up lipid panels are required</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="form-actions">
            <button type="button" class="secondary-btn" onclick="resetForm('medication-form')">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"></path><path d="M3 3v5h5"></path></svg>
                Reset Form
            </button>
            <button type="button" class="primary-btn" onclick="evaluateMedications()">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"></path></svg>
                Generate Recommendations
            </button>
        </div>
    </form>
</div>
<!-- Modals -->
<!-- Warning Modal -->
<div id="warning-modal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"></path><line x1="12" y1="9" x2="12" y2="13"></line><line x1="12" y1="17" x2="12.01" y2="17"></line></svg>
                Attention Required
            </h3>
            <button type="button" class="modal-close" aria-label="Close">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
            </button>
        </div>
        <div class="modal-body">
            <p id="modal-message"></p>
        </div>
        <div class="modal-footer">
            <button type="button" class="secondary-btn close-btn">Close</button>
        </div>
    </div>
</div>

<!-- Clinical Info Modal -->
<div id="clinical-info-modal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
                Clinical Information
            </h3>
            <button type="button" class="modal-close" aria-label="Close">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
            </button>
        </div>
        <div class="modal-body">
            <div id="clinical-info-content"></div>
        </div>
        <div class="modal-footer">
            <button type="button" class="secondary-btn close-btn">Close</button>
        </div>
    </div>
</div>

<!-- PDF Export Preview Modal -->
<div id="pdf-preview-modal" class="modal">
    <div class="modal-content modal-lg">
        <div class="modal-header">
            <h3 class="modal-title">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg>
                PDF Preview
            </h3>
            <button type="button" class="modal-close" aria-label="Close">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
            </button>
        </div>
        <div class="modal-body">
            <div id="pdf-preview-content"></div>
        </div>
        <div class="modal-footer">
            <div class="modal-options">
                <div class="form-group inline-group">
                    <label for="pdf-include-logo">Include Header</label>
                    <input type="checkbox" id="pdf-include-logo" checked>
                </div>
                <div class="form-group inline-group">
                    <label for="pdf-include-disclaimer">Include Disclaimer</label>
                    <input type="checkbox" id="pdf-include-disclaimer" checked>
                </div>
            </div>
            <div class="modal-actions">
                <button type="button" class="secondary-btn close-btn">Cancel</button>
                <button type="button" class="primary-btn" id="download-pdf-btn">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" y1="15" x2="12" y2="3"></line></svg>
                    Download PDF
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Help Modal -->
<div id="help-modal" class="modal">
    <div class="modal-content modal-lg">
        <div class="modal-header">
            <h3 class="modal-title">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path><line x1="12" y1="17" x2="12.01" y2="17"></line></svg>
                Help & Instructions
            </h3>
            <button type="button" class="modal-close" aria-label="Close">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
            </button>
        </div>
        <div class="modal-body">
            <div class="help-tabs">
                <button class="help-tab active" data-tab="general-help">General</button>
                <button class="help-tab" data-tab="frs-help">FRS</button>
                <button class="help-tab" data-tab="qrisk-help">QRISK3</button>
                <button class="help-tab" data-tab="lpa-help">Lp(a)</button>
                <button class="help-tab" data-tab="med-help">Medications</button>
            </div>
            
            <div class="help-content active" id="general-help">
                <h4>General Instructions</h4>
                <p>The CVD Risk Toolkit allows you to calculate and compare cardiovascular risk using multiple validated risk calculators with the additional ability to factor in Lipoprotein(a) levels as a risk modifier.</p>
                
                <h5>Getting Started</h5>
                <ol>
                    <li>Select the appropriate tab for the risk calculator you wish to use</li>
                    <li>Fill in the required information (marked with *)</li>
                    <li>Click the calculate button to generate results</li>
                    <li>View treatment recommendations based on clinical guidelines</li>
                </ol>
                
                <h5>Features</h5>
                <ul>
                    <li><strong>Unit Conversion:</strong> The toolkit automatically handles unit conversions between mmol/L and mg/dL for lipid values</li>
                    <li><strong>Lp(a) Modifier:</strong> Incorporate Lp(a) levels as a risk modifier based on current evidence</li>
                    <li><strong>Treatment Recommendations:</strong> Receive guideline-based medication recommendations</li>
                    <li><strong>Export Options:</strong> Export results as PDF or CSV, or print for patient records</li>
                </ul>
            </div>
            
            <div class="help-content" id="frs-help">
                <h4>Framingham Risk Score</h4>
                <p>The Framingham Risk Score (FRS) estimates 10-year risk of cardiovascular disease based on the Framingham Heart Study. It's widely validated and used in North American guidelines.</p>
                
                <h5>Required Information</h5>
                <ul>
                    <li><strong>Age:</strong> 30-74 years</li>
                    <li><strong>Sex:</strong> Male or Female</li>
                    <li><strong>Total Cholesterol:</strong> In mmol/L or mg/dL</li>
                    <li><strong>HDL Cholesterol:</strong> In mmol/L or mg/dL</li>
                    <li><strong>Systolic Blood Pressure:</strong> In mmHg</li>
                    <li><strong>Blood Pressure Treatment:</strong> Yes or No</li>
                    <li><strong>Smoking Status:</strong> Yes or No</li>
                </ul>
                
                <h5>Optional Information</h5>
                <ul>
                    <li><strong>Diabetes Status:</strong> Enhances risk assessment</li>
                    <li><strong>LDL Cholesterol:</strong> Used for treatment recommendations</li>
                    <li><strong>Lp(a) Level:</strong> Used as a risk modifier</li>
                </ul>
                
                <h5>Interpretation</h5>
                <ul>
                    <li><strong>Low Risk:</strong> &lt;10% 10-year risk</li>
                    <li><strong>Moderate Risk:</strong> 10-19% 10-year risk</li>
                    <li><strong>High Risk:</strong> â‰¥20% 10-year risk</li>
                </ul>
            </div>
            
            <div class="help-content" id="qrisk-help">
                <h4>QRISK3</h4>
                <p>QRISK3 is a cardiovascular risk prediction algorithm developed in the UK. It includes additional factors not considered in FRS.</p>
                
                <h5>Additional Features in QRISK3</h5>
                <ul>
                    <li>Ethnicity considerations</li>
                    <li>Family history of cardiovascular disease</li>
                    <li>More detailed smoking categories</li>
                    <li>Specific medical conditions (atrial fibrillation, rheumatoid arthritis, CKD)</li>
                    <li>Blood pressure variability</li>
                </ul>
                
                <h5>When to Consider QRISK3</h5>
                <ul>
                    <li>For diverse ethnic populations</li>
                    <li>When the patient has conditions not captured by FRS</li>
                    <li>When blood pressure variability data is available</li>
                    <li>For comparing risk assessments from different algorithms</li>
                </ul>
            </div>
            
            <div class="help-content" id="lpa-help">
                <h4>Understanding Lp(a) as a Risk Modifier</h4>
                <p>Lipoprotein(a) is an independent risk factor for cardiovascular disease that is not captured in traditional risk calculators.</p>
                
                <h5>Lp(a) Risk Modification</h5>
                <ul>
                    <li><strong>Normal Lp(a) levels:</strong> &lt;30 mg/dL or &lt;75 nmol/L (no additional risk)</li>
                    <li><strong>Borderline elevated:</strong> 30-50 mg/dL or 75-125 nmol/L (1.0-1.3x risk)</li>
                    <li><strong>Elevated:</strong> 50-100 mg/dL or 125-250 nmol/L (1.3-1.6x risk)</li>
                    <li><strong>High:</strong> 100-200 mg/dL or 250-500 nmol/L (1.6-2.0x risk)</li>
                    <li><strong>Very high:</strong> &gt;200 mg/dL or &gt;500 nmol/L (2.0-3.0x risk)</li>
                </ul>
                
                <h5>Clinical Implications</h5>
                <p>Elevated Lp(a) may warrant:</p>
                <ul>
                    <li>More aggressive LDL-C targets</li>
                    <li>Earlier initiation of preventive therapy</li>
                    <li>Family screening</li>
                    <li>Consideration of specialized therapies in development</li>
                </ul>
            </div>
            
            <div class="help-content" id="med-help">
                <h4>Medication Management</h4>
                <p>The medication management tab provides guideline-based therapy recommendations based on risk assessment and current treatments.</p>
                
                <h5>Guideline-based Treatment Recommendations</h5>
                <ul>
                    <li>Based on 2021 Canadian Cardiovascular Society Guidelines</li>
                    <li>Includes 2019 ESC/EAS and 2018 AHA/ACC Guidelines principles</li>
                    <li>Factors in BC PharmaCare coverage criteria for PCSK9 inhibitors</li>
                </ul>
                
                <h5>Medication Options</h5>
                <ul>
                    <li><strong>Statins:</strong> First-line therapy stratified by intensity</li>
                    <li><strong>Ezetimibe:</strong> Second-line therapy or add-on to statins</li>
                    <li><strong>PCSK9 Inhibitors:</strong> For high-risk patients who don't achieve targets with maximally tolerated statin and ezetimibe</li>
                    <li><strong>Other Options:</strong> Fibrates, bile acid sequestrants, niacin</li>
                </ul>
                
                <h5>BC PharmaCare Coverage Criteria for PCSK9 Inhibitors</h5>
                <p>Coverage requires:</p>
                <ul>
                    <li>Documented cardiovascular disease or familial hypercholesterolemia</li>
                    <li>LDL-C above target despite maximum tolerated statin + ezetimibe for at least 3 months</li>
                    <li>Special Authority application with detailed documentation</li>
                </ul>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="secondary-btn close-btn">Close</button>
        </div>
    </div>
</div>
/**
 * validation.js
 * Handles form validation, error display, and unit conversions
 */

/**
 * Validates a numeric input field
 * @param {string} fieldId - The ID of the input field
 * @param {number} min - Minimum allowed value
 * @param {number} max - Maximum allowed value
 * @param {string} fieldName - Human-readable field name for error messages
 * @param {boolean} required - Whether the field is required
 * @returns {Object} - { isValid: boolean, value: number|null, message: string|null }
 */
function validateNumericInput(fieldId, min, max, fieldName, required = true) {
    const field = document.getElementById(fieldId);
    if (!field) {
        console.error(`Field with ID ${fieldId} not found`);
        return { 
            isValid: false, 
            value: null, 
            message: `Internal error: Field ${fieldId} not found.` 
        };
    }
    
    const value = field.value.trim();
    const errorDisplay = field.parentElement.querySelector('.error-message') || 
                        field.closest('.form-group')?.querySelector('.error-message');
    
    // Check if field is required and empty
    if (required && value === '') {
        field.classList.add('error');
        if (errorDisplay) errorDisplay.style.display = 'block';
        return { 
            isValid: false, 
            value: null, 
            message: `${fieldName} is required.` 
        };
    }
    
    // If field is not required and empty, return valid
    if (!required && value === '') {
        field.classList.remove('error');
        if (errorDisplay) errorDisplay.style.display = 'none';
        return { 
            isValid: true, 
            value: null, 
            message: null 
        };
    }
    
    // Check if input is a number
    const numValue = parseFloat(value);
    if (isNaN(numValue)) {
        field.classList.add('error');
        if (errorDisplay) errorDisplay.style.display = 'block';
        return { 
            isValid: false, 
            value: null, 
            message: `${fieldName} must be a number. Please enter a valid numeric value.` 
        };
    }
    
    // Check if value is within range
    if (numValue < min || numValue > max) {
        field.classList.add('error');
        if (errorDisplay) errorDisplay.style.display = 'block';
        return { 
            isValid: false, 
            value: null, 
            message: `${fieldName} must be between ${min} and ${max}.` 
        };
    }
    
    // Input is valid
    field.classList.remove('error');
    if (errorDisplay) errorDisplay.style.display = 'none';
    return { 
        isValid: true, 
        value: numValue, 
        message: null 
    };
}

/**
 * Validates a select field
 * @param {string} fieldId - The ID of the select field
 * @param {string} fieldName - Human-readable field name for error messages
 * @param {boolean} required - Whether the field is required
 * @returns {Object} - { isValid: boolean, value: string|null, message: string|null }
 */
function validateSelectInput(fieldId, fieldName, required = true) {
    const field = document.getElementById(fieldId);
    if (!field) {
        console.error(`Field with ID ${fieldId} not found`);
        return { 
            isValid: false, 
            value: null, 
            message: `Internal error: Field ${fieldId} not found.` 
        };
    }
    
    const value = field.value;
    const errorDisplay = field.parentElement.querySelector('.error-message') || 
                       field.closest('.form-group')?.querySelector('.error-message');
    
    // Check if field is required and empty or default option
    if (required && (value === '' || value === null || field.selectedIndex === 0 && field.options[0].disabled)) {
        field.classList.add('error');
        if (errorDisplay) errorDisplay.style.display = 'block';
        return { 
            isValid: false, 
            value: null, 
            message: `Please select a ${fieldName}.` 
        };
    }
    
    // Input is valid
    field.classList.remove('error');
    if (errorDisplay) errorDisplay.style.display = 'none';
    return { 
        isValid: true, 
        value: value, 
        message: null 
    };
}

/**
 * Validates a checkbox
 * @param {string} fieldId - The ID of the checkbox
 * @param {string} fieldName - Human-readable field name for error messages
 * @param {boolean} required - Whether the checkbox must be checked
 * @returns {Object} - { isValid: boolean, value: boolean, message: string|null }
 */
function validateCheckbox(fieldId, fieldName, required = false) {
    const field = document.getElementById(fieldId);
    if (!field) {
        console.error(`Field with ID ${fieldId} not found`);
        return { 
            isValid: false, 
            value: false, 
            message: `Internal error: Field ${fieldId} not found.` 
        };
    }
    
    const checked = field.checked;
    const errorDisplay = field.parentElement.querySelector('.error-message') || 
                       field.closest('.form-group')?.querySelector('.error-message');
    
    // Check if checkbox is required and not checked
    if (required && !checked) {
        field.classList.add('error');
        if (errorDisplay) errorDisplay.style.display = 'block';
        return { 
            isValid: false, 
            value: false, 
            message: `${fieldName} must be checked.` 
        };
    }
    
    // Input is valid
    field.classList.remove('error');
    if (errorDisplay) errorDisplay.style.display = 'none';
    return { 
        isValid: true, 
        value: checked, 
        message: null 
    };
}

/**
 * Displays validation errors to the user
 * @param {Array} errors - Array of error messages
 */
function displayErrors(errors) {
    if (errors.length === 0) return;
    
    const errorMessage = errors.join('\nâ€¢ ');
    showModal('Please correct the following errors:\n\nâ€¢ ' + errorMessage);
}

/**
 * Shows a modal with a message
 * @param {string} message - Message to display in modal
 */
function showModal(message) {
    document.getElementById('modal-message').innerHTML = message.replace(/\n/g, '<br>');
    document.getElementById('warning-modal').style.display = 'block';
}

/**
 * Shows a clinical warning message
 * @param {string} title - Warning title
 * @param {string} message - Warning message
 */
function showClinicalWarning(title, message) {
    document.getElementById('clinical-info-content').innerHTML = `
        <h4>${title}</h4>
        <p>${message}</p>
    `;
    document.getElementById('clinical-info-modal').style.display = 'block';
}

/**
 * Unit conversion functions for various measurements
 */

/**
 * Helper function to convert height from feet/inches to cm
 * @param {number} feet - Height in feet
 * @param {number} inches - Height in inches
 * @returns {number} - Height in cm
 */
function convertHeightToCm(feet, inches) {
    if (feet === null && inches === null) return null;
    feet = feet || 0;
    inches = inches || 0;
    return ((feet * 12) + parseFloat(inches)) * 2.54;
}

/**
 * Helper function to convert weight from pounds to kg
 * @param {number} pounds - Weight in pounds
 * @returns {number} - Weight in kg
 */
function convertWeightToKg(pounds) {
    if (pounds === null) return null;
    return pounds * 0.45359237;
}

/**
 * Helper function to convert cholesterol between mg/dL and mmol/L
 * @param {number} value - Cholesterol value
 * @param {string} fromUnit - Original unit ('mg/dL' or 'mmol/L')
 * @param {string} toUnit - Target unit ('mg/dL' or 'mmol/L')
 * @returns {number} - Converted cholesterol value
 */
function convertCholesterol(value, fromUnit, toUnit) {
    if (value === null) return null;
    
    if (fromUnit === toUnit) {
        return parseFloat(value);
    }
    
    if (fromUnit === 'mg/dL' && toUnit === 'mmol/L') {
        return parseFloat(value) / 38.67;
    }
    
    if (fromUnit === 'mmol/L' && toUnit === 'mg/dL') {
        return parseFloat(value) * 38.67;
    }
    
    return parseFloat(value);
}

/**
 * Helper function to convert Lp(a) between mg/dL and nmol/L
 * @param {number} value - Lp(a) value
 * @param {string} fromUnit - Original unit ('mg/dL' or 'nmol/L')
 * @param {string} toUnit - Target unit ('mg/dL' or 'nmol/L')
 * @returns {number} - Converted Lp(a) value
 */
function convertLpa(value, fromUnit, toUnit) {
    if (value === null) return null;
    
    if (fromUnit === toUnit) {
        return parseFloat(value);
    }
    
    if (fromUnit === 'mg/dL' && toUnit === 'nmol/L') {
        return parseFloat(value) * 2.5;
    }
    
    if (fromUnit === 'nmol/L' && toUnit === 'mg/dL') {
        return parseFloat(value) * 0.4;
    }
    
    return parseFloat(value);
}

/**
 * Calculates BMI from height and weight
 * @param {number} height - Height in cm
 * @param {number} weight - Weight in kg
 * @returns {number} - BMI value
 */
function calculateBMI(height, weight) {
    if (!height || !weight) return null;
    // Convert height from cm to meters
    const heightInM = height / 100;
    return weight / (heightInM * heightInM);
}

/**
 * Format BMI with risk category
 * @param {number} bmi - BMI value
 * @returns {string} - Formatted BMI with category
 */
function formatBMI(bmi) {
    if (!bmi) return "Not available";
    
    let category;
    if (bmi < 18.5) {
        category = "Underweight";
    } else if (bmi < 25) {
        category = "Normal weight";
    } else if (bmi < 30) {
        category = "Overweight";
    } else {
        category = "Obese";
    }
    
    return bmi.toFixed(1) + " kg/mÂ² (" + category + ")";
}

/**
 * Validates the Framingham Risk Score (FRS) form
 * @returns {Object} - { isValid: boolean, data: Object, errors: Array }
 */
function validateFRSForm() {
    const errors = [];
    const data = {};
    
    // Validate age
    const ageResult = validateNumericInput('frs-age', 30, 74, 'Age');
    if (!ageResult.isValid) errors.push(ageResult.message);
    data.age = ageResult.value;
    
    // Validate sex
    const sexResult = validateSelectInput('frs-sex', 'sex');
    if (!sexResult.isValid) errors.push(sexResult.message);
    data.sex = sexResult.value;
    
    // Validate total cholesterol
    const totalCholResult = validateNumericInput('frs-total-chol', 1, 15, 'Total Cholesterol');
    if (!totalCholResult.isValid) errors.push(totalCholResult.message);
    data.totalChol = totalCholResult.value;
    data.totalCholUnit = document.getElementById('frs-total-chol-unit').value;
    
    // Validate HDL cholesterol
    const hdlResult = validateNumericInput('frs-hdl', 0.5, 3, 'HDL Cholesterol');
    if (!hdlResult.isValid) errors.push(hdlResult.message);
    data.hdl = hdlResult.value;
    data.hdlUnit = document.getElementById('frs-hdl-unit').value;
    
    // Validate systolic blood pressure
    const sbpResult = validateNumericInput('frs-sbp', 90, 200, 'Systolic Blood Pressure');
    if (!sbpResult.isValid) errors.push(sbpResult.message);
    data.sbp = sbpResult.value;
    
    // Validate BP treatment
    const bpTreatmentResult = validateSelectInput('frs-bp-treatment', 'blood pressure treatment status');
    if (!bpTreatmentResult.isValid) errors.push(bpTreatmentResult.message);
    data.bpTreatment = bpTreatmentResult.value === 'yes';
    
    // Validate smoker status
    const smokerResult = validateSelectInput('frs-smoker', 'smoker status');
    if (!smokerResult.isValid) errors.push(smokerResult.message);
    data.smoker = smokerResult.value === 'yes';
    
    // Validate diabetes (not required)
    data.diabetes = document.getElementById('frs-diabetes').value === 'yes';
    
    // Validate Lp(a) (not required)
    const lpaResult = validateNumericInput('frs-lpa', 0, 500, 'Lp(a) Level', false);
    if (!lpaResult.isValid && lpaResult.message) errors.push(lpaResult.message);
    data.lpa = lpaResult.value;
    data.lpaUnit = document.getElementById('frs-lpa-unit').value;
    
    // Add the LDL-C value if provided for treatment recommendations
    const ldlInput = document.getElementById('frs-ldl');
    if (ldlInput) {
        const ldlResult = validateNumericInput('frs-ldl', 0.5, 10, 'LDL Cholesterol', false);
        if (!ldlResult.isValid && ldlResult.message) errors.push(ldlResult.message);
        data.ldl = ldlResult.value;
        if (data.ldl) {
            data.ldlUnit = document.getElementById('frs-ldl-unit')?.value || 'mmol/L';
        }
    }
    
    return {
        isValid: errors.length === 0,
        data: data,
        errors: errors
    };
}

/**
 * Validates the QRISK3 form
 * @returns {Object} - { isValid: boolean, data: Object, errors: Array }
 */
function validateQRISKForm() {
    const errors = [];
    const data = {};
    
    // Validate age
    const ageResult = validateNumericInput('qrisk-age', 25, 84, 'Age');
    if (!ageResult.isValid) errors.push(ageResult.message);
    data.age = ageResult.value;
    
    // Validate sex
    const sexResult = validateSelectInput('qrisk-sex', 'sex');
    if (!sexResult.isValid) errors.push(sexResult.message);
    data.sex = sexResult.value;
    
    // Validate ethnicity
    const ethnicityResult = validateSelectInput('qrisk-ethnicity', 'ethnicity');
    if (!ethnicityResult.isValid) errors.push(ethnicityResult.message);
    data.ethnicity = ethnicityResult.value;
    
    // Validate height
    const heightUnit = document.getElementById('qrisk-height-unit').value;
    let heightResult;
    
    if (heightUnit === 'cm') {
        heightResult = validateNumericInput('qrisk-height', 100, 250, 'Height');
        if (!heightResult.isValid) errors.push(heightResult.message);
        data.height = heightResult.value;
    } else {
        // Validate feet and inches
        const feetResult = validateNumericInput('qrisk-height-feet', 3, 7, 'Height (feet)', true);
        const inchesResult = validateNumericInput('qrisk-height-inches', 0, 11, 'Height (inches)', false);
        
        if (!feetResult.isValid) errors.push(feetResult.message);
        if (!inchesResult.isValid && inchesResult.message) errors.push(inchesResult.message);
        
        if (feetResult.isValid) {
            const inches = inchesResult.value || 0;
            data.height = convertHeightToCm(feetResult.value, inches);
        }
    }
    
    // Validate weight
    const weightResult = validateNumericInput('qrisk-weight', 30, 200, 'Weight');
    if (!weightResult.isValid) errors.push(weightResult.message);
    data.weight = weightResult.value;
    
    // Convert weight if needed
    if (data.weight && document.getElementById('qrisk-weight-unit').value === 'lb') {
        data.weight = convertWeightToKg(data.weight);
    }
    
    // Calculate BMI if we have height and weight
    if (data.height && data.weight) {
        data.bmi = calculateBMI(data.height, data.weight);
    }
    
    // Validate systolic blood pressure
    const sbpResult = validateNumericInput('qrisk-sbp', 70, 210, 'Systolic Blood Pressure');
    if (!sbpResult.isValid) errors.push(sbpResult.message);
    data.sbp = sbpResult.value;
    
    // Validate SD of SBP (not required)
    const sbpSdResult = validateNumericInput('qrisk-sbp-sd', 0, 30, 'Standard Deviation of SBP', false);
    if (!sbpSdResult.isValid && sbpSdResult.message) errors.push(sbpSdResult.message);
    data.sbpSd = sbpSdResult.value;
    
    // Validate total cholesterol
    const totalCholResult = validateNumericInput('qrisk-total-chol', 1, 15, 'Total Cholesterol');
    if (!totalCholResult.isValid) errors.push(totalCholResult.message);
    data.totalChol = totalCholResult.value;
    data.totalCholUnit = document.getElementById('qrisk-total-chol-unit').value;
    
    // Validate HDL cholesterol
    const hdlResult = validateNumericInput('qrisk-hdl', 0.5, 3, 'HDL Cholesterol');
    if (!hdlResult.isValid) errors.push(hdlResult.message);
    data.hdl = hdlResult.value;
    data.hdlUnit = document.getElementById('qrisk-hdl-unit').value;
    
    // Validate smoker status
    const smokerResult = validateSelectInput('qrisk-smoker', 'smoker status');
    if (!smokerResult.isValid) errors.push(smokerResult.message);
    data.smoker = smokerResult.value;
    
    // Validate diabetes
    const diabetesResult = validateSelectInput('qrisk-diabetes', 'diabetes status');
    if (!diabetesResult.isValid) errors.push(diabetesResult.message);
    data.diabetes = diabetesResult.value;
    
    // Validate family history of CVD
    const familyHistoryResult = validateSelectInput('qrisk-family-history', 'family history of CVD');
    if (!familyHistoryResult.isValid) errors.push(familyHistoryResult.message);
    data.familyHistory = familyHistoryResult.value === 'yes';
    
    // Validate BP treatment (not required)
    data.bpTreatment = document.getElementById('qrisk-bp-treatment').value === 'yes';
    
    // Get medical conditions
    data.atrialFibrillation = document.getElementById('qrisk-af').checked;
    data.rheumatoidArthritis = document.getElementById('qrisk-ra').checked;
    data.chronicKidneyDisease = document.getElementById('qrisk-ckd').checked;
    
    // Validate Lp(a) (not required)
    const lpaResult = validateNumericInput('qrisk-lpa', 0, 500, 'Lp(a) Level', false);
    if (!lpaResult.isValid && lpaResult.message) errors.push(lpaResult.message);
    data.lpa = lpaResult.value;
    data.lpaUnit = document.getElementById('qrisk-lpa-unit').value;
    
    // Add the LDL-C value if provided for treatment recommendations
    const ldlInput = document.getElementById('qrisk-ldl');
    if (ldlInput) {
        const ldlResult = validateNumericInput('qrisk-ldl', 0.5, 10, 'LDL Cholesterol', false);
        if (!ldlResult.isValid && ldlResult.message) errors.push(ldlResult.message);
        data.ldl = ldlResult.value;
        if (data.ldl) {
            data.ldlUnit = document.getElementById('qrisk-ldl-unit')?.value || 'mmol/L';
        }
    }
    
    return {
        isValid: errors.length === 0,
        data: data,
        errors: errors
    };
}

/**
 * Validate the medication form
 * @returns {Object} - Validation results: { isValid, data, errors }
 */
function validateMedicationForm() {
    const errors = [];
    const data = {};
    
    // Validate prevention category
    const preventionCategoryResult = validateSelectInput('prevention-category', 'Prevention Category');
    if (!preventionCategoryResult.isValid) errors.push(preventionCategoryResult.message);
    data.preventionCategory = preventionCategoryResult.value;
    
    // Validate secondary details if applicable
    if (data.preventionCategory === 'secondary') {
        const secondaryDetailsResult = validateSelectInput('secondary-details', 'Secondary Prevention Details');
        if (!secondaryDetailsResult.isValid) errors.push(secondaryDetailsResult.message);
        data.secondaryDetails = secondaryDetailsResult.value;
    }
    
    // Validate lipid values
    const lipidFields = [
        { id: 'med-total-chol', name: 'Total Cholesterol', min: 1, max: 15 },
        { id: 'med-ldl', name: 'LDL Cholesterol', min: 0.5, max: 10 },
        { id: 'med-hdl', name: 'HDL Cholesterol', min: 0.5, max: 3 },
        { id: 'med-trig', name: 'Triglycerides', min: 0.5, max: 15 }
    ];
    
    lipidFields.forEach(field => {
        const result = validateNumericInput(field.id, field.min, field.max, field.name);
        if (!result.isValid) errors.push(result.message);
        data[field.id.replace('med-', '')] = result.value;
        data[field.id.replace('med-', '') + '-unit'] = document.getElementById(field.id + '-unit').value;
    });
    
    // Get non-HDL
    const nonHDLInput = document.getElementById('med-non-hdl');
    if (nonHDLInput) {
        if (nonHDLInput.disabled) {
            // Auto-calculated value
            calculateNonHDL();
            data['non-hdl'] = parseFloat(nonHDLInput.value);
            data['non-hdl-unit'] = 'mmol/L';
        } else {
            // Manually entered value
            const result = validateNumericInput('med-non-hdl', 0.5, 12, 'Non-HDL Cholesterol');
            if (!result.isValid) errors.push(result.message);
            data['non-hdl'] = result.value;
            data['non-hdl-unit'] = document.getElementById('med-non-hdl-unit').textContent;
        }
    }
    
    // Get optional values
    // ApoB
    const apoBInput = document.getElementById('med-apob');
    if (apoBInput && apoBInput.value) {
        const result = validateNumericInput('med-apob', 0.2, 2.5, 'ApoB', false);
        if (!result.isValid && result.message) errors.push(result.message);
        data['apob'] = result.value;
        data['apob-unit'] = document.getElementById('med-apob-unit').value;
    }
    
    // Lp(a)
    const lpaInput = document.getElementById('med-lpa');
    if (lpaInput && lpaInput.value) {
        const result = validateNumericInput('med-lpa', 0, 500, 'Lp(a)', false);
        if (!result.isValid && result.message) errors.push(result.message);
        data['lpa'] = result.value;
        data['lpa-unit'] = document.getElementById('med-lpa-unit').value;
    }
    
    // Get medication data
    // Statin
    data['statin'] = document.getElementById('med-statin').value;
    if (data['statin'] !== 'none') {
        const statinDoseSelect = document.getElementById('med-statin-dose');
        const statinDoseResult = validateSelectInput('med-statin-dose', 'Statin Dose');
        if (!statinDoseResult.isValid) errors.push(statinDoseResult.message);
        data['statin-dose'] = statinDoseResult.value;
        
        // Get statin intensity
        const selectedOption = statinDoseSelect.options[statinDoseSelect.selectedIndex];
        data['statin-intensity'] = selectedOption ? selectedOption.dataset.intensity : null;
    }
    
    // Statin intolerance
    data['statin-intolerance'] = document.getElementById('med-statin-intolerance').value;
    if (data['statin-intolerance'] !== 'no') {
        const intoleranceTypeResult = validateSelectInput('med-intolerance-type', 'Intolerance Type');
        if (!intoleranceTypeResult.isValid) errors.push(intoleranceTypeResult.message);
        data['intolerance-type'] = intoleranceTypeResult.value;
    }
    
    // Other medications
    data['ezetimibe'] = document.getElementById('med-ezetimibe').checked;
    data['pcsk9'] = document.getElementById('med-pcsk9').checked;
    data['fibrate'] = document.getElementById('med-fibrate').checked;
    data['niacin'] = document.getElementById('med-niacin').checked;
    data['bile-acid'] = document.getElementById('med-bile-acid').checked;
    
    // PCSK9 inhibitor details
    if (data['pcsk9']) {
        const pcsk9TypeResult = validateSelectInput('med-pcsk9-type', 'PCSK9 Inhibitor Type');
        if (!pcsk9TypeResult.isValid) errors.push(pcsk9TypeResult.message);
        data['pcsk9-type'] = pcsk9TypeResult.value;
        
        const pcsk9DoseResult = validateSelectInput('med-pcsk9-dose', 'PCSK9 Inhibitor Dose');
        if (!pcsk9DoseResult.isValid) errors.push(pcsk9DoseResult.message);
        data['pcsk9-dose'] = pcsk9DoseResult.value;
        
        const maxTherapyDurationResult = validateSelectInput('med-max-therapy-duration', 'Duration on Maximum Therapy');
        if (!maxTherapyDurationResult.isValid) errors.push(maxTherapyDurationResult.message);
        data['max-therapy-duration'] = maxTherapyDurationResult.value;
        
        const ldlReductionResult = validateNumericInput('med-ldl-reduction', 0, 100, 'LDL Reduction on Current Therapy', false);
        if (!ldlReductionResult.isValid && ldlReductionResult.message) errors.push(ldlReductionResult.message);
        data['ldl-reduction'] = ldlReductionResult.value;
    }
    
    return {
        isValid: errors.length === 0,
        data: data,
        errors: errors
    };
}

/**
 * Add clinical validation for abnormal values
 */
function addClinicalValidation() {
    // Add validation for common clinical fields
    const clinicalFields = [
        { id: 'frs-total-chol', name: 'Total Cholesterol', min: 1, max: 15, unit: 'frs-total-chol-unit' },
        { id: 'frs-hdl', name: 'HDL Cholesterol', min: 0.5, max: 3, unit: 'frs-hdl-unit' },
        { id: 'frs-sbp', name: 'Systolic Blood Pressure', min: 90, max: 200 },
        { id: 'qrisk-total-chol', name: 'Total Cholesterol', min: 1, max: 15, unit: 'qrisk-total-chol-unit' },
        { id: 'qrisk-hdl', name: 'HDL Cholesterol', min: 0.5, max: 3, unit: 'qrisk-hdl-unit' },
        { id: 'qrisk-sbp', name: 'Systolic Blood Pressure', min: 70, max: 210 },
        { id: 'med-total-chol', name: 'Total Cholesterol', min: 1, max: 15, unit: 'med-total-chol-unit' },
        { id: 'med-ldl', name: 'LDL Cholesterol', min: 0.5, max: 10, unit: 'med-ldl-unit' },
        { id: 'med-hdl', name: 'HDL Cholesterol', min: 0.5, max: 3, unit: 'med-hdl-unit' },
        { id: 'med-trig', name: 'Triglycerides', min: 0.5, max: 15, unit: 'med-trig-unit' }
    ];
    
    clinicalFields.forEach(field => {
        const element = document.getElementById(field.id);
        if (element) {
            element.addEventListener('change', function() {
                validateClinicalValue(field.id, field.name, field.min, field.max, field.unit);
            });
        }
    });
}

/**
 * Reset form to default values
 * @param {string} formId - ID of the form to reset
 */
function resetForm(formId) {
    const form = document.getElementById(formId);
    if (!form) {
        return;
    }
    
    // Reset all inputs to default values
    form.reset();
    
    // Clear any error styling
    const errorFields = form.querySelectorAll('.error');
    errorFields.forEach(field => field.classList.remove('error'));
    
    // Hide error messages
    const errorMessages = form.querySelectorAll('.error-message');
    errorMessages.forEach(message => message.style.display = 'none');
    
    // Clear any calculated values or results
    const nonHDLInput = form.querySelector('#med-non-hdl');
    if (nonHDLInput) {
        nonHDLInput.value = '';
        nonHDLInput.disabled = true;
        const toggleLink = document.getElementById('toggle-manual-non-hdl');
        if (toggleLink) toggleLink.textContent = 'Enter manually';
    }
    
    // Reset PCSK9 details if present
    const pcsk9Details = document.getElementById('pcsk9-details');
    if (pcsk9Details) pcsk9Details.style.display = 'none';
    
    // Reset any dependent selects or fields
    const statinDoseSelect = form.querySelector('#med-statin-dose');
    if (statinDoseSelect) {
        statinDoseSelect.innerHTML = '<option value="" selected>Select dose</option>';
        statinDoseSelect.disabled = true;
    }
    
    const secondaryDetails = form.querySelector('#secondary-details');
    if (secondaryDetails) secondaryDetails.disabled = true;
    
    const intoleranceType = form.querySelector('#med-intolerance-type');
    if (intoleranceType) intoleranceType.disabled = true;
    
    // Clear SBP readings if present
    for (let i = 1; i <= 6; i++) {
        const reading = form.querySelector(`#${formId.split('-')[0]}-sbp-reading-${i}`);
        if (reading) reading.value = '';
    }
    
    const sbpResult = document.getElementById(`${formId.split('-')[0]}-sbp-sd-result`);
    if (sbpResult) sbpResult.style.display = 'none';
    
    // Reset height/feet view if applicable
    const heightUnit = form.querySelector(`#${formId.split('-')[0]}-height-unit`);
    if (heightUnit && heightUnit.value === 'ft/in') {
        heightUnit.value = 'cm';
        toggleHeightInputs(formId.split('-')[0]);
    }
    
    // Hide results display
    document.getElementById('results-container').style.display = 'none';
}
/**
 * calculations.js
 * Core calculation functions for CVD Risk Toolkit
 */

/**
 * Calculate Lp(a) risk modifier based on concentration
 * @param {number} lpaValue - Lp(a) concentration in mg/dL
 * @returns {number} - Risk multiplier
 */
function calculateLpaModifier(lpaValue) {
    // No additional risk below 30 mg/dL
    if (lpaValue < 30) {
        return 1.0;
    }
    // Linear increase 1.0-1.3x for 30-50 mg/dL
    else if (lpaValue >= 30 && lpaValue < 50) {
        return 1.0 + (lpaValue - 30) * (0.3 / 20);
    }
    // Linear increase 1.3-1.6x for 50-100 mg/dL
    else if (lpaValue >= 50 && lpaValue < 100) {
        return 1.3 + (lpaValue - 50) * (0.3 / 50);
    }
    // Linear increase 1.6-2.0x for 100-200 mg/dL
    else if (lpaValue >= 100 && lpaValue < 200) {
        return 1.6 + (lpaValue - 100) * (0.4 / 100);
    }
    // Linear increase 2.0-3.0x for 200-300 mg/dL
    else if (lpaValue >= 200 && lpaValue < 300) {
        return 2.0 + (lpaValue - 200) * (1.0 / 100);
    }
    // Maximum 3.0x increase for values â‰¥300 mg/dL
    else {
        return 3.0;
    }
}

/**
 * Determine risk category based on percentage
 * @param {number} riskPercentage - Risk percentage value
 * @returns {string} - Risk category (low, moderate, high)
 */
function getRiskCategory(riskPercentage) {
    if (riskPercentage < 10) {
        return 'low';
    } else if (riskPercentage < 20) {
        return 'moderate';
    } else {
        return 'high';
    }
}

/**
 * Calculates Framingham Risk Score
 * @param {Object} data - Validated data from the FRS form
 * @returns {Object} - Risk calculation results
 */
function calculateFraminghamRiskScore(data) {
    // Convert units if needed
    let totalChol = data.totalChol;
    let hdl = data.hdl;
    
    if (data.totalCholUnit === 'mg/dL') {
        totalChol = convertCholesterol(totalChol, 'mg/dL', 'mmol/L');
    }
    
    if (data.hdlUnit === 'mg/dL') {
        hdl = convertCholesterol(hdl, 'mg/dL', 'mmol/L');
    }
    
    let lnAge = Math.log(data.age);
    let lnTotalChol = Math.log(totalChol);
    let lnHdl = Math.log(hdl);
    let lnSbp = Math.log(data.sbp);
    
    let risk;
    
    if (data.sex === 'male') {
        // Coefficients for men
        risk = (lnAge * 3.11296) + 
               (lnTotalChol * 1.12370) - 
               (lnHdl * 0.93263) + 
               (lnSbp * (data.bpTreatment ? 1.99881 : 1.93303)) + 
               (data.smoker ? 0.65451 : 0) + 
               (data.diabetes ? 0.57367 : 0) - 
               23.9802;
    } else {
        // Coefficients for women
        risk = (lnAge * 2.72107) + 
               (lnTotalChol * 1.20904) - 
               (lnHdl * 0.70833) + 
               (lnSbp * (data.bpTreatment ? 2.82263 : 2.76157)) + 
               (data.smoker ? 0.52873 : 0) + 
               (data.diabetes ? 0.69154 : 0) - 
               26.1931;
    }
    
    // Calculate 10-year risk
    let baselineSurvival = data.sex === 'male' ? 0.88431 : 0.94833;
    let tenYearRisk = 1 - Math.pow(baselineSurvival, Math.exp(risk));
    let riskPercentage = tenYearRisk * 100;
    
    // Apply Lp(a) modifier if available
    let modifiedRiskPercentage = riskPercentage;
    let lpaModifier = 1.0;
    
    if (data.lpa !== null) {
        // Convert Lp(a) to mg/dL if needed
        let lpaValue = data.lpa;
        if (data.lpaUnit === 'nmol/L') {
            lpaValue = convertLpa(lpaValue, 'nmol/L', 'mg/dL');
        }
        
        // Calculate modifier based on Lp(a) level
        lpaModifier = calculateLpaModifier(lpaValue);
        modifiedRiskPercentage = riskPercentage * lpaModifier;
    }
    
    return {
        baseRisk: riskPercentage,
        lpaModifier: lpaModifier,
        modifiedRisk: modifiedRiskPercentage,
        riskCategory: getRiskCategory(modifiedRiskPercentage)
    };
}

/**
 * Calculates QRISK3 score (simplified version)
 * @param {Object} data - Validated data from the QRISK form
 * @returns {Object} - Risk calculation results
 */
function calculateQRISK3Score(data) {
    // Convert units if needed
    let totalChol = data.totalChol;
    let hdl = data.hdl;
    
    if (data.totalCholUnit === 'mg/dL') {
        totalChol = convertCholesterol(totalChol, 'mg/dL', 'mmol/L');
    }
    
    if (data.hdlUnit === 'mg/dL') {
        hdl = convertCholesterol(hdl, 'mg/dL', 'mmol/L');
    }
    
    // Calculate cholesterol ratio
    const cholRatio = totalChol / hdl;
    
    // Process smoking status
    let smokerScore;
    switch(data.smoker) {
        case 'non': smokerScore = 0; break;
        case 'ex': smokerScore = 1; break;
        case 'light': smokerScore = 2; break;
        case 'moderate': smokerScore = 3; break;
        case 'heavy': smokerScore = 4; break;
        default: smokerScore = 0;
    }
    
    // Process ethnicity risk factor
    let ethnicityFactor;
    switch(data.ethnicity) {
        case 'white': ethnicityFactor = 1.0; break;
        case 'indian': ethnicityFactor = 1.3; break;
        case 'pakistani': ethnicityFactor = 1.4; break;
        case 'bangladeshi': ethnicityFactor = 1.5; break;
        case 'other_asian': ethnicityFactor = 1.2; break;
        case 'black_caribbean': ethnicityFactor = 0.85; break;
        case 'black_african': ethnicityFactor = 0.75; break;
        case 'chinese': ethnicityFactor = 0.7; break;
        case 'other': ethnicityFactor = 0.95; break;
        default: ethnicityFactor = 1.0;
    }
    
    // Base risk based on age and sex
    let baseRisk;
    if (data.sex === 'male') {
        baseRisk = (data.age - 25) * 0.79;
    } else {
        baseRisk = (data.age - 25) * 0.53;
    }
    
    // Adjust for BMI
    let bmiAdjustment = 0;
    if (data.bmi) {
        if (data.bmi < 20) {
            bmiAdjustment = -0.5;
        } else if (data.bmi >= 25 && data.bmi < 30) {
            bmiAdjustment = 1.5;
        } else if (data.bmi >= 30) {
            bmiAdjustment = 2.5;
        }
    }
    
    // Adjust for systolic BP
    let sbpAdjustment = 0;
    if (data.sbp < 120) {
        sbpAdjustment = -0.5;
    } else if (data.sbp >= 140) {
        sbpAdjustment = 1.5 + (data.sbpSd ? data.sbpSd / 10 : 0);
    }
    
    // Adjust for cholesterol ratio
    let cholAdjustment = 0;
    if (cholRatio > 4) {
        cholAdjustment = (cholRatio - 4) * 0.5;
    }
    
    // Adjust for smoking
    let smokerAdjustment = smokerScore * 0.65;
    
    // Adjust for diabetes
    let diabetesAdjustment = 0;
    if (data.diabetes === 'type1') {
        diabetesAdjustment = 4.2;
    } else if (data.diabetes === 'type2') {
        diabetesAdjustment = 2.8;
    }
    
    // Adjust for family history
    let familyHistoryAdjustment = data.familyHistory ? 1.6 : 0;
    
    // Adjust for medical conditions
    let medicalAdjustment = 0;
    if (data.atrialFibrillation) medicalAdjustment += 2.0;
    if (data.rheumatoidArthritis) medicalAdjustment += 1.5;
    if (data.chronicKidneyDisease) medicalAdjustment += 1.8;
    
    // Calculate total risk percentage
    let riskPercentage = baseRisk + bmiAdjustment + sbpAdjustment + 
                        cholAdjustment + smokerAdjustment + 
                        diabetesAdjustment + familyHistoryAdjustment + 
                        medicalAdjustment;
                        
    // Apply ethnicity factor
    riskPercentage *= ethnicityFactor;
    
    // Ensure risk is within reasonable bounds
    riskPercentage = Math.max(0, Math.min(riskPercentage, 99));
    
    // Apply Lp(a) modifier if available
    let modifiedRiskPercentage = riskPercentage;
    let lpaModifier = 1.0;
    
    if (data.lpa !== null) {
        // Convert Lp(a) to mg/dL if needed
        let lpaValue = data.lpa;
        if (data.lpaUnit === 'nmol/L') {
            lpaValue = convertLpa(lpaValue, 'nmol/L', 'mg/dL');
        }
        
        // Calculate modifier based on Lp(a) level
        lpaModifier = calculateLpaModifier(lpaValue);
        modifiedRiskPercentage = riskPercentage * lpaModifier;
    }
    
    return {
        baseRisk: riskPercentage,
        lpaModifier: lpaModifier,
        modifiedRisk: modifiedRiskPercentage,
        riskCategory: getRiskCategory(modifiedRiskPercentage)
    };
}

/**
 * Calculate SBP standard deviation from multiple readings
 * @param {string} prefix - Prefix for input field IDs (frs or qrisk)
 */
function calculateSBPStandardDeviation(prefix) {
    // Get the readings
    const readings = [];
    for (let i = 1; i <= 6; i++) {
        const reading = parseFloat(document.getElementById(`${prefix}-sbp-reading-${i}`).value);
        if (!isNaN(reading)) {
            readings.push(reading);
        }
    }
    
    // Check if we have enough readings
    if (readings.length < 3) {
        showModal('Please enter at least 3 systolic blood pressure readings to calculate standard deviation.');
        return;
    }
    
    // Calculate mean
    const sum = readings.reduce((a, b) => a + b, 0);
    const mean = sum / readings.length;
    
    // Calculate sum of squared differences
    const squaredDifferencesSum = readings.reduce((sum, value) => {
        return sum + Math.pow(value - mean, 2);
    }, 0);
    
    // Calculate standard deviation
    const standardDeviation = Math.sqrt(squaredDifferencesSum / (readings.length - 1));
    
    // Display result and update input field
    document.getElementById(`${prefix}-sbp-sd-result`).style.display = 'block';
    document.getElementById(`${prefix}-sbp-sd-result`).textContent = 
        `Standard Deviation: ${standardDeviation.toFixed(1)} mmHg (from ${readings.length} readings)`;
    
    document.getElementById(`${prefix}-sbp-sd`).value = standardDeviation.toFixed(1);
}

/**
 * Calculates Framingham Risk Score and displays results
 */
function calculateFRS() {
    const result = validateFRSForm();
    
    if (!result.isValid) {
        displayErrors(result.errors);
        return;
    }
    
    const data = result.data;
    const results = calculateFraminghamRiskScore(data);
    
    // Get LDL value for treatment recommendations if available
    let ldlValue = null;
    if (data.ldl !== null) {
        ldlValue = data.ldl;
        if (data.ldlUnit === 'mg/dL') {
            ldlValue = convertCholesterol(ldlValue, 'mg/dL', 'mmol/L');
        }
    }
    
    // Get treatment recommendations
    const recommendations = getCCSRecommendation(
        results.modifiedRisk, 
        ldlValue, 
        data.diabetes, 
        data.age
    );
    
    displayFRSResults(data, results, recommendations);
    
    // Dispatch event with risk data for cross-tab sharing
    document.dispatchEvent(new CustomEvent('risk-calculated', {
        detail: {
            riskScore: results.modifiedRisk,
            calculator: 'FRS'
        }
    }));
    
    // Update the comparison tab status
    updateComparisonTabStatus('frs', true);
}

/**
 * Calculates QRISK3 score and displays results
 */
function calculateQRISK() {
    const result = validateQRISKForm();
    
    if (!result.isValid) {
        displayErrors(result.errors);
        return;
    }
    
    const data = result.data;
    const results = calculateQRISK3Score(data);
    
    // Get LDL value for treatment recommendations if available
    let ldlValue = null;
    if (data.ldl !== null) {
        ldlValue = data.ldl;
        if (data.ldlUnit === 'mg/dL') {
            ldlValue = convertCholesterol(ldlValue, 'mg/dL', 'mmol/L');
        }
    }
    
    // Get treatment recommendations
    const recommendations = getCCSRecommendation(
        results.modifiedRisk, 
        ldlValue, 
        data.diabetes !== 'none', 
        data.age
    );
    
    displayQRISKResults(data, results, recommendations);
    
    // Dispatch event with risk data for cross-tab sharing
    document.dispatchEvent(new CustomEvent('risk-calculated', {
        detail: {
            riskScore: results.modifiedRisk,
            calculator: 'QRISK3'
        }
    }));
    
    // Update the comparison tab status
    updateComparisonTabStatus('qrisk', true);
}

/**
 * Calculates both FRS and QRISK3 scores and displays results
 */
function calculateBoth() {
    // First check if both calculators have been filled in
    const frsStatus = document.getElementById('frs-status').textContent;
    const qriskStatus = document.getElementById('qrisk-status').textContent;
    
    if (frsStatus === 'Not completed' || qriskStatus === 'Not completed') {
        showModal('Please complete both the FRS and QRISK3 calculators before comparing results.');
        return;
    }
    
    const frsResult = validateFRSForm();
    const qriskResult = validateQRISKForm();
    
    const errors = [...frsResult.errors, ...qriskResult.errors];
    
    if (errors.length > 0) {
        displayErrors(errors);
        return;
    }
    
    const frsData = frsResult.data;
    const qriskData = qriskResult.data;
    
    // Calculate FRS
    const frsResults = calculateFraminghamRiskScore(frsData);
    
    // Calculate QRISK3
    const qriskResults = calculateQRISK3Score(qriskData);
    
    // Use the higher of the two risks for recommendations
    const highestRisk = Math.max(frsResults.modifiedRisk, qriskResults.modifiedRisk);
    
    // Get LDL value for treatment recommendations
    let ldlValue = null;
    if (frsData.ldl !== null) {
        ldlValue = frsData.ldl;
        if (frsData.ldlUnit === 'mg/dL') {
            ldlValue = convertCholesterol(ldlValue, 'mg/dL', 'mmol/L');
        }
    } else if (qriskData.ldl !== null) {
        ldlValue = qriskData.ldl;
        if (qriskData.ldlUnit === 'mg/dL') {
            ldlValue = convertCholesterol(ldlValue, 'mg/dL', 'mmol/L');
        }
    }
    
    // Get treatment recommendations based on highest risk
    const hasDiabetes = frsData.diabetes || qriskData.diabetes !== 'none';
    const recommendations = getCCSRecommendation(
        highestRisk, 
        ldlValue, 
        hasDiabetes, 
        frsData.age
    );
    
    displayComparisonResults(frsData, frsResults, qriskData, qriskResults, recommendations);
    
    // Dispatch event with highest risk data for cross-tab sharing
    document.dispatchEvent(new CustomEvent('risk-calculated', {
        detail: {
            riskScore: highestRisk,
            calculator: 'Combined'
        }
    }));
}

/**
 * Update the status display on the comparison tab
 * @param {string} calculator - 'frs' or 'qrisk'
 * @param {boolean} completed - Whether the calculator has been completed
 */
function updateComparisonTabStatus(calculator, completed) {
    const statusElement = document.getElementById(`${calculator}-status`);
    const iconElement = document.getElementById(`${calculator}-status-icon`);
    
    if (statusElement && iconElement) {
        if (completed) {
            statusElement.textContent = 'Completed';
            statusElement.classList.add('status-complete');
            
            // Update icon to checkmark
            iconElement.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="m9 12 2 2 4-4"></path></svg>';
            iconElement.classList.add('status-icon-complete');
        } else {
            statusElement.textContent = 'Not completed';
            statusElement.classList.remove('status-complete');
            
            // Update icon to X
            iconElement.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="m15 9-6 6"></path><path d="m9 9 6 6"></path></svg>';
            iconElement.classList.remove('status-icon-complete');
        }
    }
}

/**
 * Determine treatment recommendation based on CCS guidelines and risk score
 * @param {number} riskScore - 10-year CVD risk percentage
 * @param {number} ldl - LDL cholesterol value (if available)
 * @param {boolean} hasDiabetes - Whether patient has diabetes
 * @param {number} age - Patient age
 * @returns {string} - HTML-formatted treatment recommendation
 */
function getCCSRecommendation(riskScore, ldl = null, hasDiabetes = false, age = null) {
    // Determine if Lp(a) is elevated based on global variables or DOM elements
    let hasHighLpa = false;
    
    // Try to get Lp(a) value from FRS form
    const frsLpa = document.getElementById('frs-lpa');
    if (frsLpa && frsLpa.value) {
        let lpaValue = parseFloat(frsLpa.value);
        const lpaUnit = document.getElementById('frs-lpa-unit').value;
        
        if (lpaUnit === 'nmol/L') {
            lpaValue = convertLpa(lpaValue, 'nmol/L', 'mg/dL');
        }
        
        hasHighLpa = lpaValue >= 50; // 50 mg/dL threshold for "elevated"
    }
    
    // If not found in FRS form, try QRISK form
    if (!hasHighLpa) {
        const qriskLpa = document.getElementById('qrisk-lpa');
        if (qriskLpa && qriskLpa.value) {
            let lpaValue = parseFloat(qriskLpa.value);
            const lpaUnit = document.getElementById('qrisk-lpa-unit').value;
            
            if (lpaUnit === 'nmol/L') {
                lpaValue = convertLpa(lpaValue, 'nmol/L', 'mg/dL');
            }
            
            hasHighLpa = lpaValue >= 50; // 50 mg/dL threshold for "elevated"
        }
    }
    
    // Get enhanced recommendations that include rationales
    const recommendations = {
        statinChange: null,
        ezetimibeChange: null,
        pcsk9Change: null,
        otherChanges: [],
        nonPharmacological: [
            'Reinforce therapeutic lifestyle changes including Mediterranean or DASH diet',
            'Encourage regular physical activity (150+ minutes/week of moderate activity)',
            'Smoking cessation for all smokers'
        ]
    };
    
    // High risk (â‰¥20%)
    if (riskScore >= 20) {
        recommendations.statinChange = 'High-intensity statin therapy is strongly recommended';
        
        if (ldl !== null && ldl >= 1.8) {
            recommendations.ezetimibeChange = 'Add ezetimibe if LDL-C remains â‰¥1.8 mmol/L despite maximum statin';
            
            if (ldl >= 2.5) {
                recommendations.pcsk9Change = 'Consider PCSK9 inhibitor if LDL-C remains â‰¥2.5 mmol/L despite maximum tolerated statin plus ezetimibe';
            }
        }
        
        if (hasHighLpa) {
            recommendations.otherChanges.push('More aggressive LDL-C targets may be beneficial with elevated Lp(a)');
        }
    }
    // Intermediate risk (10-19.9%)
    else if (riskScore >= 10) {
        if (ldl !== null && ldl >= 3.5) {
            recommendations.statinChange = 'Statin therapy recommended as LDL-C â‰¥3.5 mmol/L';
        } else if (hasDiabetes && age >= 40) {
            recommendations.statinChange = 'Statin therapy recommended for diabetes patients â‰¥40 years';
        } else {
            recommendations.statinChange = 'Consider moderate to high-intensity statin therapy';
        }
        
        if (ldl !== null && ldl >= 2.0) {
            recommendations.ezetimibeChange = 'Consider adding ezetimibe if LDL-C remains â‰¥2.0 mmol/L despite statin';
        }
    }
    // Low risk (<10%)
    else {
        if (ldl !== null && ldl >= 5.0) {
            recommendations.statinChange = 'Consider statin therapy as LDL-C â‰¥5.0 mmol/L';
            recommendations.otherChanges.push('Consider referral for genetic testing for familial hypercholesterolemia');
        } else {
            recommendations.statinChange = 'Pharmacotherapy generally not recommended';
        }
    }
    
    const targets = {
        riskCategory: riskScore >= 20 ? 'High Risk' : (riskScore >= 10 ? 'Intermediate Risk' : 'Low Risk'),
        hasElevatedLpa: hasHighLpa
    };
    
    const assessment = {
        atLDLTarget: ldl !== null ? (ldl < (riskScore >= 20 ? 1.8 : 2.0)) : false,
        gapToLDLTarget: ldl !== null ? (ldl - (riskScore >= 20 ? 1.8 : 2.0)) : 0
    };
    
    // Return formatted recommendations
    return getFormattedRecommendations(recommendations, targets, assessment);
}

/**
 * Format recommendations with guideline citations and rationales
 * @param {Object} recommendations - Treatment recommendations
 * @param {Object} targets - Target levels
 * @param {Object} assessment - Current therapy assessment
 * @returns {string} - Formatted HTML for recommendations
 */
function getFormattedRecommendations(recommendations, targets, assessment) {
    let html = '';
    
    // Statin recommendations with guideline support
    if (recommendations.statinChange) {
        html += `<div class="recommendation-item">
            <p><strong>Statin Therapy:</strong> ${recommendations.statinChange}</p>
            <div class="guideline-rationale">
                <p><strong>Guideline Rationale:</strong> `;
        
        if (recommendations.statinChange.includes('high-intensity')) {
            html += `CCS Guidelines recommend high-intensity statin therapy for patients with LDL-C â‰¥3.5 mmol/L, 
                    established ASCVD, or high cardiovascular risk. High-intensity statin therapy is associated with 
                    â‰¥50% reduction in LDL-C <span class="evidence-quality high">High-Quality Evidence</span>`;
        } else if (recommendations.statinChange.includes('moderate-intensity')) {
            html += `CCS Guidelines recommend moderate-intensity statin therapy for intermediate risk patients 
                    to achieve 30-50% reduction in LDL-C <span class="evidence-quality moderate">Moderate-Quality Evidence</span>`;
        } else if (recommendations.statinChange.includes('not recommended')) {
            html += `CCS Guidelines recommend pharmacotherapy only for specific indications in low-risk patients, 
                    emphasizing lifestyle modifications as primary preventive strategy 
                    <span class="evidence-quality high">High-Quality Evidence</span>`;
        }
        
        html += `</p>
            </div>
        </div>`;
    }
    
    // Ezetimibe recommendations with guideline support
    if (recommendations.ezetimibeChange) {
        html += `<div class="recommendation-item">
            <p><strong>Ezetimibe:</strong> ${recommendations.ezetimibeChange}</p>
            <div class="guideline-rationale">
                <p><strong>Guideline Rationale:</strong> CCS Guidelines recommend adding ezetimibe for patients not at target 
                despite maximum tolerated statin therapy. Ezetimibe typically provides an additional 15-25% 
                reduction in LDL-C <span class="evidence-quality high">High-Quality Evidence</span>`;
                
        if (!assessment.atLDLTarget) {
            html += ` Current LDL-C of ${assessment.gapToLDLTarget.toFixed(2)} mmol/L above target.`;
        }
                
        html += `</p>
            </div>
        </div>`;
    }
    
    // PCSK9 inhibitor recommendations with guideline support
    if (recommendations.pcsk9Change) {
        html += `<div class="recommendation-item">
            <p><strong>PCSK9 Inhibitor:</strong> ${recommendations.pcsk9Change}</p>
            <div class="guideline-rationale">
                <p><strong>Guideline Rationale:</strong> CCS Guidelines recommend considering PCSK9 inhibitors for 
                patients with established ASCVD, FH, or high cardiovascular risk who have not achieved target LDL-C 
                despite maximum tolerated statin and ezetimibe therapy <span class="evidence-quality high">High-Quality Evidence</span>. 
                PCSK9 inhibitors typically reduce LDL-C by an additional 50-60%.`;
                
        if (targets.riskCategory.includes('High')) {
            html += ` For ${targets.riskCategory} patients, more aggressive LDL-C lowering provides additional 
                    benefit (CCS Guidelines 2021).`;
        }
                
        html += `</p>
            </div>
        </div>`;
    }
    
    // Additional recommendations
    if (recommendations.otherChanges.length > 0) {
        html += `<div class="recommendation-item">
            <p><strong>Additional Recommendations:</strong></p>
            <ul>
                ${recommendations.otherChanges.map(rec => `<li>${rec}</li>`).join('')}
            </ul>
            <div class="guideline-rationale">
                <p><strong>Guideline Rationale:</strong> `;
        
        if (recommendations.otherChanges.some(rec => rec.includes('Lp(a)'))) {
            html += `CCS Guidelines recognize elevated Lp(a) (â‰¥50 mg/dL or â‰¥100 nmol/L) as an independent risk 
                    factor warranting more aggressive LDL-C targets and family screening 
                    <span class="evidence-quality moderate">Moderate-Quality Evidence</span>. `;
        }
        
        if (recommendations.otherChanges.some(rec => rec.includes('genetic'))) {
            html += `LDL-C â‰¥5.0 mmol/L may indicate familial hypercholesterolemia, which requires specific 
                    management and family screening <span class="evidence-quality high">High-Quality Evidence</span>. `;
        }
        
        html += `</p>
            </div>
        </div>`;
    }
    
    // Non-pharmacological recommendations
    if (recommendations.nonPharmacological.length > 0) {
        html += `<div class="recommendation-item">
            <p><strong>Non-Pharmacological Therapy:</strong></p>
            <ul>
                ${recommendations.nonPharmacological.map(rec => `<li>${rec}</li>`).join('')}
            </ul>
            <div class="guideline-rationale">
                <p><strong>Guideline Rationale:</strong> CCS Guidelines emphasize that lifestyle modifications should 
                be prescribed in all patients, including nutritional counseling and regular physical activity, 
                independent of pharmacologic therapy <span class="evidence-quality high">High-Quality Evidence</span>.</p>
            </div>
        </div>`;
    }
    
    // Add final guideline reference
    html += `
        <div class="guideline-citation">
            <p><strong>References:</strong></p>
            <ol>
                <li>Pearson GJ, et al. 2021 Canadian Cardiovascular Society Guidelines for the Management of Dyslipidemia for the Prevention of Cardiovascular Disease in Adults. Can J Cardiol. 2021;37(8):1129-1150.</li>
                <li>Anderson TJ, et al. 2016 Canadian Cardiovascular Society Guidelines for the Management of Dyslipidemia for the Prevention of Cardiovascular Disease in the Adult. Can J Cardiol. 2016;32(11):1263-1282.</li>
            </ol>
        </div>
    `;
    
    return html;
}

/**
 * Display FRS results in the results section
 * @param {Object} data - Input data from the form
 * @param {Object} results - Calculation results
 * @param {string} recommendations - HTML-formatted treatment recommendations
 */
function displayFRSResults(data, results, recommendations) {
    const resultsContainer = document.getElementById('results-container');
    const resultsDiv = document.getElementById('risk-results');
    
    if (!resultsContainer || !resultsDiv) {
        console.error('Results container not found');
        return;
    }
    
    // Get result template
    const template = document.getElementById('single-risk-template');
    if (!template) {
        console.error('Result template not found');
        return;
    }
    
    // Clear previous results
    resultsDiv.innerHTML = '';
    
    // Clone template
    const resultCard = template.content.cloneNode(true);
    
    // Set title
    resultCard.querySelector('.risk-title').textContent = 'Framingham Risk Score Results';
    
    // Set risk values
    resultCard.querySelector('.risk-value').textContent = `${results.modifiedRisk.toFixed(1)}%`;
    resultCard.querySelector('.base-risk').textContent = `${results.baseRisk.toFixed(1)}%`;
    
    // Set Lp(a) modifier
    const modifierRow = resultCard.querySelector('.lpa-modifier-row');
    if (results.lpaModifier > 1.0) {
        resultCard.querySelector('.lpa-modifier').textContent = `${results.lpaModifier.toFixed(1)}x`;
    } else {
        modifierRow.style.display = 'none';
    }
    
    resultCard.querySelector('.adjusted-risk').textContent = `${results.modifiedRisk.toFixed(1)}%`;
    resultCard.querySelector('.risk-badge').textContent = results.riskCategory.charAt(0).toUpperCase() + results.riskCategory.slice(1);
    resultCard.querySelector('.risk-badge').classList.add(results.riskCategory);
    
    // Risk category in results
    resultCard.querySelector('.risk-category').textContent = 
        results.riskCategory.charAt(0).toUpperCase() + results.riskCategory.slice(1) + ' Risk';
    
    // Set interpretation
    resultCard.querySelector('.risk-interpretation').innerHTML = `
        <p>Based on the FRS calculator, this individual has a ${results.modifiedRisk.toFixed(1)}% risk of experiencing a cardiovascular event in the next 10 years, which is classified as <strong>${results.riskCategory} risk</strong>.</p>
        ${data.lpa ? `<p>The baseline risk of ${results.baseRisk.toFixed(1)}% has been modified by a factor of ${results.lpaModifier.toFixed(1)}x due to the Lp(a) level.</p>` : ''}
    `;
    
    // Add to results
    resultsDiv.appendChild(resultCard);
    
    // Show treatment recommendations
    document.getElementById('recommendations-content').innerHTML = recommendations;
    
    // Set date and show results container
    document.querySelector('#results-date span').textContent = new Date().toLocaleDateString();
    resultsContainer.style.display = 'block';
    
    // Scroll to results
    resultsContainer.scrollIntoView({ behavior: 'smooth' });
}

/**
 * Display QRISK3 results in the results section
 * @param {Object} data - Input data from the form
 * @param {Object} results - Calculation results
 * @param {string} recommendations - HTML-formatted treatment recommendations
 */
function displayQRISKResults(data, results, recommendations) {
    const resultsContainer = document.getElementById('results-container');
    const resultsDiv = document.getElementById('risk-results');
    
    if (!resultsContainer || !resultsDiv) {
        console.error('Results container not found');
        return;
    }
    
    // Get result template
    const template = document.getElementById('single-risk-template');
    if (!template) {
        console.error('Result template not found');
        return;
    }
    
    // Clear previous results
    resultsDiv.innerHTML = '';
    
    // Clone template
    const resultCard = template.content.cloneNode(true);
    
    // Set title
    resultCard.querySelector('.risk-title').textContent = 'QRISK3 Results';
    
    // Set risk values
    resultCard.querySelector('.risk-value').textContent = `${results.modifiedRisk.toFixed(1)}%`;
    resultCard.querySelector('.base-risk').textContent = `${results.baseRisk.toFixed(1)}%`;
    
    // Set Lp(a) modifier
    const modifierRow = resultCard.querySelector('.lpa-modifier-row');
    if (results.lpaModifier > 1.0) {
        resultCard.querySelector('.lpa-modifier').textContent = `${results.lpaModifier.toFixed(1)}x`;
    } else {
        modifierRow.style.display = 'none';
    }
    
    resultCard.querySelector('.adjusted-risk').textContent = `${results.modifiedRisk.toFixed(1)}%`;
    resultCard.querySelector('.risk-badge').textContent = results.riskCategory.charAt(0).toUpperCase() + results.riskCategory.slice(1);
    resultCard.querySelector('.risk-badge').classList.add(results.riskCategory);
    
    // Risk category in results
    resultCard.querySelector('.risk-category').textContent = 
        results.riskCategory.charAt(0).toUpperCase() + results.riskCategory.slice(1) + ' Risk';
    
    // Additional factors considered by QRISK3
    let additionalFactors = [];
    if (data.familyHistory) additionalFactors.push('Family history of CVD');
    if (data.ethnicityFactor !== 1.0) additionalFactors.push('Ethnicity factors');
    if (data.atrialFibrillation) additionalFactors.push('Atrial fibrillation');
    if (data.rheumatoidArthritis) additionalFactors.push('Rheumatoid arthritis');
    if (data.chronicKidneyDisease) additionalFactors.push('Chronic kidney disease');
    
    // Set interpretation
    resultCard.querySelector('.risk-interpretation').innerHTML = `
        <p>Based on the QRISK3 calculator, this individual has a ${results.modifiedRisk.toFixed(1)}% risk of experiencing a cardiovascular event in the next 10 years, which is classified as <strong>${results.riskCategory} risk</strong>.</p>
        ${data.lpa ? `<p>The baseline risk of ${results.baseRisk.toFixed(1)}% has been modified by a factor of ${results.lpaModifier.toFixed(1)}x due to the Lp(a) level.</p>` : ''}
        ${additionalFactors.length > 0 ? `<p>Additional factors considered in QRISK3: ${additionalFactors.join(', ')}.</p>` : ''}
    `;
    
    // Add to results
    resultsDiv.appendChild(resultCard);
    
    // Show treatment recommendations
    document.getElementById('recommendations-content').innerHTML = recommendations;
    
    // Set date and show results container
    document.querySelector('#results-date span').textContent = new Date().toLocaleDateString();
    resultsContainer.style.display = 'block';
    
    // Scroll to results
    resultsContainer.scrollIntoView({ behavior: 'smooth' });
}

/**
 * Display comparison results in the results section
 * @param {Object} frsData - FRS input data
 * @param {Object} frsResults - FRS calculation results
 * @param {Object} qriskData - QRISK input data
 * @param {Object} qriskResults - QRISK calculation results
 * @param {string} recommendations - HTML-formatted treatment recommendations
 */
function displayComparisonResults(frsData, frsResults, qriskData, qriskResults, recommendations) {
    const resultsContainer = document.getElementById('results-container');
    const resultsDiv = document.getElementById('risk-results');
    
    if (!resultsContainer || !resultsDiv) {
        console.error('Results container not found');
        return;
    }
    
    // Get comparison template
    const template = document.getElementById('comparison-risk-template');
    if (!template) {
        console.error('Comparison template not found');
        return;
    }
    
    // Clear previous results
    resultsDiv.innerHTML = '';
    
    // Clone template
    const resultCard = template.content.cloneNode(true);
    
    // Fill in comparison table
    document.getElementById('compare-frs-base').textContent = `${frsResults.baseRisk.toFixed(1)}%`;
    document.getElementById('compare-qrisk-base').textContent = `${qriskResults.baseRisk.toFixed(1)}%`;
    
    document.getElementById('compare-frs-lpa').textContent = `${frsResults.lpaModifier.toFixed(1)}x`;
    document.getElementById('compare-qrisk-lpa').textContent = `${qriskResults.lpaModifier.toFixed(1)}x`;
    
    document.getElementById('compare-frs-adjusted').textContent = `${frsResults.modifiedRisk.toFixed(1)}%`;
    document.getElementById('compare-qrisk-adjusted').textContent = `${qriskResults.modifiedRisk.toFixed(1)}%`;
    
    document.getElementById('compare-frs-category').textContent = frsResults.riskCategory.charAt(0).toUpperCase() + frsResults.riskCategory.slice(1);
    document.getElementById('compare-qrisk-category').textContent = qriskResults.riskCategory.charAt(0).toUpperCase() + qriskResults.riskCategory.slice(1);
    
    // Create comparison chart
    createComparisonChart(frsResults, qriskResults);
    
    // Set clinical interpretation
    const difference = Math.abs(frsResults.modifiedRisk - qriskResults.modifiedRisk);
    const percentDifference = (difference / ((frsResults.modifiedRisk + qriskResults.modifiedRisk) / 2)) * 100;
    
    let interpretationText = '';
    if (percentDifference < 10) {
        interpretationText = `The Framingham Risk Score and QRISK3 provide similar risk estimates (${frsResults.modifiedRisk.toFixed(1)}% vs ${qriskResults.modifiedRisk.toFixed(1)}%), suggesting a consistent risk assessment.`;
    } else if (percentDifference < 30) {
        interpretationText = `There is a moderate difference between the Framingham Risk Score (${frsResults.modifiedRisk.toFixed(1)}%) and QRISK3 (${qriskResults.modifiedRisk.toFixed(1)}%). This may be due to the additional factors considered in QRISK3 or differences in the underlying populations used to develop these scores.`;
    } else {
        interpretationText = `There is a substantial difference between the Framingham Risk Score (${frsResults.modifiedRisk.toFixed(1)}%) and QRISK3 (${qriskResults.modifiedRisk.toFixed(1)}%). This significant variation suggests that the additional factors considered in QRISK3 (such as ethnicity, family history, or medical conditions) may have a major impact on this individual's risk assessment.`;
    }
    
    // Add which score is higher
    if (frsResults.modifiedRisk > qriskResults.modifiedRisk) {
        interpretationText += ` The Framingham Risk Score gives a higher risk estimate, which may be more conservative for treatment decisions.`;
    } else if (qriskResults.modifiedRisk > frsResults.modifiedRisk) {
        interpretationText += ` QRISK3 gives a higher risk estimate, which may account for additional risk factors not captured in the Framingham score.`;
    }
    
    // Add treatment considerations
    interpretationText += ` Based on the higher risk score of ${Math.max(frsResults.modifiedRisk, qriskResults.modifiedRisk).toFixed(1)}%, this patient falls into the ${Math.max(frsResults.modifiedRisk, qriskResults.modifiedRisk) >= 20 ? 'high' : (Math.max(frsResults.modifiedRisk, qriskResults.modifiedRisk) >= 10 ? 'intermediate' : 'low')} risk category for treatment considerations.`;
    
    document.getElementById('comparison-interpretation').textContent = interpretationText;
    
    // Add result card to results div
    resultsDiv.appendChild(resultCard);
    
    // Show treatment recommendations
    document.getElementById('recommendations-content').innerHTML = recommendations;
    
    // Set date and show results container
    document.querySelector('#results-date span').textContent = new Date().toLocaleDateString();
    resultsContainer.style.display = 'block';
    
    // Scroll to results
    resultsContainer.scrollIntoView({ behavior: 'smooth' });
}

/**
 * Create comparison chart for FRS and QRISK3 results
 * @param {Object} frsResults - FRS calculation results
 * @param {Object} qriskResults - QRISK3 calculation results
 */
function createComparisonChart(frsResults, qriskResults) {
    // Simple bar chart using div elements
    const chartContainer = document.getElementById('comparison-chart-container');
    if (!chartContainer) return;
    
    // Clear previous chart
    chartContainer.innerHTML = '';
    
    // Create chart HTML
    chartContainer.innerHTML = `
        <div class="comparison-bars">
            <div class="chart-bar-container">
                <div class="chart-label">Framingham</div>
                <div class="chart-bar-wrapper">
                    <div class="chart-bar frs-bar" style="height: ${Math.min(frsResults.modifiedRisk * 2, 100)}%;">
                        <span class="chart-value">${frsResults.modifiedRisk.toFixed(1)}%</span>
                    </div>
                </div>
            </div>
            <div class="chart-bar-container">
                <div class="chart-label">QRISK3</div>
                <div class="chart-bar-wrapper">
                    <div class="chart-bar qrisk-bar" style="height: ${Math.min(qriskResults.modifiedRisk * 2, 100)}%;">
                        <span class="chart-value">${qriskResults.modifiedRisk.toFixed(1)}%</span>
                    </div>
                </div>
            </div>
        </div>
        <div class="chart-axis">
            <div class="axis-label">0%</div>
            <div class="axis-line"></div>
            <div class="axis-marker" style="bottom: 20%;">10%</div>
            <div class="axis-marker" style="bottom: 40%;">20%</div>
            <div class="axis-marker" style="bottom: 60%;">30%</div>
            <div class="axis-marker" style="bottom: 80%;">40%</div>
            <div class="axis-marker" style="bottom: 100%;">50%+</div>
        </div>
    `;
}

/**
 * Export results to CSV or PDF
 * @param {string} format - 'csv' or 'pdf'
 */
function exportResults(format) {
    const resultsContainer = document.getElementById('results-container');
    if (!resultsContainer || resultsContainer.style.display === 'none') {
        showModal('No results to export. Please calculate risk scores first.');
        return;
    }
    
    if (format === 'csv') {
        exportToCSV();
    } else if (format === 'pdf') {
        showPdfPreview();
    }
}

/**
 * Export results to CSV file
 */
function exportToCSV() {
    // Get data from results
    const riskTitle = document.querySelector('.risk-title')?.textContent || 'CVD Risk Assessment';
    const baseRisk = document.querySelector('.base-risk')?.textContent || 'N/A';
    const lpaModifier = document.querySelector('.lpa-modifier')?.textContent || 'N/A';
    const adjustedRisk = document.querySelector('.adjusted-risk')?.textContent || 'N/A';
    const riskCategory = document.querySelector('.risk-category')?.textContent || 'N/A';
    const date = document.querySelector('#results-date span')?.textContent || new Date().toLocaleDateString();
    
    // Create CSV content
    let csvContent = 'data:text/csv;charset=utf-8,';
    csvContent += 'CVD Risk Assessment Results,\r\n';
    csvContent += 'Date,' + date + '\r\n\r\n';
    csvContent += 'Assessment Type,' + riskTitle + '\r\n';
    csvContent += 'Base Risk,' + baseRisk + '\r\n';
    csvContent += 'Lp(a) Modifier,' + lpaModifier + '\r\n';
    csvContent += 'Adjusted Risk,' + adjustedRisk + '\r\n';
    csvContent += 'Risk Category,' + riskCategory + '\r\n\r\n';
    
    // Add recommendations (cleaned of HTML)
    const recommendations = document.getElementById('recommendations-content');
    if (recommendations) {
        const recItems = recommendations.querySelectorAll('.recommendation-item');
        if (recItems.length > 0) {
            csvContent += 'Treatment Recommendations,\r\n';
            
            recItems.forEach(item => {
                const title = item.querySelector('strong')?.textContent || '';
                const content = item.textContent.replace(title, '').trim();
                csvContent += title + ',' + content.replace(/,/g, ';') + '\r\n';
            });
        }
    }
    
    // Create download link
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement('a');
    link.setAttribute('href', encodedUri);
    link.setAttribute('download', 'cvd_risk_assessment_' + new Date().toISOString().slice(0, 10) + '.csv');
    document.body.appendChild(link);
    
    // Trigger download
    link.click();
    document.body.removeChild(link);
}

/**
 * Show PDF preview before export
 */
function showPdfPreview() {
    const previewModal = document.getElementById('pdf-preview-modal');
    const previewContent = document.getElementById('pdf-preview-content');
    
    if (!previewModal || !previewContent) {
        showModal('PDF preview functionality is not available. Please try again later.');
        return;
    }
    
    // Clone the results section for preview
    const resultsContainer = document.getElementById('results-container');
    previewContent.innerHTML = '';
    previewContent.appendChild(resultsContainer.cloneNode(true));
    
    // Add preview styling
    previewContent.querySelector('.export-section').style.display = 'none';
    
    // Show the preview modal
    previewModal.style.display = 'block';
    
    // Setup download button
    document.getElementById('download-pdf-btn').addEventListener('click', function() {
        // In a real implementation, this would use a library like jsPDF or html2pdf
        // For this demo, we'll just show a message
        showModal('PDF generation would be implemented here with a library like jsPDF or html2pdf.');
        previewModal.style.display = 'none';
    });
}
/**
 * Medication management functionality for CVD Risk Toolkit
 */

/**
 * Calculate non-HDL cholesterol from total cholesterol and HDL
 */
function calculateNonHDL() {
    const totalCholInput = document.getElementById('med-total-chol');
    const hdlInput = document.getElementById('med-hdl');
    const nonHDLInput = document.getElementById('med-non-hdl');
    const nonHDLUnitSpan = document.getElementById('med-non-hdl-unit');
    
    if (totalCholInput && hdlInput && nonHDLInput && nonHDLInput.disabled) {
        const totalCholUnit = document.getElementById('med-total-chol-unit').value;
        const hdlUnit = document.getElementById('med-hdl-unit').value;
        
        let totalChol = parseFloat(totalCholInput.value);
        let hdl = parseFloat(hdlInput.value);
        
        if (!isNaN(totalChol) && !isNaN(hdl)) {
            // Convert units if needed
            if (totalCholUnit === 'mg/dL') {
                totalChol = convertCholesterol(totalChol, 'mg/dL', 'mmol/L');
            }
            if (hdlUnit === 'mg/dL') {
                hdl = convertCholesterol(hdl, 'mg/dL', 'mmol/L');
            }
            
            // Calculate non-HDL
            const nonHDL = totalChol - hdl;
            nonHDLInput.value = nonHDL.toFixed(2);
            nonHDLUnitSpan.textContent = 'mmol/L';
        }
    }
}

/**
 * Main function to evaluate medications and generate recommendations
 */
function evaluateMedications() {
    const result = validateMedicationForm();
    
    if (!result.isValid) {
        displayErrors(result.errors);
        return;
    }
    
    const data = result.data;
    
    // Standardize units for assessment
    const standardizedData = standardizeUnits(data);
    
    // Determine target LDL and non-HDL levels based on risk category
    const targetLevels = determineTargetLevels(standardizedData);
    
    // Assess current therapy and determine gaps
    const assessment = assessCurrentTherapy(standardizedData, targetLevels);
    
    // Generate recommendations
    const recommendations = generateRecommendations(standardizedData, assessment, targetLevels);
    
    // Check PCSK9 inhibitor eligibility for PharmaCare
    const pcsk9Coverage = assessPCSK9Coverage(standardizedData, assessment);
    
    // Display results
    displayMedicationResults(standardizedData, assessment, targetLevels, recommendations, pcsk9Coverage);
}

/**
 * Standardize units for all measurements to mmol/L
 * @param {Object} data - Raw form data
 * @returns {Object} - Data with standardized units
 */
function standardizeUnits(data) {
    const standardized = { ...data };
    
    // Convert cholesterol values to mmol/L if needed
    const cholesterolFields = ['total-chol', 'ldl', 'hdl', 'non-hdl'];
    cholesterolFields.forEach(field => {
        if (data[field] !== null && data[field] !== undefined) {
            if (data[field + '-unit'] === 'mg/dL') {
                standardized[field] = convertCholesterol(data[field], 'mg/dL', 'mmol/L');
                standardized[field + '-unit'] = 'mmol/L';
            }
        }
    });
    
    // Convert triglycerides to mmol/L if needed
    if (data['trig'] !== null && data['trig'] !== undefined) {
        if (data['trig-unit'] === 'mg/dL') {
            standardized['trig'] = data['trig'] / 88.5; // Conversion factor for triglycerides
            standardized['trig-unit'] = 'mmol/L';
        }
    }
    
    // Convert ApoB to g/L if needed
    if (data['apob'] !== null && data['apob'] !== undefined) {
        if (data['apob-unit'] === 'mg/dL') {
            standardized['apob'] = data['apob'] / 100; // Conversion factor for ApoB
            standardized['apob-unit'] = 'g/L';
        }
    }
    
    // Convert Lp(a) to mg/dL if needed
    if (data['lpa'] !== null && data['lpa'] !== undefined) {
        if (data['lpa-unit'] === 'nmol/L') {
            standardized['lpa'] = convertLpa(data['lpa'], 'nmol/L', 'mg/dL');
            standardized['lpa-unit'] = 'mg/dL';
        }
    }
    
    return standardized;
}

/**
 * Determine target LDL and non-HDL levels based on risk category
 * @param {Object} data - Standardized patient data
 * @returns {Object} - Target levels
 */
function determineTargetLevels(data) {
    const targets = {};
    
    // Determine targets based on clinical guidelines
    if (data.preventionCategory === 'secondary') {
        // Secondary prevention targets
        targets.ldl = { value: 1.8, unit: 'mmol/L' };
        targets.nonHDL = { value: 2.6, unit: 'mmol/L' };
        targets.apoB = { value: 0.8, unit: 'g/L' };
        targets.percentReduction = 50;
        targets.riskCategory = 'Very High Risk';
        
        // Even lower targets for recent ACS or multiple events
        if (data.secondaryDetails === 'mi' || data.secondaryDetails === 'multi') {
            targets.ldl = { value: 1.4, unit: 'mmol/L' };
            targets.nonHDL = { value: 2.2, unit: 'mmol/L' };
            targets.apoB = { value: 0.65, unit: 'g/L' };
            targets.percentReduction = 50;
            targets.riskCategory = 'Extreme Risk';
        }
    } else {
        // Primary prevention - check if risk scores are available
        let highestRisk = 0;
        
        // Try to get risk from session storage (cross-tab sharing)
        const storedRisk = sessionStorage.getItem('last-risk-score');
        if (storedRisk !== null) {
            highestRisk = parseFloat(storedRisk);
        } else {
            // Try to extract risk score from results if available
            const riskContainer = document.getElementById('risk-results');
            if (riskContainer) {
                const riskValueElements = riskContainer.querySelectorAll('.risk-value');
                riskValueElements.forEach(element => {
                    const riskText = element.textContent;
                    const riskMatch = riskText.match(/(\d+\.\d+)%/);
                    if (riskMatch) {
                        const riskValue = parseFloat(riskMatch[1]);
                        highestRisk = Math.max(highestRisk, riskValue);
                    }
                });
            }
        }
        
        // Set targets based on risk score
        if (highestRisk >= 20) {
            // High risk primary prevention
            targets.ldl = { value: 2.0, unit: 'mmol/L' };
            targets.nonHDL = { value: 2.6, unit: 'mmol/L' };
            targets.apoB = { value: 0.8, unit: 'g/L' };
            targets.percentReduction = 50;
            targets.riskCategory = 'High Risk';
        } else if (highestRisk >= 10) {
            // Intermediate risk primary prevention
            targets.ldl = { value: 2.0, unit: 'mmol/L' };
            targets.nonHDL = { value: 2.6, unit: 'mmol/L' };
            targets.apoB = { value: 0.8, unit: 'g/L' };
            targets.percentReduction = 30;
            targets.riskCategory = 'Intermediate Risk';
        } else {
            // Low risk primary prevention
            targets.ldl = { value: 3.5, unit: 'mmol/L' }; // Medication threshold for low risk
            targets.nonHDL = { value: 4.2, unit: 'mmol/L' };
            targets.apoB = { value: 1.0, unit: 'g/L' };
            targets.percentReduction = 30;
            targets.riskCategory = 'Low Risk';
        }
    }
    
    // Elevated Lp(a) may warrant more aggressive targets
    if (data.lpa !== undefined && data.lpa !== null && data.lpa >= 50) {
        targets.lpaAdjustedLDL = { value: Math.max(targets.ldl.value - 0.3, 1.4), unit: 'mmol/L' };
        targets.hasElevatedLpa = true;
    } else {
        targets.hasElevatedLpa = false;
    }
    
    return targets;
}
/**
 * Assess current therapy and determine gaps
 * @param {Object} data - Standardized patient data
 * @param {Object} targets - Target levels
 * @returns {Object} - Assessment results
 */
function assessCurrentTherapy(data, targets) {
    const assessment = {
        currentTherapyIntensity: 'None',
        atLDLTarget: false,
        atNonHDLTarget: false,
        atApoBTarget: false,
        gapToLDLTarget: 0,
        gapToNonHDLTarget: 0,
        estimatedAdditionalLDLReduction: 0,
        canIntensifyStatin: false,
        maxStatinReached: false,
        statinIntolerance: false,
        onEzetimibe: data.ezetimibe,
        onPCSK9: data.pcsk9,
        onMaximumTherapy: false,
        hypertriglyceridemia: false,
        mixedDyslipidemia: false
    };
    
    // Assess current therapy intensity
    if (data.statin !== 'none') {
        assessment.currentTherapyIntensity = data['statin-intensity'] || 'Unknown';
        
        // Check if maximum statin dose reached
        if (data['statin-intensity'] === 'high') {
            const maxDoses = {
                atorvastatin: '80',
                rosuvastatin: '40',
                simvastatin: '40',
                pravastatin: '80',
                lovastatin: '40',
                fluvastatin: '80',
                pitavastatin: '4'
            };
            
            assessment.maxStatinReached = data['statin-dose'] === maxDoses[data.statin];
        }
        
        // Determine if statin can be intensified
        if (data['statin-intensity'] === 'low' || data['statin-intensity'] === 'moderate') {
            assessment.canIntensifyStatin = true;
        }
    }
    
    // Check statin intolerance
    assessment.statinIntolerance = data['statin-intolerance'] !== 'no';
    
    // Check if on maximum therapy
    assessment.onMaximumTherapy = (
        (assessment.maxStatinReached || (assessment.statinIntolerance && data['statin-intolerance'] === 'complete')) &&
        assessment.onEzetimibe
    );
    
    // Evaluate lipid targets
    if (data.ldl !== undefined && data.ldl !== null) {
        assessment.atLDLTarget = data.ldl <= targets.ldl.value;
        assessment.gapToLDLTarget = data.ldl - targets.ldl.value;
    }
    
    if (data['non-hdl'] !== undefined && data['non-hdl'] !== null) {
        assessment.atNonHDLTarget = data['non-hdl'] <= targets.nonHDL.value;
        assessment.gapToNonHDLTarget = data['non-hdl'] - targets.nonHDL.value;
    }
    
    if (data.apob !== undefined && data.apob !== null) {
        assessment.atApoBTarget = data.apob <= targets.apoB.value;
    }
    
    // Check for hypertriglyceridemia
    if (data.trig !== undefined && data.trig !== null) {
        assessment.hypertriglyceridemia = data.trig > 2.0;
        assessment.severeTriglycerides = data.trig > 5.0;
    }
    
    // Check for mixed dyslipidemia
    if (data.ldl !== undefined && data.trig !== undefined && data.hdl !== undefined) {
        assessment.mixedDyslipidemia = data.ldl > targets.ldl.value && data.trig > 2.0 && data.hdl < 1.0;
    }
    
    // Estimate additional LDL reduction needed if not at target
    if (!assessment.atLDLTarget && assessment.gapToLDLTarget > 0) {
        assessment.estimatedAdditionalLDLReduction = (assessment.gapToLDLTarget / data.ldl) * 100;
    }
    
    return assessment;
}

/**
 * Generate medication recommendations based on assessment
 * @param {Object} data - Standardized patient data
 * @param {Object} assessment - Current therapy assessment
 * @param {Object} targets - Target levels
 * @returns {Object} - Recommendation details
 */
function generateRecommendations(data, assessment, targets) {
    const recommendations = {
        summary: [],
        statinChange: null,
        statinRationale: null,
        ezetimibeChange: null,
        ezetimibeRationale: null,
        pcsk9Change: null,
        pcsk9Rationale: null,
        otherTherapies: [],
        nonPharmacological: [
            'Therapeutic lifestyle changes (Mediterranean or DASH diet)',
            'Regular physical activity (150+ minutes/week of moderate activity)',
            'Smoking cessation for all smokers',
            'Weight management targeting BMI <25 kg/mÂ²'
        ]
    };
    
    // Assign risk category
    const riskCategory = targets.riskCategory;
    
    // Determine statin recommendations
    if (data.statin === 'none' && !assessment.statinIntolerance) {
        // No current statin and no intolerance
        if (riskCategory === 'High Risk' || riskCategory === 'Very High Risk' || riskCategory === 'Extreme Risk') {
            recommendations.statinChange = 'Initiate high-intensity statin therapy';
            recommendations.statinRationale = 'High-intensity statin therapy is recommended for high-risk patients to achieve â‰¥50% LDL-C reduction';
            recommendations.summary.push('Start high-intensity statin (atorvastatin 40-80 mg or rosuvastatin 20-40 mg)');
        } else if (riskCategory === 'Intermediate Risk') {
            recommendations.statinChange = 'Initiate moderate-intensity statin therapy';
            recommendations.statinRationale = 'Moderate-intensity statin therapy is recommended for intermediate-risk patients to achieve 30-50% LDL-C reduction';
            recommendations.summary.push('Start moderate-intensity statin (atorvastatin 10-20 mg, rosuvastatin 5-10 mg, or equivalent)');
        } else if (data.ldl >= 5.0) {
            recommendations.statinChange = 'Consider statin therapy despite low risk due to very high LDL-C';
            recommendations.statinRationale = 'LDL-C â‰¥5.0 mmol/L may indicate familial hypercholesterolemia and warrants consideration of statin therapy regardless of risk category';
            recommendations.summary.push('Consider statin therapy due to very high LDL-C');
        } else {
            recommendations.statinChange = 'Statin therapy not routinely recommended for low-risk patients';
            recommendations.statinRationale = 'For low-risk patients, lifestyle modification is the primary intervention';
            recommendations.summary.push('Focus on lifestyle modifications');
        }
    } else if (data.statin !== 'none' && assessment.canIntensifyStatin && !assessment.atLDLTarget && !assessment.statinIntolerance) {
        // On non-maximum statin, not at target, and no intolerance
        recommendations.statinChange = 'Intensify current statin therapy';
        recommendations.statinRationale = 'Intensifying statin therapy can provide additional LDL-C reduction to help reach target';
        recommendations.summary.push(`Increase ${data.statin} dose to achieve greater LDL-C reduction`);
    } else if (assessment.statinIntolerance && data['statin-intolerance'] === 'complete') {
        // Complete statin intolerance
        recommendations.statinChange = 'Statin therapy not feasible due to documented intolerance';
        recommendations.statinRationale = 'Alternative lipid-lowering strategies are required for patients with complete statin intolerance';
        recommendations.summary.push('Statin-independent therapy required due to documented statin intolerance');
    } else if (assessment.statinIntolerance && data['statin-intolerance'] === 'partial') {
        // Partial statin intolerance
        recommendations.statinChange = 'Continue maximum tolerated statin dose';
        recommendations.statinRationale = 'Maintain the highest tolerated statin dose to achieve as much LDL-C reduction as possible';
        recommendations.summary.push('Maintain current tolerated statin dose');
    } else if (assessment.atLDLTarget) {
        // At LDL target
        recommendations.statinChange = 'Continue current statin therapy';
        recommendations.statinRationale = 'Current therapy is effectively reaching the target LDL-C level';
        recommendations.summary.push('Continue current statin therapy');
    } else {
        // On maximum statin, not at target
        recommendations.statinChange = 'Continue maximum statin therapy';
        recommendations.statinRationale = 'Maximum statin therapy should be maintained while considering add-on therapies';
        recommendations.summary.push('Continue maximum statin therapy');
    }
    
    // Determine ezetimibe recommendations
    if (!assessment.onEzetimibe && !assessment.atLDLTarget && 
        (data.statin !== 'none' || assessment.statinIntolerance)) {
        // Not on ezetimibe, not at target, and either on statin or statin intolerant
        recommendations.ezetimibeChange = 'Add ezetimibe therapy';
        recommendations.ezetimibeRationale = 'Ezetimibe can provide an additional 15-25% LDL-C reduction';
        recommendations.summary.push('Add ezetimibe 10 mg daily');
    } else if (assessment.onEzetimibe && assessment.atLDLTarget) {
        // On ezetimibe and at target
        recommendations.ezetimibeChange = 'Continue ezetimibe therapy';
        recommendations.ezetimibeRationale = 'Current combination therapy is effectively reaching the target LDL-C level';
    } else if (assessment.onEzetimibe && !assessment.atLDLTarget) {
        // On ezetimibe, not at target
        recommendations.ezetimibeChange = 'Continue ezetimibe therapy';
        recommendations.ezetimibeRationale = 'Ezetimibe should be continued while considering additional lipid-lowering options';
    }

    // Determine PCSK9 inhibitor recommendations
    const highRiskCategories = ['High Risk', 'Very High Risk', 'Extreme Risk'];
    if (!assessment.onPCSK9 && !assessment.atLDLTarget && 
        assessment.onEzetimibe && (data.statin !== 'none' || assessment.statinIntolerance) &&
        highRiskCategories.includes(riskCategory)) {
        // Not on PCSK9, not at target, on ezetimibe, and either on statin or statin intolerant
        if (data.preventionCategory === 'secondary' && data.ldl >= 2.5) {
            recommendations.pcsk9Change = 'Consider PCSK9 inhibitor therapy';
            recommendations.pcsk9Rationale = 'PCSK9 inhibitors can provide an additional 50-60% LDL-C reduction in patients with established ASCVD not at target despite maximum tolerated statin plus ezetimibe';
            recommendations.summary.push('Consider PCSK9 inhibitor for secondary prevention');
        } else if (data.preventionCategory === 'primary' && data.ldl >= 3.5) {
            recommendations.pcsk9Change = 'Consider PCSK9 inhibitor therapy if familial hypercholesterolemia is confirmed';
            recommendations.pcsk9Rationale = 'PCSK9 inhibitors may be considered for primary prevention in patients with confirmed FH and LDL-C â‰¥3.5 mmol/L despite maximum tolerated statin plus ezetimibe';
            recommendations.summary.push('Consider PCSK9 inhibitor if FH is confirmed');
        }
    } else if (assessment.onPCSK9) {
        // Already on PCSK9 inhibitor
        recommendations.pcsk9Change = 'Continue PCSK9 inhibitor therapy';
        recommendations.pcsk9Rationale = 'Continue current therapy and reassess lipid levels at next follow-up';
    }
    
    // Recommendations for hypertriglyceridemia
    if (assessment.severeTriglycerides) {
        recommendations.otherTherapies.push({
            therapy: 'Consider fibrate therapy',
            rationale: 'Severe hypertriglyceridemia (>5.0 mmol/L) increases risk of pancreatitis and may benefit from fibrate therapy',
            intensityClass: 'warning'
        });
        recommendations.summary.push('Fibrate therapy for severe hypertriglyceridemia');
    } else if (assessment.hypertriglyceridemia && assessment.mixedDyslipidemia) {
        recommendations.otherTherapies.push({
            therapy: 'Consider fenofibrate as add-on therapy',
            rationale: 'Mixed dyslipidemia with elevated triglycerides and low HDL-C may benefit from add-on fenofibrate therapy after statin optimization',
            intensityClass: 'info'
        });
    }
    
    // Additional recommendations for elevated Lp(a)
    if (targets.hasElevatedLpa) {
        recommendations.otherTherapies.push({
            therapy: 'More aggressive LDL-C targets recommended',
            rationale: 'Elevated Lp(a) is an independent risk factor that warrants more aggressive LDL-C reduction',
            intensityClass: 'warning'
        });
        recommendations.summary.push('More aggressive LDL-C targets due to elevated Lp(a)');
        
        recommendations.otherTherapies.push({
            therapy: 'Consider family screening for Lp(a)',
            rationale: 'Elevated Lp(a) is largely genetically determined and first-degree relatives should be screened',
            intensityClass: 'info'
        });
    }
    
    return recommendations;
}

/**
 * Assess PCSK9 inhibitor coverage eligibility
 * @param {Object} data - Standardized patient data
 * @param {Object} assessment - Current therapy assessment
 * @returns {Object} - Coverage assessment
 */
function assessPCSK9Coverage(data, assessment) {
    const coverage = {
        eligible: false,
        criteria: [],
        notMet: [],
        notes: []
    };
    
    // Check if already on PCSK9
    if (data.pcsk9) {
        coverage.notes.push('Patient is currently on PCSK9 inhibitor therapy');
    }
    
    // Check for secondary prevention
    if (data.preventionCategory === 'secondary') {
        coverage.criteria.push('Secondary prevention');
        
        // Check LDL criterion
        if (data.ldl >= 2.0) {
            coverage.criteria.push('LDL-C â‰¥2.0 mmol/L');
        } else {
            coverage.notMet.push('LDL-C must be â‰¥2.0 mmol/L for secondary prevention coverage');
        }
        
        // Check for recent event
        if (data.secondaryDetails === 'mi') {
            coverage.criteria.push('Recent MI/ACS (higher priority for coverage)');
        }
        
        // Check for multi-vessel disease
        if (data.secondaryDetails === 'multi') {
            coverage.criteria.push('Multi-vessel disease (higher priority for coverage)');
        }
    } 
    // Check for primary prevention with very high LDL
    else if (data.preventionCategory === 'primary' && data.ldl >= 3.5) {
        coverage.criteria.push('Primary prevention with very high LDL-C');
        coverage.notes.push('Documentation of familial hypercholesterolemia with DLCN score â‰¥6 would be required');
    } else {
        coverage.notMet.push('Does not meet primary coverage criteria (secondary prevention or primary prevention with LDL-C â‰¥3.5 mmol/L and documented FH)');
    }
    
    // Check for maximum tolerated therapy
    if (assessment.onMaximumTherapy) {
        coverage.criteria.push('On maximum tolerated lipid-lowering therapy');
    } else {
        if (!assessment.statinIntolerance) {
            coverage.notMet.push('Must be on maximum tolerated statin therapy');
        }
        
        if (!data.ezetimibe) {
            coverage.notMet.push('Must be on ezetimibe in addition to maximum tolerated statin');
        }
    }
    
    // Check duration on maximum therapy
    if (data['max-therapy-duration'] === '>6' || data['max-therapy-duration'] === '3-6') {
        coverage.criteria.push('â‰¥3 months on maximum tolerated therapy');
    } else {
        coverage.notMet.push('Must be on maximum tolerated therapy for at least 3 months');
    }
    
    // Check for documented statin intolerance if applicable
    if (assessment.statinIntolerance) {
        if (data['intolerance-type'] && data['intolerance-type'] !== '') {
            coverage.criteria.push('Documented statin intolerance');
        } else {
            coverage.notMet.push('Statin intolerance must be properly documented');
        }
    }
    
    // Determine overall eligibility
    coverage.eligible = coverage.notMet.length === 0 && (
        (data.preventionCategory === 'secondary' && data.ldl >= 2.0 && assessment.onMaximumTherapy) ||
        (data.preventionCategory === 'primary' && data.ldl >= 3.5 && assessment.onMaximumTherapy)
    );
    
    return coverage;
}

/**
 * Display medication evaluation results
 * @param {Object} data - Standardized patient data
 * @param {Object} assessment - Current therapy assessment
 * @param {Object} targets - Target levels
 * @param {Object} recommendations - Recommendations object
 * @param {Object} pcsk9Coverage - PCSK9 coverage assessment
 */
function displayMedicationResults(data, assessment, targets, recommendations, pcsk9Coverage) {
    const resultsContainer = document.getElementById('results-container');
    const resultsDiv = document.getElementById('risk-results');
    
    if (!resultsContainer || !resultsDiv) {
        console.error('Results container not found');
        return;
    }
    
    // Clear previous results
    resultsDiv.innerHTML = '';
    
    // Create results card
    const resultCard = document.createElement('div');
    resultCard.className = 'results-card';
    
    // Add header
    resultCard.innerHTML = `
        <div class="risk-header">
            <h3 class="risk-title">Lipid-Lowering Therapy Assessment</h3>
            <div class="risk-badge ${assessment.atLDLTarget ? 'low' : 'high'}">
                ${assessment.atLDLTarget ? 'At Target' : 'Not At Target'}
            </div>
        </div>
    `;
    
    // Current lipid profile and targets section
    const lipidProfile = document.createElement('div');
    lipidProfile.className = 'lipid-profile-section';
    lipidProfile.innerHTML = `
        <h4>Current Lipid Profile vs. Targets</h4>
        <div class="lipid-table">
            <div class="table-header">
                <div class="table-cell">Parameter</div>
                <div class="table-cell">Current Value</div>
                <div class="table-cell">Target</div>
                <div class="table-cell">Status</div>
            </div>
            <div class="table-row">
                <div class="table-cell">LDL Cholesterol</div>
                <div class="table-cell">${data.ldl.toFixed(2)} mmol/L</div>
                <div class="table-cell">${targets.ldl.value} mmol/L</div>
                <div class="table-cell ${assessment.atLDLTarget ? 'target-met' : 'target-not-met'}">
                    ${assessment.atLDLTarget ? 'At Target' : 'Not At Target'}
                </div>
            </div>
            <div class="table-row">
                <div class="table-cell">Non-HDL Cholesterol</div>
                <div class="table-cell">${data['non-hdl'].toFixed(2)} mmol/L</div>
                <div class="table-cell">${targets.nonHDL.value} mmol/L</div>
                <div class="table-cell ${assessment.atNonHDLTarget ? 'target-met' : 'target-not-met'}">
                    ${assessment.atNonHDLTarget ? 'At Target' : 'Not At Target'}
                </div>
            </div>
            ${data.apob ? `
            <div class="table-row">
                <div class="table-cell">ApoB</div>
                <div class="table-cell">${data.apob.toFixed(2)} g/L</div>
                <div class="table-cell">${targets.apoB.value} g/L</div>
                <div class="table-cell ${assessment.atApoBTarget ? 'target-met' : 'target-not-met'}">
                    ${assessment.atApoBTarget ? 'At Target' : 'Not At Target'}
                </div>
            </div>
            ` : ''}
            <div class="table-row">
                <div class="table-cell">Triglycerides</div>
                <div class="table-cell">${data.trig.toFixed(2)} mmol/L</div>
                <div class="table-cell">&lt;1.7 mmol/L</div>
                <div class="table-cell ${data.trig < 1.7 ? 'target-met' : 'target-not-met'}">
                    ${data.trig < 1.7 ? 'Normal' : (data.trig > 5.0 ? 'Severely Elevated' : 'Elevated')}
                </div>
            </div>
            ${data.lpa ? `
            <div class="table-row">
                <div class="table-cell">Lp(a)</div>
                <div class="table-cell">${data.lpa} mg/dL</div>
                <div class="table-cell">&lt;50 mg/dL</div>
                <div class="table-cell ${data.lpa < 50 ? 'target-met' : 'target-not-met'}">
                    ${data.lpa < 50 ? 'Normal' : 'Elevated'}
                </div>
            </div>
            ` : ''}
        </div>
        <div class="risk-category-info">
            <p><strong>Risk Category:</strong> ${targets.riskCategory}</p>
            <p><strong>Current Therapy Intensity:</strong> ${assessment.currentTherapyIntensity}</p>
            ${assessment.gapToLDLTarget > 0 ? 
            `<p><strong>Additional LDL-C Reduction Needed:</strong> ${assessment.estimatedAdditionalLDLReduction.toFixed(0)}%</p>` : ''}
        </div>
    `;
    
    resultCard.appendChild(lipidProfile);
    
    // Treatment recommendations section
    const recommendationsSection = document.createElement('div');
    recommendationsSection.className = 'recommendations-section';
    recommendationsSection.innerHTML = `
        <h4>Treatment Recommendations</h4>
        <div class="recommendations-summary">
            <ul>
                ${recommendations.summary.map(item => `<li>${item}</li>`).join('')}
            </ul>
        </div>
        
        <div class="detailed-recommendations">
            ${recommendations.statinChange ? `
            <div class="recommendation-item">
                <h5>Statin Therapy</h5>
                <p>${recommendations.statinChange}</p>
                <div class="rationale">
                    <p><strong>Rationale:</strong> ${recommendations.statinRationale}</p>
                </div>
            </div>
            ` : ''}
            
            ${recommendations.ezetimibeChange ? `
            <div class="recommendation-item">
                <h5>Ezetimibe</h5>
                <p>${recommendations.ezetimibeChange}</p>
                <div class="rationale">
                    <p><strong>Rationale:</strong> ${recommendations.ezetimibeRationale}</p>
                </div>
            </div>
            ` : ''}
            
            ${recommendations.pcsk9Change ? `
            <div class="recommendation-item">
                <h5>PCSK9 Inhibitor</h5>
                <p>${recommendations.pcsk9Change}</p>
                <div class="rationale">
                    <p><strong>Rationale:</strong> ${recommendations.pcsk9Rationale}</p>
                </div>
            </div>
            ` : ''}
            
            ${recommendations.otherTherapies.length > 0 ? `
            <div class="recommendation-item">
                <h5>Additional Considerations</h5>
                ${recommendations.otherTherapies.map(therapy => `
                    <div class="other-therapy ${therapy.intensityClass}">
                        <p>${therapy.therapy}</p>
                        <div class="rationale">
                            <p><strong>Rationale:</strong> ${therapy.rationale}</p>
                        </div>
                    </div>
                `).join('')}
            </div>
            ` : ''}
            
            <div class="recommendation-item">
                <h5>Non-Pharmacological Therapy</h5>
                <ul>
                    ${recommendations.nonPharmacological.map(item => `<li>${item}</li>`).join('')}
                </ul>
            </div>
        </div>
    `;
    
    resultCard.appendChild(recommendationsSection);
    
    // PCSK9 coverage section if applicable
    if (recommendations.pcsk9Change || data.pcsk9) {
        const pcsk9Section = document.createElement('div');
        pcsk9Section.className = 'pcsk9-coverage-assessment';
        pcsk9Section.innerHTML = `
            <h4>PCSK9 Inhibitor Coverage Assessment</h4>
            <div class="coverage-status ${pcsk9Coverage.eligible ? 'eligible' : 'not-eligible'}">
                <p><strong>Coverage Status:</strong> ${pcsk9Coverage.eligible ? 'Likely Eligible' : 'Currently Not Eligible'}</p>
            </div>
            
            ${pcsk9Coverage.criteria.length > 0 ? `
            <div class="criteria-met">
                <p><strong>Criteria Met:</strong></p>
                <ul>
                    ${pcsk9Coverage.criteria.map(criterion => `<li>${criterion}</li>`).join('')}
                </ul>
            </div>
            ` : ''}
            
            ${pcsk9Coverage.notMet.length > 0 ? `
            <div class="criteria-not-met">
                <p><strong>Criteria Not Met:</strong></p>
                <ul>
                    ${pcsk9Coverage.notMet.map(criterion => `<li>${criterion}</li>`).join('')}
                </ul>
            </div>
            ` : ''}
            
            ${pcsk9Coverage.notes.length > 0 ? `
            <div class="coverage-notes">
                <p><strong>Notes:</strong></p>
                <ul>
                    ${pcsk9Coverage.notes.map(note => `<li>${note}</li>`).join('')}
                </ul>
            </div>
            ` : ''}
            
            <div class="coverage-info">
                <p><strong>Documentation Required for Special Authority:</strong></p>
                <ul>
                    <li>Current and baseline lipid values</li>
                    <li>Details of current and previous lipid-lowering therapies</li>
                    <li>Documentation of statin intolerance if applicable</li>
                    <li>For primary prevention: documentation of familial hypercholesterolemia diagnosis</li>
                </ul>
            </div>
        `;
        
        resultCard.appendChild(pcsk9Section);
    }
    
    // Add card to results
    resultsDiv.appendChild(resultCard);
    
    // Show results container
    document.querySelector('#results-date span').textContent = new Date().toLocaleDateString();
    resultsContainer.style.display = 'block';
    
    // Scroll to results
    resultsContainer.scrollIntoView({ behavior: 'smooth' });
}
/**
 * UI functionality for CVD Risk Toolkit
 */

/**
 * Opens the specified tab and handles tab switching
 * @param {Event} evt - The click event
 * @param {string} tabId - The ID of the tab to open
 */
function openTab(evt, tabId) {
    // Hide all tab content
    const tabContents = document.getElementsByClassName("tab-content");
    for (let i = 0; i < tabContents.length; i++) {
        tabContents[i].classList.remove("active");
    }
    
    // Remove active class from all tabs
    const tabs = document.getElementsByClassName("tab");
    for (let i = 0; i < tabs.length; i++) {
        tabs[i].classList.remove("active");
    }
    
    // Show the selected tab content and mark the button as active
    document.getElementById(tabId).classList.add("active");
    evt.currentTarget.classList.add("active");
}

/**
 * Initialize the application
 * This function sets up event listeners and initializes the UI
 */
function initializeApp() {
    console.log("Initializing CVD Risk Toolkit...");
    
    // Setup event listeners for tabs
    setupTabEventListeners();
    
    // Setup card headers
    setupCardHeaders();
    
    // Initialize tooltips and other UI elements
    initializeTooltips();
    setupModalClose();
    setupHelpModal();
    addClinicalValidation();
    
    // Set up cross-tab data sharing
    setupCrossTabDataSharing();
    
    // Setup height toggle event listeners
    setupHeightToggleListeners();
    
    // Setup SBP readings toggle
    setupSBPReadingsToggle();
    
    // Setup theme toggle
    setupThemeToggle();
    
    // Set current date
    document.querySelector('#results-date span').textContent = new Date().toLocaleDateString();
    
    console.log("CVD Risk Toolkit initialization complete");
}

/**
 * Set up event listeners for tabs
 */
function setupTabEventListeners() {
    const tabs = document.querySelectorAll(".tab");
    tabs.forEach(tab => {
        tab.addEventListener('click', function(event) {
            event.preventDefault();
            const tabId = this.getAttribute('data-tab');
            openTab(event, tabId);
        });
    });
}

/**
 * Set up expandable/collapsible card headers
 */
function setupCardHeaders() {
    const cardHeaders = document.querySelectorAll('.card-header');
    
    cardHeaders.forEach(header => {
        header.addEventListener('click', function() {
            // Toggle active class for header
            this.classList.toggle('active');
            
            // Toggle the display of card body
            const body = this.nextElementSibling;
            if (body.classList.contains('active')) {
                body.classList.remove('active');
                this.querySelector('.toggle-icon').textContent = 'â–²';
            } else {
                body.classList.add('active');
                this.querySelector('.toggle-icon').textContent = 'â–¼';
            }
        });
    });
}

/**
 * Initialize tooltips for informational icons
 */
function initializeTooltips() {
    const tooltipContainers = document.querySelectorAll('.tooltip-container');
    
    tooltipContainers.forEach(function(container) {
        const infoIcon = container.querySelector('.info-icon');
        const tooltipText = container.querySelector('.tooltip-text');
        
        if (infoIcon && tooltipText) {
            infoIcon.addEventListener('click', function(event) {
                event.stopPropagation();
                tooltipText.style.visibility = tooltipText.style.visibility === 'visible' ? 'hidden' : 'visible';
                tooltipText.style.opacity = tooltipText.style.opacity === '1' ? '0' : '1';
            });
            
            document.addEventListener('click', function() {
                tooltipText.style.visibility = 'hidden';
                tooltipText.style.opacity = '0';
            });
        }
    });
}

/**
 * Setup modal close functionality
 */
function setupModalClose() {
    // Close modal when close button is clicked
    const closeButtons = document.querySelectorAll('.close-btn, .modal-close');
    closeButtons.forEach(function(button) {
        button.addEventListener('click', function() {
            const modal = this.closest('.modal');
            if (modal) {
                modal.style.display = 'none';
            }
        });
    });
    
    // Close modal when clicking outside of it
    window.addEventListener('click', function(event) {
        const modals = document.querySelectorAll('.modal');
        modals.forEach(function(modal) {
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        });
    });
}

/**
 * Setup the help modal tabs
 */
function setupHelpModal() {
    // Set up help tab navigation
    const helpTabs = document.querySelectorAll('.help-tab');
    helpTabs.forEach(tab => {
        tab.addEventListener('click', function() {
            // Remove active class from all tabs and content
            document.querySelectorAll('.help-tab').forEach(t => t.classList.remove('active'));
            document.querySelectorAll('.help-content').forEach(c => c.classList.remove('active'));
            
            // Add active class to clicked tab
            this.classList.add('active');
            
            // Show corresponding content
            const tabId = this.getAttribute('data-tab');
            document.getElementById(tabId).classList.add('active');
        });
    });
}

/**
 * Set up cross-tab data sharing to allow calculated risk scores
 * to impact medication recommendations
 */
function setupCrossTabDataSharing() {
    // Listen for risk calculation events
    document.addEventListener('risk-calculated', function(e) {
        // Update medication tab with risk information if available
        if (e.detail && e.detail.riskScore !== undefined) {
            // Store risk information in session storage for tab persistence
            sessionStorage.setItem('last-risk-score', e.detail.riskScore);
            sessionStorage.setItem('risk-calculator-used', e.detail.calculator || 'unknown');
            
            // Update comparison tab status
            updateComparisonTabStatus(e.detail.calculator.toLowerCase(), true);
        }
    });
    
    // Check if we have stored risk information on page load
    const storedRisk = sessionStorage.getItem('last-risk-score');
    const storedCalculator = sessionStorage.getItem('risk-calculator-used');
    
    if (storedRisk && storedCalculator) {
        // Update comparison tab status based on stored information
        if (storedCalculator === 'FRS') {
            updateComparisonTabStatus('frs', true);
        } else if (storedCalculator === 'QRISK3') {
            updateComparisonTabStatus('qrisk', true);
        } else if (storedCalculator === 'Combined') {
            updateComparisonTabStatus('frs', true);
            updateComparisonTabStatus('qrisk', true);
        }
    }
}

/**
 * Setup height toggle event listeners
 */
function setupHeightToggleListeners() {
    const heightUnit = document.getElementById('qrisk-height-unit');
    if (heightUnit) {
        heightUnit.addEventListener('change', function() {
            toggleHeightInputs('qrisk');
        });
    }
}

/**
 * Toggle height inputs between cm and ft/in
 * @param {string} prefix - Form prefix ('qrisk')
 */
function toggleHeightInputs(prefix) {
    const heightUnit = document.getElementById(`${prefix}-height-unit`).value;
    const heightInput = document.getElementById(`${prefix}-height`);
    const heightFtContainer = document.getElementById(`${prefix}-height-ft-container`);
    
    if (heightUnit === 'cm') {
        heightInput.style.display = 'block';
        heightFtContainer.style.display = 'none';
        
        // If feet/inches values exist, convert to cm
        const feetInput = document.getElementById(`${prefix}-height-feet`);
        const inchesInput = document.getElementById(`${prefix}-height-inches`);
        
        if (feetInput.value && feetInput.value.trim() !== '') {
            const feet = parseFloat(feetInput.value) || 0;
            const inches = parseFloat(inchesInput.value) || 0;
            const cm = convertHeightToCm(feet, inches);
            heightInput.value = cm.toFixed(1);
        }
    } else {
        heightInput.style.display = 'none';
        heightFtContainer.style.display = 'flex';
        
        // If cm value exists, convert to feet/inches
        if (heightInput.value && heightInput.value.trim() !== '') {
            const cm = parseFloat(heightInput.value);
            const totalInches = cm / 2.54;
            const feet = Math.floor(totalInches / 12);
            const inches = Math.round(totalInches % 12);
            
            document.getElementById(`${prefix}-height-feet`).value = feet;
            document.getElementById(`${prefix}-height-inches`).value = inches;
        }
    }
}

/**
 * Setup SBP readings toggle
 */
function setupSBPReadingsToggle() {
    const qriskToggle = document.getElementById('qrisk-toggle-sbp-readings');
    if (qriskToggle) {
        qriskToggle.addEventListener('click', function() {
            const readingsDiv = document.getElementById('qrisk-sbp-readings');
            if (readingsDiv.style.display === 'none') {
                readingsDiv.style.display = 'block';
                this.textContent = 'Hide readings form';
            } else {
                readingsDiv.style.display = 'none';
                this.textContent = 'Calculate from multiple readings';
            }
        });
    }
}

/**
 * Setup dark/light theme toggle
 */
function setupThemeToggle() {
    const themeToggle = document.getElementById('theme-toggle');
    if (themeToggle) {
        // Check if theme preference is stored
        const currentTheme = localStorage.getItem('theme') || 'light';
        document.body.classList.toggle('dark-theme', currentTheme === 'dark');
        
        // Update icon based on current theme
        updateThemeIcon(currentTheme === 'dark');
        
        // Add click event
        themeToggle.addEventListener('click', function() {
            // Toggle theme
            const isDarkTheme = document.body.classList.toggle('dark-theme');
            
            // Save preference
            localStorage.setItem('theme', isDarkTheme ? 'dark' : 'light');
            
            // Update icon
            updateThemeIcon(isDarkTheme);
        });
    }
}

/**
 * Update theme toggle icon based on current theme
 * @param {boolean} isDarkTheme - Whether dark theme is active
 */
function updateThemeIcon(isDarkTheme) {
    const themeToggle = document.getElementById('theme-toggle');
    if (themeToggle) {
        if (isDarkTheme) {
            themeToggle.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="5"></circle><path d="M12 1v2M12 21v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4"></path></svg>';
            themeToggle.setAttribute('aria-label', 'Switch to light mode');
        } else {
            themeToggle.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z"></path></svg>';
            themeToggle.setAttribute('aria-label', 'Switch to dark mode');
        }
    }
}

/**
 * Handle "Reset Form" button clicks
 * @param {string} formId - ID of the form to reset
 */
function resetForm(formId) {
    const form = document.getElementById(formId);
    if (!form) {
        return;
    }
    
    // Reset all inputs to default values
    form.reset();
    
    // Clear any error styling
    const errorFields = form.querySelectorAll('.error');
    errorFields.forEach(field => field.classList.remove('error'));
    
    // Hide error messages
    const errorMessages = form.querySelectorAll('.error-message');
    errorMessages.forEach(message => message.style.display = 'none');
    
    // Clear any calculated values or results
    const nonHDLInput = form.querySelector('#med-non-hdl');
    if (nonHDLInput) {
        nonHDLInput.value = '';
        nonHDLInput.disabled = true;
        const toggleLink = document.getElementById('toggle-manual-non-hdl');
        if (toggleLink) toggleLink.textContent = 'Enter manually';
    }
    
    // Reset PCSK9 details if present
    const pcsk9Details = document.getElementById('pcsk9-details');
    if (pcsk9Details) pcsk9Details.style.display = 'none';
    
    // Reset any dependent selects or fields
    const statinDoseSelect = form.querySelector('#med-statin-dose');
    if (statinDoseSelect) {
        statinDoseSelect.innerHTML = '<option value="" selected>Select dose</option>';
        statinDoseSelect.disabled = true;
    }
    
    const secondaryDetails = form.querySelector('#secondary-details');
    if (secondaryDetails) secondaryDetails.disabled = true;
    
    const intoleranceType = form.querySelector('#med-intolerance-type');
    if (intoleranceType) intoleranceType.disabled = true;
    
    // Clear SBP readings if present
    for (let i = 1; i <= 6; i++) {
        const reading = form.querySelector(`#${formId.split('-')[0]}-sbp-reading-${i}`);
        if (reading) reading.value = '';
    }
    
    const sbpResult = document.getElementById(`${formId.split('-')[0]}-sbp-sd-result`);
    if (sbpResult) sbpResult.style.display = 'none';
    
    // Reset height/feet view if applicable
    const heightUnit = form.querySelector(`#${formId.split('-')[0]}-height-unit`);
    if (heightUnit && heightUnit.value === 'ft/in') {
        heightUnit.value = 'cm';
        toggleHeightInputs(formId.split('-')[0]);
    }
    
    // Update comparison tab status if applicable
    if (formId === 'frs-form') {
        updateComparisonTabStatus('frs', false);
    } else if (formId === 'qrisk-form') {
        updateComparisonTabStatus('qrisk', false);
    }
}

/**
 * Export results to CSV or PDF
 * @param {string} format - 'csv' or 'pdf'
 */
function exportResults(format) {
    const resultsContainer = document.getElementById('results-container');
    if (!resultsContainer || resultsContainer.style.display === 'none') {
        showModal('No results to export. Please calculate risk scores first.');
        return;
    }
    
    if (format === 'csv') {
        exportToCSV();
    } else if (format === 'pdf') {
        showPdfPreview();
    }
}

/**
 * Export results to CSV file
 */
function exportToCSV() {
    // Get data from results
    const riskTitle = document.querySelector('.risk-title')?.textContent || 'CVD Risk Assessment';
    const baseRisk = document.querySelector('.base-risk')?.textContent || 'N/A';
    const lpaModifier = document.querySelector('.lpa-modifier')?.textContent || 'N/A';
    const adjustedRisk = document.querySelector('.adjusted-risk')?.textContent || 'N/A';
    const riskCategory = document.querySelector('.risk-category')?.textContent || 'N/A';
    const date = document.querySelector('#results-date span')?.textContent || new Date().toLocaleDateString();
    
    // Create CSV content
    let csvContent = 'data:text/csv;charset=utf-8,';
    csvContent += 'CVD Risk Assessment Results,\r\n';
    csvContent += 'Date,' + date + '\r\n\r\n';
    csvContent += 'Assessment Type,' + riskTitle + '\r\n';
    csvContent += 'Base Risk,' + baseRisk + '\r\n';
    csvContent += 'Lp(a) Modifier,' + lpaModifier + '\r\n';
    csvContent += 'Adjusted Risk,' + adjustedRisk + '\r\n';
    csvContent += 'Risk Category,' + riskCategory + '\r\n\r\n';
    
    // Add recommendations (cleaned of HTML)
    const recommendations = document.getElementById('recommendations-content');
    if (recommendations) {
        const recItems = recommendations.querySelectorAll('.recommendation-item');
        if (recItems.length > 0) {
            csvContent += 'Treatment Recommendations,\r\n';
            
            recItems.forEach(item => {
                const title = item.querySelector('strong')?.textContent || '';
                const content = item.textContent.replace(title, '').trim();
                csvContent += title + ',' + content.replace(/,/g, ';') + '\r\n';
            });
        }
    }
    
    // Create download link
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement('a');
    link.setAttribute('href', encodedUri);
    link.setAttribute('download', 'cvd_risk_assessment_' + new Date().toISOString().slice(0, 10) + '.csv');
    document.body.appendChild(link);
    
    // Trigger download
    link.click();
    document.body.removeChild(link);
}

/**
 * Show PDF preview before export
 */
function showPdfPreview() {
    const previewModal = document.getElementById('pdf-preview-modal');
    const previewContent = document.getElementById('pdf-preview-content');
    
    if (!previewModal || !previewContent) {
        showModal('PDF preview functionality is not available. Please try again later.');
        return;
    }
    
    // Clone the results section for preview
    const resultsContainer = document.getElementById('results-container');
    previewContent.innerHTML = '';
    previewContent.appendChild(resultsContainer.cloneNode(true));
    
    // Add preview styling
    previewContent.querySelector('.export-section').style.display = 'none';
    
    // Show the preview modal
    previewModal.style.display = 'block';
    
    // Setup download button
    document.getElementById('download-pdf-btn').addEventListener('click', function() {
        // In a real implementation, this would use a library like jsPDF or html2pdf
        // For this demo, we'll just show a message
        showModal('PDF generation would be implemented here with a library like jsPDF or html2pdf.');
        previewModal.style.display = 'none';
    });
}

// Initialize the application when the DOM is fully loaded
document.addEventListener('DOMContentLoaded', initializeApp);
<script src="qrisk3-implementation.js"></script>
<script src="juno-integration.js"></script>
<script src="enhanced-display.js"></script>
    <!-- Copy the body content from your existing index.html -->
    <!-- This part would be replaced with your actual HTML content -->
    
    <!-- Updated Scripts Section in correct order -->
    <!-- Security and utility scripts -->
    <script src="js/utils/secure-storage.js"></script>
    <script src="js/utils/loading-indicator.js"></script>
    <script src="js/utils/input-sanitizer.js"></script>
    <script src="js/utils/physiological-validation.js"></script>
    <script src="js/utils/validator-extension.js"></script>
    <script src="js/utils/enhanced-disclaimer.js"></script>
    <script src="js/utils/csp-report-handler.js"></script>
    
    <!-- Core functionality scripts -->
    <script src="js/validation.js"></script>
    <script src="js/calculations.js"></script>
    <script src="js/medication.js"></script>
    <script src="js/ui.js"></script>
    <script src="js/form-handler.js"></script>
    
    <!-- Main implementation scripts -->
    <script src="combined.js"></script>
    <script src="qrisk3-implementation.js"></script>
    <script src="juno-integration.js"></script>
    <script src="enhanced-display.js"></script>
    
    <!-- Initialization script -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Initialize form handlers
        if (window.formHandler) {
          // Setup all form event handlers
          const forms = document.querySelectorAll('form');
          forms.forEach(form => {
            const formId = form.id;
            if (formId) {
              formHandler.handleFormSubmit(formId, {}, function(data) {
                console.log('Form submitted:', formId, data);
              });
            }
          });
        }
        
        // Initialize enhanced display
        if (window.enhancedDisplay) {
          window.alert = function(message) {
            window.enhancedDisplay.showError(message, 'info');
          };
        }
        
        // Initialize disclaimers
        if (window.enhancedDisclaimer) {
          window.enhancedDisclaimer.showInitialDisclaimers();
        }
      });
    </script>
    <!-- Copy the body content from your existing index.html -->
    <!-- This part would be replaced with your actual HTML content -->
    
    <!-- Updated Scripts Section in correct order -->
    <!-- Security and utility scripts -->
    <script src="js/utils/secure-storage.js"></script>
    <script src="js/utils/loading-indicator.js"></script>
    <script src="js/utils/input-sanitizer.js"></script>
    <script src="js/utils/physiological-validation.js"></script>
    <script src="js/utils/validator-extension.js"></script>
    <script src="js/utils/enhanced-disclaimer.js"></script>
    <script src="js/utils/csp-report-handler.js"></script>
    
    <!-- Core functionality scripts -->
    <script src="js/validation.js"></script>
    <script src="js/calculations.js"></script>
    <script src="js/medication.js"></script>
    <script src="js/ui.js"></script>
    <script src="js/form-handler.js"></script>
    
    <!-- Main implementation scripts -->
    <script src="combined.js"></script>
    <script src="qrisk3-implementation.js"></script>
    <script src="juno-integration.js"></script>
    <script src="enhanced-display.js"></script>
    
    <!-- Initialization script -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Initialize form handlers
        if (window.formHandler) {
          // Setup all form event handlers
          const forms = document.querySelectorAll('form');
          forms.forEach(form => {
            const formId = form.id;
            if (formId) {
              formHandler.handleFormSubmit(formId, {}, function(data) {
                console.log('Form submitted:', formId, data);
              });
            }
          });
        }
        
        // Initialize enhanced display
        if (window.enhancedDisplay) {
          window.alert = function(message) {
            window.enhancedDisplay.showError(message, 'info');
          };
        }
        
        // Initialize disclaimers
        if (window.enhancedDisclaimer) {
          window.enhancedDisclaimer.showInitialDisclaimers();
        }
      });
    </script>
</body>
</html>
