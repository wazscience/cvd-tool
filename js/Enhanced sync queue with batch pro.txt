// Enhanced sync queue with batch processing
async processSyncQueue(batchSize = 10) {
    // Only process if sync is enabled and online
    if (!this.isSyncEnabled || !navigator.onLine) {
        return { success: false, count: 0 };
    }
    
    await this.initialize();
    
    return new Promise((resolve, reject) => {
        const transaction = this.db.transaction(['syncQueue'], 'readonly');
        const syncStore = transaction.objectStore('syncQueue');
        const request = syncStore.getAll();
        
        request.onsuccess = async (event) => {
            const items = event.target.result;
            
            if (items.length === 0) {
                resolve({ success: true, count: 0 });
                return;
            }
            
            let successCount = 0;
            
            // Process in batches
            for (let i = 0; i < items.length; i += batchSize) {
                const batch = items.slice(i, i + batchSize);
                
                // Process batch
                const batchResults = await Promise.allSettled(
                    batch.map(item => this._syncItemToServer(item))
                );
                
                // Process results
                for (let j = 0; j < batchResults.length; j++) {
                    const result = batchResults[j];
                    const item = batch[j];
                    
                    if (result.status === 'fulfilled' && result.value) {
                        // Success - remove from queue
                        await this._removeFromSyncQueue(item.id);
                        successCount++;
                    } else {
                        // Log failure for retry
                        console.error('Failed to sync item:', item.id, result.reason);
                    }
                }
                
                // Add a small delay between batches to prevent overwhelming the server
                if (i + batchSize < items.length) {
                    await new Promise(resolve => setTimeout(resolve, 500));
                }
            }
            
            resolve({
                success: true,
                count: successCount
            });
        };
        
        request.onerror = (event) => {
            console.error('Error getting sync queue:', event.target.error);
            reject(event.target.error);
        };
    });
}