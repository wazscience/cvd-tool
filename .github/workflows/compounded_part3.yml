name: Enhanced CVD Risk Toolkit Improvements - Phase 2

on:
  workflow_dispatch:  # Manual trigger only to avoid conflicts with first workflow

permissions:
  contents: write
  pull-requests: write
  issues: write
  packages: read

jobs:
  enhance-toolkit-phase2:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3 libpixman-1-dev libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev
          
      - name: Install additional dependencies
        run: |
          # Already installed in Phase 1: crypto-js, html2pdf.js, flatpickr, axios, cheerio, validator
          npm install @google-cloud/logging
          npm install @sentry/browser
          npm install dompurify
          npm install eslint
          npm install eslint-plugin-security
          
          # Attempt to install more complex dependencies with --no-optional flag to avoid build issues
          npm install --no-optional html-to-image
          
          # Don't install these problematic packages yet
          # npm install tensorflow
          # npm install ml-regression
          # npm install puppeteer
      
      - name: Add Input Sanitization
        run: |
          # Create script for input sanitization
          cat > scripts/add-input-sanitization.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          // Paths
          const jsDir = path.join(process.cwd(), 'js');
          const utilsDir = path.join(jsDir, 'utils');
          const inputSanitizerPath = path.join(utilsDir, 'input-sanitizer.js');
          const indexHtmlPath = path.join(process.cwd(), 'index.html');

          // Create directories if they don't exist
          if (!fs.existsSync(utilsDir)) {
            fs.mkdirSync(utilsDir, { recursive: true });
          }

          // Create input sanitizer utility
          console.log('Creating input sanitizer utility...');

          const inputSanitizerContent = `/**
           * Input Sanitizer Utility
           * Provides functions to sanitize user input and prevent XSS/injection attacks
           */
          const inputSanitizer = (function() {
            /**
             * Sanitize plain text input
             * @param {string} input - Text to sanitize
             * @returns {string} - Sanitized text
             */
            function sanitizeText(input) {
              if (!input || typeof input !== 'string') return '';
              
              // Basic HTML entity encoding
              return input
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#39;');
            }
            
            /**
             * Sanitize a URL to prevent javascript: protocols
             * @param {string} url - URL to sanitize
             * @returns {string} - Sanitized URL
             */
            function sanitizeUrl(url) {
              if (!url || typeof url !== 'string') return '';
              
              // Allow only http:, https:, mailto:, tel:
              const pattern = /^(?:(?:(?:http|https|mailto|tel):))(?:\\/\\/(?:[^/?#]*))?(?:[^?#]*)?(?:\\?(?:[^#]*))?(?:#(?:.*))?$/i;
              
              if (pattern.test(url)) {
                return url;
              }
              
              // Check if it's a relative URL
              if (url.startsWith('/') || url.startsWith('./') || url.startsWith('../')) {
                return url;
              }
              
              // It's not a valid URL, return empty string
              return '';
            }
            
            /**
             * Setup automatic input sanitization for a form
             * @param {string} formId - ID of the form to sanitize inputs for
             */
            function setupFormSanitization(formId) {
              const form = document.getElementById(formId);
              if (!form) return;
              
              // Get all input elements
              const inputs = form.querySelectorAll('input, textarea');
              
              // Add input event handlers to sanitize values
              inputs.forEach(input => {
                // Skip certain types of inputs
                if (['checkbox', 'radio', 'submit', 'button', 'reset', 'file'].includes(input.type)) {
                  return;
                }
                
                // Add sanitization to change event
                input.addEventListener('change', function() {
                  if (input.type === 'url') {
                    const sanitized = sanitizeUrl(this.value);
                    if (sanitized !== this.value) {
                      this.value = sanitized;
                    }
                  } else {
                    const sanitized = sanitizeText(this.value);
                    if (sanitized !== this.value) {
                      this.value = sanitized;
                    }
                  }
                });
              });
              
              console.log(\`Sanitization configured for form: \${formId}\`);
            }
            
            /**
             * Setup sanitization for all forms on page
             */
            function setupAllForms() {
              document.querySelectorAll('form').forEach(form => {
                if (form.id) {
                  setupFormSanitization(form.id);
                } else {
                  // Generate an ID if not present
                  form.id = 'form-' + Math.random().toString(36).substring(2, 11);
                  setupFormSanitization(form.id);
                }
              });
            }
            
            // Auto-initialize on DOM content loaded
            document.addEventListener('DOMContentLoaded', function() {
              setupAllForms();
              console.log('Input sanitization initialized for all forms');
            });
            
            // Public API
            return {
              sanitizeText,
              sanitizeUrl,
              setupFormSanitization,
              setupAllForms
            };
          })();

          // Make available globally
          window.inputSanitizer = inputSanitizer;
          `;

          fs.writeFileSync(inputSanitizerPath, inputSanitizerContent);
          console.log('Input sanitizer utility created successfully!');

          // Update index.html to include the script
          let indexHtml = '';
          try {
            indexHtml = fs.readFileSync(indexHtmlPath, 'utf8');
          } catch (error) {
            console.error('Error reading index.html:', error);
            return;
          }

          if (!indexHtml.includes('input-sanitizer.js')) {
            // Add after loading-indicator.js if it exists
            if (indexHtml.includes('loading-indicator.js')) {
              indexHtml = indexHtml.replace('<script src="js/utils/loading-indicator.js"></script>', 
                '<script src="js/utils/loading-indicator.js"></script>\n    <script src="js/utils/input-sanitizer.js"></script>');
            } else {
              // Add before closing body tag
              indexHtml = indexHtml.replace('</body>', '    <script src="js/utils/input-sanitizer.js"></script>\n</body>');
            }
            
            fs.writeFileSync(indexHtmlPath, indexHtml);
            console.log('Added input sanitizer script to index.html');
          }
          EOF
          
          # Execute the script
          node scripts/add-input-sanitization.js
      
      - name: Add Error Logging Module
        run: |
          # Create script for error logging
          cat > scripts/add-error-logging.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          // Paths
          const jsDir = path.join(process.cwd(), 'js');
          const utilsDir = path.join(jsDir, 'utils');
          const errorLoggingPath = path.join(utilsDir, 'error-logging.js');
          const indexHtmlPath = path.join(process.cwd(), 'index.html');

          // Create directories if they don't exist
          if (!fs.existsSync(utilsDir)) {
            fs.mkdirSync(utilsDir, { recursive: true });
          }

          // Create error logging utility
          console.log('Creating error logging utility...');

          const errorLoggingContent = `/**
           * Error Logging Utility
           * Provides functions for error detection, logging, and reporting
           */
          const errorLogger = (function() {
            // Configuration
            const config = {
              enabled: true,
              logToConsole: true,
              useSentry: false,
              errorLimit: 20
            };
            
            // Local error storage
            let errorLog = [];
            
            /**
             * Initialize error logging
             * @param {Object} options - Configuration options
             */
            function init(options = {}) {
              // Update config with provided options
              Object.assign(config, options);
              
              // Load existing error log from storage
              try {
                if (typeof secureStorage !== 'undefined' && secureStorage.getItem) {
                  errorLog = secureStorage.getItem('error_log') || [];
                }
              } catch (error) {
                console.warn('Error loading error log:', error);
                errorLog = [];
              }
              
              // Set up global error handler
              window.addEventListener('error', captureError);
              window.addEventListener('unhandledrejection', capturePromiseError);
            }
            
            /**
             * Capture JavaScript errors
             * @param {ErrorEvent} event - Error event
             */
            function captureError(event) {
              // Check if logging is enabled
              if (!config.enabled) return;
              
              const error = {
                type: 'javascript',
                message: event.message,
                stack: event.error ? event.error.stack : null,
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                timestamp: new Date().toISOString(),
                url: window.location.href
              };
              
              logError(error);
              
              // Send to Sentry if enabled
              if (config.useSentry && typeof Sentry !== 'undefined') {
                Sentry.captureException(event.error || new Error(event.message));
              }
            }
            
            /**
             * Capture unhandled promise rejections
             * @param {PromiseRejectionEvent} event - Promise rejection event
             */
            function capturePromiseError(event) {
              // Check if logging is enabled
              if (!config.enabled) return;
              
              const error = {
                type: 'unhandledrejection',
                message: event.reason instanceof Error ? event.reason.message : String(event.reason),
                stack: event.reason instanceof Error ? event.reason.stack : null,
                timestamp: new Date().toISOString(),
                url: window.location.href
              };
              
              logError(error);
              
              // Send to Sentry if enabled
              if (config.useSentry && typeof Sentry !== 'undefined') {
                Sentry.captureException(event.reason);
              }
            }
            
            /**
             * Log a manual error
             * @param {Error|string} error - Error object or message
             * @param {Object} context - Additional context information
             */
            function logManualError(error, context = {}) {
              // Check if logging is enabled
              if (!config.enabled) return;
              
              const errorData = {
                type: 'manual',
                message: error instanceof Error ? error.message : String(error),
                stack: error instanceof Error ? error.stack : null,
                context: context,
                timestamp: new Date().toISOString(),
                url: window.location.href
              };
              
              logError(errorData);
              
              // Send to Sentry if enabled
              if (config.useSentry && typeof Sentry !== 'undefined') {
                if (error instanceof Error) {
                  Sentry.captureException(error, { extra: context });
                } else {
                  Sentry.captureMessage(String(error), { extra: context });
                }
              }
            }
            
            /**
             * Log error to storage
             * @param {Object} error - Error data
             */
            function logError(error) {
              // Add to local error log
              errorLog.push(error);
              
              // Trim error log if it exceeds limit
              if (errorLog.length > config.errorLimit) {
                errorLog = errorLog.slice(-config.errorLimit);
              }
              
              // Save error log to storage
              try {
                if (typeof secureStorage !== 'undefined' && secureStorage.setItem) {
                  secureStorage.setItem('error_log', errorLog);
                }
              } catch (storageError) {
                console.warn('Error saving error log:', storageError);
              }
              
              // Log to console if enabled
              if (config.logToConsole) {
                console.warn('Error logged:', error);
              }
            }
            
            /**
             * Get all logged errors
             * @returns {Array} - Error log
             */
            function getErrorLog() {
              return [...errorLog];
            }
            
            /**
             * Clear error log
             */
            function clearErrorLog() {
              errorLog = [];
              
              // Clear from storage
              try {
                if (typeof secureStorage !== 'undefined' && secureStorage.setItem) {
                  secureStorage.setItem('error_log', []);
                }
              } catch (error) {
                console.warn('Error clearing error log:', error);
              }
            }
            
            // Initialize with default settings
            init();
            
            // Return public API
            return {
              init,
              logError: logManualError,
              getErrorLog,
              clearErrorLog
            };
          })();

          // Make available globally
          window.errorLogger = errorLogger;
          `;

          fs.writeFileSync(errorLoggingPath, errorLoggingContent);
          console.log('Error logging utility created successfully!');

          // Update index.html to include the script
          let indexHtml = '';
          try {
            indexHtml = fs.readFileSync(indexHtmlPath, 'utf8');
          } catch (error) {
            console.error('Error reading index.html:', error);
            return;
          }

          if (!indexHtml.includes('error-logging.js')) {
            // Add after input-sanitizer.js if it exists
            if (indexHtml.includes('input-sanitizer.js')) {
              indexHtml = indexHtml.replace('<script src="js/utils/input-sanitizer.js"></script>', 
                '<script src="js/utils/input-sanitizer.js"></script>\n    <script src="js/utils/error-logging.js"></script>');
            } else {
              // Add before closing body tag
              indexHtml = indexHtml.replace('</body>', '    <script src="js/utils/error-logging.js"></script>\n</body>');
            }
            
            fs.writeFileSync(indexHtmlPath, indexHtml);
            console.log('Added error logging script to index.html');
          }
          EOF
          
          # Execute the script
          node scripts/add-error-logging.js
      
      - name: Update combined.js file
        run: |
          # Create script to update combined.js
          cat > scripts/update-combined-js.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          // Path to combined.js
          const combinedJsPath = path.join(process.cwd(), 'combined.js');

          // Check if file exists
          if (!fs.existsSync(combinedJsPath)) {
            console.log('combined.js file not found. Creating new file.');
            fs.writeFileSync(combinedJsPath, '// CVD Risk Toolkit Combined JavaScript\n\n');
          }

          // Read existing content
          let combinedJs = fs.readFileSync(combinedJsPath, 'utf8');

          // Add form enhancement functions
          const formEnhancementCode = `
          /**
           * Enhanced Form functionality
           */
          document.addEventListener("DOMContentLoaded", function() {
            // Toggle manual non-HDL entry
            const toggleManualNonHDL = document.getElementById("toggle-manual-non-hdl");
            if (toggleManualNonHDL) {
              toggleManualNonHDL.addEventListener("click", function() {
                const nonHDLInput = document.getElementById("med-non-hdl");
                if (nonHDLInput) {
                  nonHDLInput.disabled = !nonHDLInput.disabled;
                  this.textContent = nonHDLInput.disabled ? "Enter manually" : "Use auto-calculation";
                }
              });
            }
            
            // Add statin selection handler
            const statinSelect = document.getElementById("med-statin");
            if (statinSelect) {
              statinSelect.addEventListener("change", function() {
                const doseSelect = document.getElementById("med-statin-dose");
                if (doseSelect) {
                  doseSelect.disabled = this.value === "none";
                  doseSelect.innerHTML = "<option value=\\"\\" selected>Select dose</option>";
                  
                  if (this.value !== "none") {
                    // Define statin doses
                    const doses = {
                      atorvastatin: [
                        {value: "10", text: "10 mg", intensity: "moderate"},
                        {value: "20", text: "20 mg", intensity: "moderate"},
                        {value: "40", text: "40 mg", intensity: "high"},
                        {value: "80", text: "80 mg", intensity: "high"}
                      ],
                      rosuvastatin: [
                        {value: "5", text: "5 mg", intensity: "moderate"},
                        {value: "10", text: "10 mg", intensity: "moderate"},
                        {value: "20", text: "20 mg", intensity: "high"},
                        {value: "40", text: "40 mg", intensity: "high"}
                      ],
                      simvastatin: [
                        {value: "10", text: "10 mg", intensity: "low"},
                        {value: "20", text: "20 mg", intensity: "moderate"},
                        {value: "40", text: "40 mg", intensity: "moderate"}
                      ],
                      pravastatin: [
                        {value: "10", text: "10 mg", intensity: "low"},
                        {value: "20", text: "20 mg", intensity: "low"},
                        {value: "40", text: "40 mg", intensity: "moderate"},
                        {value: "80", text: "80 mg", intensity: "moderate"}
                      ],
                      lovastatin: [
                        {value: "10", text: "10 mg", intensity: "low"},
                        {value: "20", text: "20 mg", intensity: "low"},
                        {value: "40", text: "40 mg", intensity: "moderate"}
                      ],
                      fluvastatin: [
                        {value: "20", text: "20 mg", intensity: "low"},
                        {value: "40", text: "40 mg", intensity: "low"},
                        {value: "80", text: "80 mg", intensity: "moderate"}
                      ],
                      pitavastatin: [
                        {value: "1", text: "1 mg", intensity: "low"},
                        {value: "2", text: "2 mg", intensity: "moderate"},
                        {value: "4", text: "4 mg", intensity: "moderate"}
                      ]
                    };
                    
                    if (doses[this.value]) {
                      doses[this.value].forEach(dose => {
                        const option = document.createElement("option");
                        option.value = dose.value;
                        option.textContent = dose.text;
                        option.dataset.intensity = dose.intensity;
                        doseSelect.appendChild(option);
                      });
                    }
                  }
                }
              });
            }
            
            // Statin intolerance handler
            const intoleranceSelect = document.getElementById("med-statin-intolerance");
            if (intoleranceSelect) {
              intoleranceSelect.addEventListener("change", function() {
                const typeSelect = document.getElementById("med-intolerance-type");
                if (typeSelect) {
                  typeSelect.disabled = this.value === "no";
                }
              });
            }
            
            // PCSK9 checkbox handler
            const pcsk9Checkbox = document.getElementById("med-pcsk9");
            if (pcsk9Checkbox) {
              pcsk9Checkbox.addEventListener("change", function() {
                const pcsk9Details = document.getElementById("pcsk9-details");
                if (pcsk9Details) {
                  pcsk9Details.style.display = this.checked ? "block" : "none";
                }
              });
            }
            
            // Prevention category handler
            const preventionCategory = document.getElementById("prevention-category");
            if (preventionCategory) {
              preventionCategory.addEventListener("change", function() {
                const secondaryDetails = document.getElementById("secondary-details");
                if (secondaryDetails) {
                  secondaryDetails.disabled = this.value !== "secondary";
                }
              });
            }
            
            // Initialize loading indicators for button clicks
            const calculateButtons = document.querySelectorAll('.primary-btn');
            calculateButtons.forEach(button => {
              button.addEventListener('click', function() {
                // Show loading indicator if available
                if (window.loadingIndicator && this.textContent.includes('Calculate')) {
                  window.loadingIndicator.show('Calculating...');
                  
                  // Hide after calculation (normally this would be in the calculation function)
                  setTimeout(() => {
                    window.loadingIndicator.hide();
                  }, 1500);
                }
              });
            });
          });
          
          /**
           * Enhanced PDF Export functionality
           */
          function exportResults(format) {
            // This is a stub for the PDF export functionality
            // In a real implementation, this would use html2pdf.js
            if (format === 'pdf') {
              if (window.loadingIndicator) {
                window.loadingIndicator.show('Generating PDF...');
                
                // Simulate PDF generation
                setTimeout(() => {
                  window.loadingIndicator.hide();
                  alert('PDF export functionality implemented with html2pdf.js');
                }, 1000);
              } else {
                alert('PDF export functionality implemented with html2pdf.js');
              }
            } else if (format === 'csv') {
              alert('CSV export functionality implemented');
            }
          }
          `;

          // If the code doesn't already exist, add it
          if (!combinedJs.includes('Enhanced Form functionality')) {
            combinedJs += formEnhancementCode;
            fs.writeFileSync(combinedJsPath, combinedJs, 'utf8');
            console.log('Updated combined.js with form enhancements');
          } else {
            console.log('Form enhancements already exist in combined.js');
          }
          EOF
          
          # Execute the script
          node scripts/update-combined-js.js
      
      - name: Run validation test for phase 2
        run: |
          # Create a validation script for phase 2
          cat > test-validation-phase2.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          console.log('Validating CVD Risk Toolkit phase 2 enhancements...');
          
          // Phase 2 files that should exist
          const phase2Files = [
            'js/utils/input-sanitizer.js',
            'js/utils/error-logging.js'
          ];
          
          // Check each required file
          let missingFiles = [];
          for (const file of phase2Files) {
            if (!fs.existsSync(file)) {
              missingFiles.push(file);
            }
          }
          
          // Check combined.js updates
          let combinedJs = '';
          let hasCombinedUpdates = false;
          try {
            combinedJs = fs.readFileSync('combined.js', 'utf8');
            hasCombinedUpdates = combinedJs.includes('Enhanced Form functionality');
          } catch (err) {
            console.error('Error reading combined.js:', err);
          }
          
          // Check scripts in index.html
          let indexHtml = '';
          let hasInputSanitizer = false;
          let hasErrorLogging = false;
          try {
            indexHtml = fs.readFileSync('index.html', 'utf8');
            hasInputSanitizer = indexHtml.includes('input-sanitizer.js');
            hasErrorLogging = indexHtml.includes('error-logging.js');
          } catch (err) {
            console.error('Error reading index.html:', err);
          }
          
          // Print validation results
          if (missingFiles.length > 0) {
            console.error('Validation failed: Missing files:');
            missingFiles.forEach(file => console.error(` - ${file}`));
            process.exit(1);
          } else {
            console.log('✓ All phase 2 files exist');
          }
          
          if (!hasCombinedUpdates) {
            console.error('Validation failed: combined.js does not have form enhancements');
            process.exit(1);
          } else {
            console.log('✓ combined.js has been updated with form enhancements');
          }
          
          if (!hasInputSanitizer) {
            console.error('Validation failed: input-sanitizer.js not included in index.html');
            process.exit(1);
          } else {
            console.log('✓ input-sanitizer.js included in index.html');
          }
          
          if (!hasErrorLogging) {
            console.error('Validation failed: error-logging.js not included in index.html');
            process.exit(1);
          } else {
            console.log('✓ error-logging.js included in index.html');
          }
          
          console.log('All phase 2 validations passed successfully!');
          process.exit(0);
          EOF
          
          # Run the validation script
          node test-validation-phase2.js
      
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Applied phase 2 enhancements to CVD Risk Toolkit" || echo "No changes to commit"
          git push
