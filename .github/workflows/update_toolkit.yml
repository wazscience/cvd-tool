name: Enhanced CVD Risk Toolkit Implementation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Ensure proper permissions
permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  implement-enhancements:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for proper Git operations
          # Use a personal access token with appropriate permissions
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          echo "Installing system dependencies..."
          sudo apt-get update
          sudo apt-get install -y build-essential python3 libpixman-1-dev libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev

      - name: Create necessary directories
        run: |
          mkdir -p js/components
          mkdir -p js/utils
          mkdir -p js/models
          mkdir -p js/analytics
          mkdir -p js/ml
          mkdir -p scripts
          mkdir -p styles
          mkdir -p tests
          echo "Directory structure created successfully"
      
      - name: Update combined.js
        run: |
          cat > scripts/update-combined-js.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          // Path to the combined.js file
          const combinedJsPath = path.join(process.cwd(), 'combined.js');

          // Check if combined.js exists
          if (!fs.existsSync(combinedJsPath)) {
            console.log('combined.js does not exist, creating new file');
            
            // Create basic structure if file doesn't exist
            const basicCombinedJs = `// CVD Risk Toolkit Combined JavaScript
          
          /**
           * Utility functions for edge case handling, enhanced compatibility,
           * and performance optimization.
           */
          
          // Safely access nested properties without errors
          function safeGet(obj, path, defaultValue = null) {
            try {
              const keys = path.split('.');
              let result = obj;
              
              for (const key of keys) {
                if (result === undefined || result === null) {
                  return defaultValue;
                }
                result = result[key];
              }
              
              return result === undefined ? defaultValue : result;
            } catch (e) {
              return defaultValue;
            }
          }
          
          // Debounce function for performance optimization
          function debounce(func, wait = 100) {
            let timeout;
            return function(...args) {
              clearTimeout(timeout);
              timeout = setTimeout(() => func.apply(this, args), wait);
            };
          }
          
          // Throttle function for performance optimization
          function throttle(func, limit = 100) {
            let inThrottle;
            return function(...args) {
              if (!inThrottle) {
                func.apply(this, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
              }
            };
          }
          
          /**
           * Enhanced Form functionality
           */
          document.addEventListener("DOMContentLoaded", function() {
            // Toggle manual non-HDL entry
            const toggleManualNonHDL = document.getElementById("toggle-manual-non-hdl");
            if (toggleManualNonHDL) {
              toggleManualNonHDL.addEventListener("click", function() {
                const nonHDLInput = document.getElementById("med-non-hdl");
                if (nonHDLInput) {
                  nonHDLInput.disabled = !nonHDLInput.disabled;
                  this.textContent = nonHDLInput.disabled ? "Enter manually" : "Use auto-calculation";
                }
              });
            }
            
            // Add statin selection handler
            const statinSelect = document.getElementById("med-statin");
            if (statinSelect) {
              statinSelect.addEventListener("change", function() {
                const doseSelect = document.getElementById("med-statin-dose");
                if (doseSelect) {
                  doseSelect.disabled = this.value === "none";
                  doseSelect.innerHTML = "<option value=\\"\\" selected>Select dose</option>";
                  
                  if (this.value !== "none") {
                    // Define statin doses
                    const doses = {
                      atorvastatin: [
                        {value: "10", text: "10 mg", intensity: "moderate"},
                        {value: "20", text: "20 mg", intensity: "moderate"},
                        {value: "40", text: "40 mg", intensity: "high"},
                        {value: "80", text: "80 mg", intensity: "high"}
                      ],
                      rosuvastatin: [
                        {value: "5", text: "5 mg", intensity: "moderate"},
                        {value: "10", text: "10 mg", intensity: "moderate"},
                        {value: "20", text: "20 mg", intensity: "high"},
                        {value: "40", text: "40 mg", intensity: "high"}
                      ]
                    };
                    
                    if (doses[this.value]) {
                      doses[this.value].forEach(dose => {
                        const option = document.createElement("option");
                        option.value = dose.value;
                        option.textContent = dose.text;
                        option.dataset.intensity = dose.intensity;
                        doseSelect.appendChild(option);
                      });
                    }
                  }
                }
              });
            }
            
            // Initialize loading indicators if available
            if (window.loadingIndicator) {
              const calculateButtons = document.querySelectorAll('.primary-btn');
              calculateButtons.forEach(button => {
                button.addEventListener('click', function() {
                  if (this.textContent.includes('Calculate')) {
                    window.loadingIndicator.show('Processing...');
                    
                    // Hide after a short delay to simulate processing
                    setTimeout(() => {
                      window.loadingIndicator.hide();
                    }, 1000);
                  }
                });
              });
            }
          });
          `;
            
            fs.writeFileSync(combinedJsPath, basicCombinedJs);
            console.log('Created basic combined.js file');
          } else {
            console.log('combined.js exists, enhancing it');
            
            // Read the existing file
            let combinedJs = fs.readFileSync(combinedJsPath, 'utf8');
            
            // Check if the loading indicator is already implemented
            if (!combinedJs.includes('window.loadingIndicator')) {
              const loadingIndicatorCode = `
          // Initialize loading indicators if available
          if (window.loadingIndicator) {
            const calculateButtons = document.querySelectorAll('.primary-btn');
            calculateButtons.forEach(button => {
              button.addEventListener('click', function() {
                if (this.textContent.includes('Calculate')) {
                  window.loadingIndicator.show('Processing...');
                  
                  // Hide after a short delay to simulate processing
                  setTimeout(() => {
                    window.loadingIndicator.hide();
                  }, 1000);
                }
              });
            });
          }`;
              
              // Find the DOMContentLoaded event listener
              const insertPosition = combinedJs.indexOf('document.addEventListener("DOMContentLoaded", function() {');
              
              if (insertPosition !== -1) {
                // Find the end of the DOMContentLoaded function
                const closingBracePosition = combinedJs.indexOf('});', insertPosition);
                
                if (closingBracePosition !== -1) {
                  // Insert the loading indicator code before the closing braces
                  combinedJs = combinedJs.substring(0, closingBracePosition) + 
                               loadingIndicatorCode + 
                               combinedJs.substring(closingBracePosition);
                  
                  fs.writeFileSync(combinedJsPath, combinedJs);
                  console.log('Enhanced combined.js with loading indicator support');
                } else {
                  console.error('Could not find the end of the DOMContentLoaded function');
                }
              } else {
                // Add a new DOMContentLoaded listener at the end
                combinedJs += `\n\n// Add loading indicator support
          document.addEventListener("DOMContentLoaded", function() {
            ${loadingIndicatorCode}
          });\n`;
                
                fs.writeFileSync(combinedJsPath, combinedJs);
                console.log('Added loading indicator support to combined.js');
              }
            } else {
              console.log('Loading indicator already implemented in combined.js');
            }
            
            // Add physiological validation support if not already present
            if (!combinedJs.includes('physiologicalValidation')) {
              const validationCode = `
          // Add support for physiological validation
          function validatePhysiologicalValues() {
            if (window.physiologicalValidation) {
              const numericInputs = document.querySelectorAll('input[type="number"]');
              numericInputs.forEach(input => {
                input.addEventListener('change', function() {
                  const fieldId = this.id;
                  const parameterType = this.dataset.parameterType || fieldId.replace(/^(frs|qrisk|med)-/, '');
                  
                  if (window.physiologicalValidation.validatePhysiologicalInput) {
                    window.physiologicalValidation.validatePhysiologicalInput(fieldId, parameterType);
                  }
                });
              });
            }
          }
          
          // Initialize validation on load
          document.addEventListener('DOMContentLoaded', function() {
            validatePhysiologicalValues();
          });`;
              
              combinedJs += validationCode;
              fs.writeFileSync(combinedJsPath, combinedJs);
              console.log('Added physiological validation support to combined.js');
            } else {
              console.log('Physiological validation already implemented in combined.js');
            }
          }

          console.log('combined.js update complete');
          EOF

          # Execute the script
          node scripts/update-combined-js.js

      - name: Implement Secure Storage
        run: |
          mkdir -p js/utils
          
          cat > js/utils/secure-storage.js << 'EOF'
          /**
           * Secure Storage Utility
           * Provides a secure wrapper around localStorage with basic encryption
           */
          const secureStorage = (function() {
            // Check for crypto support
            const hasCrypto = typeof window.crypto !== 'undefined' && 
                              typeof window.crypto.subtle !== 'undefined';
            
            // Generate a simple key for basic protection
            let encryptionKey = 'cvd-risk-toolkit-key';
            
            /**
             * Basic encoding function that works across browsers
             * @param {string} str - String to encode
             * @returns {string} - Encoded string
             */
            function encode(str) {
              return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g,
                function(match, p1) {
                  return String.fromCharCode('0x' + p1);
                }
              ));
            }
            
            /**
             * Basic decoding function that works across browsers
             * @param {string} str - String to decode
             * @returns {string} - Decoded string
             */
            function decode(str) {
              try {
                return decodeURIComponent(atob(str).split('').map(function(c) {
                  return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                }).join(''));
              } catch (e) {
                console.warn('Secure storage decode error:', e);
                return '';
              }
            }
            
            /**
             * Store data securely
             * @param {string} key - Storage key
             * @param {any} data - Data to store
             * @returns {boolean} - Success status
             */
            function setItem(key, data) {
              try {
                // Convert data to string if it's not already
                const dataStr = typeof data === 'string' ? data : JSON.stringify(data);
                
                // Add timestamp for security validation
                const dataWithTimestamp = JSON.stringify({
                  data: dataStr,
                  timestamp: new Date().getTime(),
                  version: '1.0'
                });
                
                // Encode the data
                const encodedData = encode(dataWithTimestamp);
                
                // Store with a prefix to identify secure storage items
                localStorage.setItem('secure_' + key, encodedData);
                return true;
              } catch (error) {
                console.warn('SecureStorage setItem error:', error);
                return false;
              }
            }
            
            /**
             * Retrieve securely stored data
             * @param {string} key - Storage key
             * @returns {any} - Retrieved data or null if not found/invalid
             */
            function getItem(key) {
              try {
                const encodedData = localStorage.getItem('secure_' + key);
                if (!encodedData) return null;
                
                // Decode the data
                const decodedStr = decode(encodedData);
                if (!decodedStr) return null;
                
                // Parse the wrapped data
                const wrapper = JSON.parse(decodedStr);
                
                // Basic validation
                if (!wrapper.timestamp || !wrapper.data) {
                  console.warn('Invalid secure storage data format');
                  return null;
                }
                
                // Return the actual data, parsing JSON if possible
                try {
                  return JSON.parse(wrapper.data);
                } catch (e) {
                  // If not valid JSON, return as string
                  return wrapper.data;
                }
              } catch (error) {
                console.warn('SecureStorage getItem error:', error);
                return null;
              }
            }
            
            /**
             * Remove securely stored data
             * @param {string} key - Storage key to remove
             */
            function removeItem(key) {
              try {
                localStorage.removeItem('secure_' + key);
              } catch (error) {
                console.warn('SecureStorage removeItem error:', error);
              }
            }
            
            /**
             * Clear all securely stored data
             */
            function clear() {
              try {
                for (let i = localStorage.length - 1; i >= 0; i--) {
                  const key = localStorage.key(i);
                  if (key && key.startsWith('secure_')) {
                    localStorage.removeItem(key);
                  }
                }
              } catch (error) {
                console.warn('SecureStorage clear error:', error);
              }
            }
            
            // Return the public API
            return {
              setItem,
              getItem,
              removeItem,
              clear
            };
          })();

          // Make available globally
          if (typeof window !== 'undefined') {
            window.secureStorage = secureStorage;
          }
          EOF

          echo "Created secure storage utility"

      - name: Implement Loading Indicator
        run: |
          mkdir -p js/utils
          
          cat > js/utils/loading-indicator.js << 'EOF'
          /**
           * Loading Indicator Utility
           * Provides functions for managing loading states throughout the application
           */
          const loadingIndicator = (function() {
            // Configuration
            const config = {
              defaultDelay: 300, // ms before showing indicator
              defaultMinDuration: 500, // ms minimum time to show indicator
              defaultText: 'Loading...',
              indicatorId: 'loading-indicator',
              overlayId: 'loading-overlay',
              zIndex: 1000
            };
            
            // State tracking
            let isVisible = false;
            let showTimer = null;
            let hideTimer = null;
            let startTime = 0;
            
            /**
             * Create loading indicator elements if they don't exist
             * @private
             */
            function createElements() {
              // Check if elements already exist
              if (document.getElementById(config.indicatorId)) {
                return;
              }
              
              // Create overlay
              const overlay = document.createElement('div');
              overlay.id = config.overlayId;
              overlay.className = 'loading-overlay';
              
              // Create indicator
              const indicator = document.createElement('div');
              indicator.id = config.indicatorId;
              indicator.className = 'loading-indicator';
              indicator.innerHTML = `
                <div class="spinner"></div>
                <div class="loading-message">${config.defaultText}</div>
              `;
              
              // Add to DOM
              overlay.appendChild(indicator);
              document.body.appendChild(overlay);
            }
            
            /**
             * Show loading indicator
             * @param {string} message - Optional custom message to display
             * @param {Object} options - Optional configuration overrides
             * @returns {Promise} - Resolves when indicator is shown
             */
            function show(message, options = {}) {
              return new Promise(resolve => {
                // Create elements if needed
                createElements();
                
                // Get elements
                const overlay = document.getElementById(config.overlayId);
                const indicator = document.getElementById(config.indicatorId);
                const messageElement = indicator.querySelector('.loading-message');
                
                // Update message if provided
                if (message) {
                  messageElement.textContent = message;
                } else {
                  messageElement.textContent = config.defaultText;
                }
                
                // Clear any existing timers
                if (showTimer) clearTimeout(showTimer);
                if (hideTimer) clearTimeout(hideTimer);
                
                // Set delay
                const delay = options.delay !== undefined ? options.delay : config.defaultDelay;
                
                // Set show timer with delay
                showTimer = setTimeout(() => {
                  // Record start time for minimum duration
                  startTime = Date.now();
                  
                  // Show elements
                  overlay.style.display = 'flex';
                  indicator.style.display = 'flex';
                  
                  // Mark as visible
                  isVisible = true;
                  
                  // Resolve promise
                  resolve();
                }, delay);
              });
            }
            
            /**
             * Hide loading indicator
             * @param {Object} options - Optional configuration overrides
             * @returns {Promise} - Resolves when indicator is hidden
             */
            function hide(options = {}) {
              return new Promise(resolve => {
                // If not visible, resolve immediately
                if (!isVisible) {
                  resolve();
                  return;
                }
                
                // Get elements
                const overlay = document.getElementById(config.overlayId);
                const indicator = document.getElementById(config.indicatorId);
                
                // Clear any existing timers
                if (showTimer) clearTimeout(showTimer);
                if (hideTimer) clearTimeout(hideTimer);
                
                // Calculate time shown so far
                const timeShown = Date.now() - startTime;
                
                // Set minimum duration
                const minDuration = options.minDuration !== undefined ? options.minDuration : config.defaultMinDuration;
                
                // Calculate remaining time to meet minimum duration
                const remainingTime = Math.max(0, minDuration - timeShown);
                
                // Set hide timer
                hideTimer = setTimeout(() => {
                  // Hide elements
                  if (overlay) overlay.style.display = 'none';
                  if (indicator) indicator.style.display = 'none';
                  
                  // Mark as hidden
                  isVisible = false;
                  
                  // Resolve promise
                  resolve();
                }, remainingTime);
              });
            }
            
            // Return public API
            return {
              show,
              hide,
              isVisible: () => isVisible
            };
          })();

          // Make available globally
          if (typeof window !== 'undefined') {
            window.loadingIndicator = loadingIndicator;
          }
          EOF

          echo "Created loading indicator utility"

      - name: Create or update styles.css
        run: |
          # Check if styles.css exists
          if [ ! -f "styles.css" ]; then
            echo "Creating new styles.css file"
            cat > styles.css << 'EOF'
          /* CVD Risk Toolkit Styles */

          /* Loading Indicator Styles */
          .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
          }

          .loading-indicator {
            display: none;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            z-index: 1001;
          }

          .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
          }

          .loading-message {
            margin-top: 10px;
            font-weight: 500;
          }

          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
          EOF
          else
            echo "Updating existing styles.css with loading indicator styles"
            # Check if loading indicator styles are already in the file
            if ! grep -q ".loading-indicator" styles.css; then
              cat >> styles.css << 'EOF'

          /* Loading Indicator Styles */
          .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
          }

          .loading-indicator {
            display: none;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            z-index: 1001;
          }

          .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
          }

          .loading-message {
            margin-top: 10px;
            font-weight: 500;
          }

          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
          EOF
            else
              echo "Loading indicator styles already exist in styles.css"
            fi
          fi
      
      - name: Update index.html with scripts
        run: |
          # Check if index.html exists
          if [ -f "index.html" ]; then
            echo "Updating index.html with security and loading scripts"
            
            # Check if scripts are already included
            if ! grep -q "secure-storage.js" index.html; then
              sed -i 's|</body>|    <script src="js/utils/secure-storage.js"></script>\n</body>|' index.html
              echo "Added secure storage script to index.html"
            fi
            
            if ! grep -q "loading-indicator.js" index.html; then
              sed -i 's|</body>|    <script src="js/utils/loading-indicator.js"></script>\n</body>|' index.html
              echo "Added loading indicator script to index.html"
            fi
            
            if ! grep -q "combined.js" index.html; then
              sed -i 's|</body>|    <script src="combined.js"></script>\n</body>|' index.html
              echo "Added combined.js script to index.html"
            fi
            
            # Add CSP if needed
            if ! grep -q "Content-Security-Policy" index.html; then
              CSP_RULES="default-src 'self'; script-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data:; connect-src 'self'"
              sed -i "s|<head>|<head>\n    <meta http-equiv=\"Content-Security-Policy\" content=\"$CSP_RULES\">|" index.html
              echo "Added Content Security Policy to index.html"
            fi
          else
            echo "Warning: index.html not found. Cannot update scripts."
          fi

      - name: Verify changes and commit
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          
          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "No changes to commit. Everything is up to date."
          else
            echo "Committing changes..."
            git commit -m "Implement CVD Risk Toolkit Enhancements

            - Added secure storage utility
            - Implemented loading indicators with CSS
            - Updated combined.js with new functionality
            - Enhanced security with Content Security Policy"
            
            # Use a more reliable push method
            git push
          fi

      # If direct push fails, create a pull request instead
      - name: Create Pull Request if push fails
        if: failure()
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Implement CVD Risk Toolkit Enhancements"
          title: "Implement CVD Risk Toolkit Enhancements"
          body: |
            This PR implements several enhancements to the CVD Risk Toolkit:
            
            - Added secure storage utility
            - Implemented loading indicators with CSS
            - Updated combined.js with new functionality
            - Enhanced security with Content Security Policy
            
            These changes were automatically generated by the GitHub workflow.
          branch: enhancement-branch
          base: main
