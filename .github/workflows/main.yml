name: Combine Files

on:
  workflow_dispatch:  # This allows manual triggering

jobs:
  combine-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Create combined directory
        run: mkdir -p combined
        
      - name: List all files
        run: ls -la
        
      - name: Combine JavaScript files
        run: |
          # Create combined JS file
          echo "// Combined JS file" > combined/combined.js
          
          # Try to find and append each file with various naming patterns
          for file in validation.js.txt validation.js "validation.js (Part 1).txt" "validation.js (Part 1).txt"; do
            if [ -f "$file" ]; then
              echo "Adding $file to combined JS"
              cat "$file" >> combined/combined.js
              echo -e "\n\n" >> combined/combined.js
            fi
          done
          
          for file in calculations.js.txt calculations.js "calculations.js (Part 1).txt" "calculations.js (Part 1).txt"; do
            if [ -f "$file" ]; then
              echo "Adding $file to combined JS"
              cat "$file" >> combined/combined.js
              echo -e "\n\n" >> combined/combined.js
            fi
          done
          
          for file in "medication.js.txt" "medication.js (Part 1).txt" "medication.js (Part 1)" "medication.js"; do
            if [ -f "$file" ]; then
              echo "Adding $file to combined JS"
              cat "$file" >> combined/combined.js
              echo -e "\n\n" >> combined/combined.js
            fi
          done
          
          for file in ui.js.txt ui.js "ui.js (Part 1).txt" "ui.js (Part 1)"; do
            if [ -f "$file" ]; then
              echo "Adding $file to combined JS"
              cat "$file" >> combined/combined.js
              echo -e "\n\n" >> combined/combined.js
            fi
          done
          
      - name: Copy CSS file
        run: |
          echo "// CSS styles" > combined/styles.css
          for file in styles.css.txt styles.css "styles.css (Part 1).txt"; do
            if [ -f "$file" ]; then
              echo "Using $file for CSS"
              cat "$file" > combined/styles.css
            fi
          done
          
      - name: Create basic index.html
        run: |
          # Create basic index.html skeleton
          echo '<!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <meta name="description" content="CVD Risk Toolkit with Lp(a) Post-Test Modifier">
              <meta name="author" content="CVD Risk Toolkit Team">
              <title>CVD Risk Toolkit with Lp(a) Post-Test Modifier</title>
              <link rel="preconnect" href="https://fonts.googleapis.com">
              <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
              <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
              <link rel="stylesheet" href="styles.css">
          </head>
          <body>
          ' > combined/index.html
          
          # Try to extract body content from index.txt
          for file in index.txt "index.txt"; do
            if [ -f "$file" ]; then
              echo "Extracting body content from $file"
              # Copy everything after the DOCTYPE and before the closing body
              sed -n '/DOCTYPE html/,/<\/body>/p' "$file" | sed '1,/<body>/d' | sed '$d' >> combined/index.html
            fi
          done
          
          # Close the HTML
          echo '
              <script src="combined.js"></script>
          </body>
          </html>' >> combined/index.html
          
      - name: Add missing event handlers to JS
        run: |
          # Add missing event handlers
          echo '
          // Add missing event handlers
          document.addEventListener("DOMContentLoaded", function() {
            // Toggle manual non-HDL entry
            const toggleManualNonHDL = document.getElementById("toggle-manual-non-hdl");
            if (toggleManualNonHDL) {
              toggleManualNonHDL.addEventListener("click", function() {
                const nonHDLInput = document.getElementById("med-non-hdl");
                if (nonHDLInput) {
                  nonHDLInput.disabled = !nonHDLInput.disabled;
                  this.textContent = nonHDLInput.disabled ? "Enter manually" : "Use auto-calculation";
                }
              });
            }
            
            // Add statin selection handler
            const statinSelect = document.getElementById("med-statin");
            if (statinSelect) {
              statinSelect.addEventListener("change", function() {
                const doseSelect = document.getElementById("med-statin-dose");
                if (doseSelect) {
                  doseSelect.disabled = this.value === "none";
                  doseSelect.innerHTML = "<option value=\"\" selected>Select dose</option>";
                  
                  if (this.value !== "none") {
                    // Define statin doses
                    const doses = {
                      atorvastatin: [
                        {value: "10", text: "10 mg", intensity: "moderate"},
                        {value: "20", text: "20 mg", intensity: "moderate"},
                        {value: "40", text: "40 mg", intensity: "high"},
                        {value: "80", text: "80 mg", intensity: "high"}
                      ],
                      rosuvastatin: [
                        {value: "5", text: "5 mg", intensity: "moderate"},
                        {value: "10", text: "10 mg", intensity: "moderate"},
                        {value: "20", text: "20 mg", intensity: "high"},
                        {value: "40", text: "40 mg", intensity: "high"}
                      ],
                      simvastatin: [
                        {value: "10", text: "10 mg", intensity: "low"},
                        {value: "20", text: "20 mg", intensity: "moderate"},
                        {value: "40", text: "40 mg", intensity: "moderate"}
                      ],
                      pravastatin: [
                        {value: "10", text: "10 mg", intensity: "low"},
                        {value: "20", text: "20 mg", intensity: "low"},
                        {value: "40", text: "40 mg", intensity: "moderate"},
                        {value: "80", text: "80 mg", intensity: "moderate"}
                      ],
                      lovastatin: [
                        {value: "10", text: "10 mg", intensity: "low"},
                        {value: "20", text: "20 mg", intensity: "low"},
                        {value: "40", text: "40 mg", intensity: "moderate"}
                      ],
                      fluvastatin: [
                        {value: "20", text: "20 mg", intensity: "low"},
                        {value: "40", text: "40 mg", intensity: "low"},
                        {value: "80", text: "80 mg", intensity: "moderate"}
                      ],
                      pitavastatin: [
                        {value: "1", text: "1 mg", intensity: "low"},
                        {value: "2", text: "2 mg", intensity: "moderate"},
                        {value: "4", text: "4 mg", intensity: "moderate"}
                      ]
                    };
                    
                    if (doses[this.value]) {
                      doses[this.value].forEach(dose => {
                        const option = document.createElement("option");
                        option.value = dose.value;
                        option.textContent = dose.text;
                        option.dataset.intensity = dose.intensity;
                        doseSelect.appendChild(option);
                      });
                    }
                  }
                }
              });
            }
            
            // Statin intolerance handler
            const intoleranceSelect = document.getElementById("med-statin-intolerance");
            if (intoleranceSelect) {
              intoleranceSelect.addEventListener("change", function() {
                const typeSelect = document.getElementById("med-intolerance-type");
                if (typeSelect) {
                  typeSelect.disabled = this.value === "no";
                }
              });
            }
            
            // PCSK9 checkbox handler
            const pcsk9Checkbox = document.getElementById("med-pcsk9");
            if (pcsk9Checkbox) {
              pcsk9Checkbox.addEventListener("change", function() {
                const pcsk9Details = document.getElementById("pcsk9-details");
                if (pcsk9Details) {
                  pcsk9Details.style.display = this.checked ? "block" : "none";
                }
              });
            }
            
            // Prevention category handler
            const preventionCategory = document.getElementById("prevention-category");
            if (preventionCategory) {
              preventionCategory.addEventListener("change", function() {
                const secondaryDetails = document.getElementById("secondary-details");
                if (secondaryDetails) {
                  secondaryDetails.disabled = this.value !== "secondary";
                }
              });
            }
          });
          ' >> combined/combined.js
          
      - name: List combined directory contents
        run: ls -la combined
      
      - name: Upload combined files as artifact
        uses: actions/upload-artifact@v2
        with:
          name: combined-files
          path: combined/
