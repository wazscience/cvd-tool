name: Update and Enhance CVD Tool

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/**'
      - 'js/**'
      - '*.js'
      - 'scripts/**'
      - 'css/**'
      - 'styles.css'
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write
  actions: write
  checks: write
  issues: write
  repository-projects: write
  packages: write
  deployments: write
  security-events: write
  statuses: write

jobs:
  update-and-enhance:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'
      
      - name: Install dependencies
        run: |
          npm init -y || true
          npm install --save-dev eslint jshint js-yaml babel-eslint@10 @babel/core@7 @babel/preset-env@7
          npm install --save-dev prettier eslint-plugin-prettier eslint-config-prettier
          npm install --save-dev source-map-support
          npm install --save-dev jest workbox-webpack-plugin openai chai mocha
          npm install --save d3 html2canvas jspdf
      
      - name: Create comprehensive backup
        run: |
          echo "Creating backup directory..."
          mkdir -p backups/$(date +%Y%m%d)
          
          # Backup existing files
          if [ -f "combined.js" ]; then
            cp combined.js "backups/$(date +%Y%m%d)/combined.js.backup.$(date +%H%M%S)"
          fi
          if [ -f "styles.css" ]; then
            cp styles.css "backups/$(date +%Y%m%d)/styles.css.backup.$(date +%H%M%S)"
          fi
          if [ -d "js" ]; then
            cp -r js "backups/$(date +%Y%m%d)/js_backup_$(date +%H%M%S)"
          fi
          if [ -d "scripts" ]; then
            cp -r scripts "backups/$(date +%Y%m%d)/scripts_backup_$(date +%H%M%S)"
          fi
          if [ -d "css" ]; then
            cp -r css "backups/$(date +%Y%m%d)/css_backup_$(date +%H%M%S)"
          fi
          
          # Create backup manifest
          echo "Backup created at: $(date)" > backups/$(date +%Y%m%d)/manifest.txt
          echo "Files backed up:" >> backups/$(date +%Y%m%d)/manifest.txt
          ls -la backups/$(date +%Y%m%d)/ >> backups/$(date +%Y%m%d)/manifest.txt
      
      - name: Create ESLint and Prettier configuration
        run: |
          cat > .eslintrc.json << 'EOF'
          {
            "env": {
              "browser": true,
              "es6": true,
              "node": true
            },
            "extends": [
              "eslint:recommended",
              "plugin:prettier/recommended"
            ],
            "parserOptions": {
              "ecmaVersion": 2020,
              "sourceType": "module"
            },
            "rules": {
              "no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }],
              "no-console": "off",
              "no-undef": "warn",
              "prettier/prettier": "warn"
            },
            "globals": {
              "d3": "readonly",
              "CryptoJS": "readonly",
              "Sentry": "readonly",
              "Plotly": "readonly",
              "Chart": "readonly",
              "THREE": "readonly",
              "Tone": "readonly",
              "mammoth": "readonly",
              "tensorflow": "readonly",
              "Papaparse": "readonly",
              "window": "readonly",
              "document": "readonly"
            }
          }
          EOF
          
          cat > .prettierrc << 'EOF'
          {
            "semi": true,
            "trailingComma": "es5",
            "singleQuote": true,
            "printWidth": 100,
            "tabWidth": 2
          }
          EOF
      
      - name: Lint and fix JavaScript files
        continue-on-error: true
        run: |
          echo "Running ESLint with auto-fix..."
          npx eslint js/**/*.js --fix || true
          npx eslint scripts/**/*.js --fix || true
          npx eslint *.js --fix || true
      
      - name: Create complete combined.js
        run: |
          cat > create-combined.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          const babel = require('@babel/core');

          function safeExecute(fn, errorMsg) {
            try {
              return fn();
            } catch (error) {
              console.error(`${errorMsg}: ${error.message}`);
              console.error(error.stack);
              process.exit(1);
            }
          }

          function autoFixSyntax(code, filename) {
            code = code.replace(/\}\s*\)/g, '});');
            code = code.replace(/\n\s*\n\s*\n/g, '\n\n');
            code = code.replace(/,\s*}/g, '}');
            code = code.replace(/function\s+(\w+)\s*\(\s*\)\s*{/g, 'function $1() {');
            
            try {
              const result = babel.transformSync(code, {
                presets: ['@babel/preset-env'],
                filename: filename,
                compact: false,
                comments: true
              });
              return result.code;
            } catch (babelError) {
              console.warn(`Babel transform failed for ${filename}, using original code`);
              return code;
            }
          }

          function validateJavaScript(code, filename) {
            try {
              new Function(code);
              return { valid: true, code: code };
            } catch (error) {
              console.warn(`Syntax error in ${filename}: ${error.message}`);
              console.log(`Attempting to auto-fix syntax issues...`);
              
              const fixedCode = autoFixSyntax(code, filename);
              
              try {
                new Function(fixedCode);
                console.log(`Successfully fixed syntax issues in ${filename}`);
                return { valid: true, code: fixedCode };
              } catch (fixError) {
                console.error(`Unable to fix syntax in ${filename}: ${fixError.message}`);
                return { valid: false, code: code };
              }
            }
          }

          function createCompleteCombinedJS() {
            const jsDir = path.join(process.cwd(), 'js');
            const combinedPath = path.join(process.cwd(), 'combined.js');
            
            console.log('Starting combined.js creation...');
            
            function readJSFile(filePath) {
              try {
                if (fs.existsSync(filePath)) {
                  let content = fs.readFileSync(filePath, 'utf8');
                  const filename = path.basename(filePath);
                  
                  const { valid, code } = validateJavaScript(content, filename);
                  
                  if (!valid) {
                    console.warn(`Skipping ${filename} due to unfixable syntax errors`);
                    return `// ${filename} skipped due to syntax errors\n`;
                  }
                  
                  console.log(`Successfully processed: ${filename}`);
                  return `// === ${filename} ===\n${code}\n\n`;
                }
                console.log(`File not found: ${filePath}`);
                return `// ${path.basename(filePath)} not found\n\n`;
              } catch (error) {
                console.warn(`Could not read ${filePath}: ${error.message}`);
                return `// Error reading ${path.basename(filePath)}: ${error.message}\n\n`;
              }
            }
            
            // Define the correct order based on your file structure
            const fileOrder = [
              // Core functionality files
              'validation.js',
              'calculations.js',
              'medication.js',
              'ui.js',
              'form-handler.js',
              
              // Utility files
              'utils/secure-storage.js',
              'utils/loading-indicator.js',
              'utils/input-sanitizer.js',
              'utils/physiological-validation.js',
              'utils/validator-extension.js',
              'utils/enhanced-disclaimer.js',
              'utils/csp-report-handler.js',
              
              // Implementation files from root
              '../qrisk3-implementation.js',
              '../juno-integration.js',
              '../enhanced-display.js'
            ];
            
            // Read all JS files in order
            const jsFiles = {};
            fileOrder.forEach(file => {
              let fullPath;
              if (file.startsWith('utils/')) {
                fullPath = path.join(jsDir, file);
              } else if (file.startsWith('../')) {
                fullPath = path.join(process.cwd(), file.substring(3));
              } else {
                fullPath = path.join(jsDir, file);
              }
              
              const key = file.replace(/[\/\\]/g, '_').replace('.js', '').replace('..', 'root');
              jsFiles[key] = readJSFile(fullPath);
            });
            
            // Create comprehensive combined.js content
            const combinedContent = `/**
             * CVD Risk Toolkit Combined JavaScript
             * Version: 3.0.0 - Last Updated: ${new Date().toISOString()}
             * This file combines all JavaScript functionality for the CVD Risk Toolkit
             * 
             * IMPORTANT: This file is auto-generated. Make changes to individual source files instead.
             */

            // Utility Functions
            function safeGet(obj, path, defaultValue = null) {
              try {
                const keys = path.split('.');
                let result = obj;
                
                for (const key of keys) {
                  if (result === undefined || result === null) {
                    return defaultValue;
                  }
                  result = result[key];
                }
                
                return result === undefined ? defaultValue : result;
              } catch (e) {
                return defaultValue;
              }
            }

            function debounce(func, wait = 100) {
              let timeout;
              return function(...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
              };
            }

            function throttle(func, limit = 100) {
              let inThrottle;
              return function(...args) {
                if (!inThrottle) {
                  func.apply(this, args);
                  inThrottle = true;
                  setTimeout(() => inThrottle = false, limit);
                }
              };
            }

            // Combined Modules
            ${Object.values(jsFiles).join('\n')}

            // Enhanced Form functionality with comprehensive error handling
            document.addEventListener("DOMContentLoaded", function() {
              console.log('Initializing CVD Risk Toolkit...');
              
              // Global error handler
              window.onerror = function(msg, url, lineNo, columnNo, error) {
                console.error('Global error:', msg, url, lineNo, columnNo, error);
                if (window.errorLogger) {
                  window.errorLogger.logError(error || msg);
                }
                return false;
              };
              
              // Promise rejection handler
              window.addEventListener('unhandledrejection', function(event) {
                console.error('Unhandled promise rejection:', event.reason);
                if (window.errorLogger) {
                  window.errorLogger.logError(event.reason);
                }
              });
              
              try {
                // Initialize all modules
                const initializationSteps = [
                  { name: 'loading indicators', fn: () => window.loadingIndicator?.initialize() },
                  { name: 'physiological validation', fn: () => typeof validatePhysiologicalValues === 'function' && validatePhysiologicalValues() },
                  { name: 'form handlers', fn: () => typeof initializeFormHandlers === 'function' && initializeFormHandlers() },
                  { name: 'enhanced display', fn: () => window.enhancedDisplay?.initialize() },
                  { name: 'disclaimers', fn: () => window.enhancedDisclaimer?.showInitialDisclaimers() },
                  { name: 'mobile optimization', fn: () => typeof initializeMobileOptimization === 'function' && initializeMobileOptimization() },
                  { name: 'OpenAI integration', fn: () => typeof initializeOpenAI === 'function' && initializeOpenAI() },
                  { name: 'HIPAA compliance logging', fn: () => typeof initializeHIPAALogging === 'function' && initializeHIPAALogging() },
                  { name: 'XSS protection', fn: () => window.xssProtection?.initialize() },
                  { name: 'CSRF protection', fn: () => window.csrfProtection?.initialize() },
                  { name: 'data privacy', fn: () => window.dataPrivacy?.initialize() },
                  { name: 'error logging', fn: () => window.errorLogger?.initialize() },
                  { name: 'performance monitoring', fn: () => window.performanceMonitor?.initialize() }
                ];
                
                let successCount = 0;
                initializationSteps.forEach(step => {
                  try {
                    if (step.fn) {
                      step.fn();
                      console.log('✓ Initialized ' + step.name);
                      successCount++;
                    }
                  } catch (error) {
                    console.error('✗ Failed to initialize ' + step.name + ':', error);
                  }
                });
                
                console.log('CVD Risk Toolkit initialization complete: ' + successCount + '/' + initializationSteps.length + ' successful');
              } catch (error) {
                console.error('Critical error during initialization:', error);
              }
            });

            // Export for testing
            if (typeof module !== 'undefined' && module.exports) {
              module.exports = {
                safeGet,
                debounce,
                throttle
              };
            }
            `;
            
            // Write the file
            fs.writeFileSync(combinedPath, combinedContent, 'utf8');
            console.log('Successfully created comprehensive combined.js');
          }

          // Run the function
          createCompleteCombinedJS();
          EOF
          
          node create-combined.js
      
      - name: Add Progressive Web App support
        run: |
          if [ ! -f "manifest.json" ]; then
            echo '{
              "name": "CVD Risk Toolkit",
              "short_name": "CVD Toolkit",
              "description": "Cardiovascular Disease Risk Assessment Tool with Lp(a) Post-Test Modifier",
              "start_url": "/",
              "display": "standalone",
              "background_color": "#ffffff",
              "theme_color": "#2c3e50",
              "icons": [
                {
                  "src": "icons/icon-192x192.png",
                  "sizes": "192x192",
                  "type": "image/png"
                },
                {
                  "src": "icons/icon-512x512.png",
                  "sizes": "512x512",
                  "type": "image/png"
                }
              ]
            }' > manifest.json
          fi
          
          if [ ! -f "service-worker.js" ]; then
            echo 'const CACHE_NAME = "cvd-toolkit-v1";
            const urlsToCache = [
              "/",
              "/index.html",
              "/styles.css",
              "/combined.js",
              "/js/validation.js",
              "/js/calculations.js",
              "/js/medication.js",
              "/js/ui.js"
            ];

            self.addEventListener("install", event => {
              event.waitUntil(
                caches.open(CACHE_NAME)
                  .then(cache => cache.addAll(urlsToCache))
              );
            });

            self.addEventListener("fetch", event => {
              event.respondWith(
                caches.match(event.request)
                  .then(response => response || fetch(event.request))
              );
            });' > service-worker.js
          fi
      
      - name: Update index.html with PWA support
        run: |
          if [ -f "index.html" ]; then
            if ! grep -q "manifest.json" index.html; then
              sed -i '/<head>/a \    <link rel="manifest" href="/manifest.json">' index.html
            fi
            
            if ! grep -q "serviceWorker" index.html; then
              sed -i '/<\/body>/i \    <script>if ("serviceWorker" in navigator) { window.addEventListener("load", function() { navigator.serviceWorker.register("/service-worker.js"); }); }</script>' index.html
            fi
          fi
      
      - name: Create icon directory and placeholder icons
        run: |
          mkdir -p icons
          
          if [ ! -f "icons/icon-192x192.png" ]; then
            echo "Creating placeholder 192x192 icon"
            echo '<svg width="192" height="192" xmlns="http://www.w3.org/2000/svg">
              <rect width="192" height="192" fill="#2c3e50"/>
              <text x="50%" y="50%" text-anchor="middle" dy=".3em" fill="white" font-family="Arial" font-size="48">CVD</text>
            </svg>' > icons/icon-192x192.svg
          fi
          
          if [ ! -f "icons/icon-512x512.png" ]; then
            echo "Creating placeholder 512x512 icon"
            echo '<svg width="512" height="512" xmlns="http://www.w3.org/2000/svg">
              <rect width="512" height="512" fill="#2c3e50"/>
              <text x="50%" y="50%" text-anchor="middle" dy=".3em" fill="white" font-family="Arial" font-size="128">CVD</text>
            </svg>' > icons/icon-512x512.svg
          fi
      
      - name: Create comprehensive summary
        run: |
          echo "# CVD Risk Toolkit Update Summary" > update-summary.md
          echo "" >> update-summary.md
          echo "## Updated Files" >> update-summary.md
          echo "" >> update-summary.md
          echo "- ✅ combined.js - Created comprehensive combined JavaScript file" >> update-summary.md
          echo "- ✅ manifest.json - Added/Updated PWA manifest" >> update-summary.md
          echo "- ✅ service-worker.js - Added/Updated service worker" >> update-summary.md
          echo "- ✅ index.html - Added PWA support" >> update-summary.md
          echo "" >> update-summary.md
          echo "## Features Added" >> update-summary.md
          echo "" >> update-summary.md
          echo "- Progressive Web App capabilities" >> update-summary.md
          echo "- Automatic syntax correction" >> update-summary.md
          echo "- Comprehensive error handling" >> update-summary.md
          echo "- Module integration" >> update-summary.md
          echo "" >> update-summary.md
          echo "## Timestamp" >> update-summary.md
          echo "Updated at: $(date)" >> update-summary.md
      
      - name: Commit changes
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          
          git add -A
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update CVD Risk Toolkit with comprehensive combined.js
            
            - Created comprehensive combined.js with all modules
            - Added automatic syntax error detection and correction
            - Implemented Progressive Web App support
            - Updated dependencies
            - Automated by GitHub Action $(date +%Y-%m-%d)"
            
            git push origin ${{ github.ref_name }}
          fi
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cvd-toolkit-artifacts
          path: |
            combined.js
            manifest.json
            service-worker.js
            update-summary.md
            backups/
            icons/
