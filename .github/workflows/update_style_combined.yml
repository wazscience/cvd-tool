name: Update CSS and JS Files

on:
  workflow_dispatch:  # Allows manual triggering
  push:
    branches:
      - main
    paths:
      - '.github/workflows/update-css-js.yml'  # Trigger on workflow file changes

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write
  checks: write

jobs:
  update-files:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Create backups
        run: |
          # Create backup directory
          mkdir -p backups
          
          # Create backups of existing files
          if [ -f styles.css ]; then
            cp styles.css backups/styles.css.bak
            echo "Created backup of styles.css"
          fi
          
          if [ -f combined.js ]; then
            cp combined.js backups/combined.js.bak
            echo "Created backup of combined.js"
          fi
          
          echo "Backup created at $(date)" > backups/backup-timestamp.txt
      
      - name: Update styles.css
        run: |
          cat > update-styles.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          function updateStyles() {
            const stylesPath = path.join(process.cwd(), 'styles.css');
            let css = '';
            
            // Check if file exists
            if (fs.existsSync(stylesPath)) {
              css = fs.readFileSync(stylesPath, 'utf8');
              console.log('Found existing styles.css');
            } else {
              // Create new file with basic structure
              css = `/* CVD Risk Toolkit Styles */\n\n`;
              console.log('Creating new styles.css');
            }
            
            // Add version comment if not present
            if (!css.includes('/* Version:')) {
              css = `/* Version: 1.1.0 - Last Updated: ${new Date().toISOString()} */\n\n` + css;
            }
            
            // Define new styles to add
            const newStyles = `
          /* Enhanced Display Styles */
          .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10000;
            display: flex;
            flex-direction: column;
            gap: 10px;
            max-width: 400px;
          }

          .toast {
            padding: 12px 20px;
            border-radius: 8px;
            background-color: #fff;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: center;
            gap: 10px;
            position: relative;
            animation: slideIn 0.3s ease-out;
          }

          .toast-info {
            border-left: 4px solid #3498db;
          }

          .toast-success {
            border-left: 4px solid #2ecc71;
          }

          .toast-warning {
            border-left: 4px solid #f39c12;
          }

          .toast-error {
            border-left: 4px solid #e74c3c;
          }

          .toast-close {
            position: absolute;
            right: 8px;
            top: 8px;
            background: none;
            border: none;
            font-size: 16px;
            cursor: pointer;
            color: #999;
          }

          .toast-close:hover {
            color: #333;
          }

          /* Loading Indicator Styles */
          .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
          }

          .loading-indicator {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            z-index: 1001;
          }

          .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
          }

          .loading-message {
            margin-top: 10px;
            font-weight: 500;
          }

          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }

          @keyframes slideIn {
            from {
              transform: translateX(100%);
              opacity: 0;
            }
            to {
              transform: translateX(0);
              opacity: 1;
            }
          }

          .animate-slide-out {
            animation: slideOut 0.3s ease-in;
          }

          @keyframes slideOut {
            from {
              transform: translateX(0);
              opacity: 1;
            }
            to {
              transform: translateX(100%);
              opacity: 0;
            }
          }

          /* Physiological Warning Styles */
          .physiological-warning {
            padding: 8px 12px;
            background-color: #fff3cd;
            border-left: 4px solid #ffc107;
            color: #856404;
            font-size: 14px;
            margin-top: 4px;
            border-radius: 4px;
          }

          .physiological-error {
            padding: 8px 12px;
            background-color: #f8d7da;
            border-left: 4px solid #dc3545;
            color: #721c24;
            font-size: 14px;
            margin-top: 4px;
            border-radius: 4px;
          }

          /* Enhanced Disclaimer Styles */
          .disclaimer-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 10000;
            justify-content: center;
            align-items: center;
          }

          .disclaimer-content {
            background-color: white;
            padding: 30px;
            border-radius: 8px;
            max-width: 600px;
            width: 90%;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
          }

          .disclaimer-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            margin-top: 20px;
          }

          .decline-btn {
            background-color: #e74c3c;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
          }

          .accept-btn {
            background-color: #2ecc71;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
          }

          /* Form enhancement styles */
          .error-highlight {
            border-color: #dc3545 !important;
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
          }

          .success-highlight {
            border-color: #28a745 !important;
            box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);
          }

          /* Utility classes */
          .d-none {
            display: none !important;
          }

          .d-flex {
            display: flex !important;
          }

          .justify-content-center {
            justify-content: center !important;
          }

          .align-items-center {
            align-items: center !important;
          }
          `;
            
            // Check if these styles already exist before adding
            if (!css.includes('.toast-container')) {
              css += '\n' + newStyles;
              console.log('Added new styles to styles.css');
            } else {
              console.log('Styles already exist in styles.css, skipping addition');
            }
            
            // Write the updated file
            fs.writeFileSync(stylesPath, css, 'utf8');
            console.log('Successfully wrote to styles.css');
          }

          // Run the update
          try {
            updateStyles();
          } catch (error) {
            console.error('Error updating styles.css:', error);
            process.exit(1);
          }
          EOF
          
          node update-styles.js
      
      - name: Update combined.js
        run: |
          cat > update-combined.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          function updateCombinedJS() {
            const combinedPath = path.join(process.cwd(), 'combined.js');
            let js = '';
            
            // Check if file exists
            if (fs.existsSync(combinedPath)) {
              js = fs.readFileSync(combinedPath, 'utf8');
              console.log('Found existing combined.js');
            } else {
              // Create new file with basic structure
              js = `// CVD Risk Toolkit Combined JavaScript\n\n`;
              console.log('Creating new combined.js');
            }
            
            // Add version comment if not present
            if (!js.includes('// Version:')) {
              js = `// Version: 1.1.0 - Last Updated: ${new Date().toISOString()}\n\n` + js;
            }
            
            // Define utility integration code
            const utilityIntegration = `
          /**
           * Enhanced Integration with New Utilities
           */
          document.addEventListener("DOMContentLoaded", function() {
            // Initialize physiological validation
            if (window.physiologicalValidation) {
              const numericInputs = document.querySelectorAll('input[type="number"]');
              numericInputs.forEach(input => {
                input.addEventListener('change', function() {
                  const fieldId = this.id;
                  const parameterType = this.dataset.parameterType || fieldId.replace(/^(frs|qrisk|med)-/, '');
                  
                  if (window.physiologicalValidation.validatePhysiologicalInput) {
                    window.physiologicalValidation.validatePhysiologicalInput(fieldId, parameterType);
                  }
                });
              });
            }
            
            // Initialize enhanced validation
            if (window.validatorExtension) {
              console.info('Enhanced validation ready');
            }
            
            // Initialize input sanitization
            if (window.inputSanitizer) {
              console.info('Input sanitization ready');
            }
          });
          `;

            // Define error boundary code
            const errorBoundary = `
          // Error boundary wrapper for critical functions
          function withErrorBoundary(fn, fallback = null) {
            return function(...args) {
              try {
                return fn.apply(this, args);
              } catch (error) {
                console.error('Error in function:', fn.name, error);
                if (window.enhancedDisplay) {
                  window.enhancedDisplay.showError('An error occurred. Please try again.');
                }
                return fallback;
              }
            };
          }

          // Wrap critical functions with error boundary
          if (typeof calculateFRS === 'function') {
            calculateFRS = withErrorBoundary(calculateFRS);
          }
          if (typeof calculateQRISK === 'function') {
            calculateQRISK = withErrorBoundary(calculateQRISK);
          }
          if (typeof evaluateMedications === 'function') {
            evaluateMedications = withErrorBoundary(evaluateMedications);
          }
          `;

            // Define enhanced form handlers
            const enhancedFormHandlers = `
          // Enhanced form submission protection
          function enhanceFormSubmission() {
            const forms = document.querySelectorAll('form');
            forms.forEach(form => {
              form.addEventListener('submit', function(e) {
                // Check if we're already handling this form
                if (this.dataset.enhanced) return;
                
                // Mark as enhanced
                this.dataset.enhanced = 'true';
                
                // Get all input values
                const formData = new FormData(this);
                const data = {};
                
                for (let [key, value] of formData.entries()) {
                  // Sanitize input values
                  if (window.inputSanitizer && typeof value === 'string') {
                    data[key] = window.inputSanitizer.sanitizeText(value);
                  } else {
                    data[key] = value;
                  }
                }
                
                // Update form values with sanitized data
                for (let key in data) {
                  const input = this.elements[key];
                  if (input && input.value !== data[key]) {
                    input.value = data[key];
                  }
                }
              });
            });
          }

          // Initialize enhanced form submission
          document.addEventListener('DOMContentLoaded', enhanceFormSubmission);
          `;

            // Add each section if it doesn't exist
            if (!js.includes('Enhanced Integration with New Utilities')) {
              js += '\n' + utilityIntegration;
              console.log('Added utility integration to combined.js');
            }
            
            if (!js.includes('withErrorBoundary')) {
              js += '\n' + errorBoundary;
              console.log('Added error boundary to combined.js');
            }
            
            if (!js.includes('enhanceFormSubmission')) {
              js += '\n' + enhancedFormHandlers;
              console.log('Added enhanced form handlers to combined.js');
            }
            
            // Write the updated file
            fs.writeFileSync(combinedPath, js, 'utf8');
            console.log('Successfully wrote to combined.js');
          }

          // Run the update
          try {
            updateCombinedJS();
          } catch (error) {
            console.error('Error updating combined.js:', error);
            process.exit(1);
          }
          EOF
          
          node update-combined.js
      
      - name: Verify updates
        run: |
          echo "Verifying file updates..."
          
          # Check if files were updated
          if [ -f styles.css ]; then
            echo "✓ styles.css exists"
            if grep -q "toast-container" styles.css; then
              echo "✓ New styles were added to styles.css"
            else
              echo "⚠️ New styles may not have been added to styles.css"
            fi
          else
            echo "❌ styles.css not found"
            exit 1
          fi
          
          if [ -f combined.js ]; then
            echo "✓ combined.js exists"
            if grep -q "withErrorBoundary" combined.js; then
              echo "✓ New code was added to combined.js"
            else
              echo "⚠️ New code may not have been added to combined.js"
            fi
          else
            echo "❌ combined.js not found"
            exit 1
          fi
      
      - name: Create update summary
        run: |
          echo "# File Update Summary" > update-summary.md
          echo "" >> update-summary.md
          echo "## Updates Applied" >> update-summary.md
          echo "" >> update-summary.md
          echo "- **styles.css**: Added new UI component styles" >> update-summary.md
          echo "- **combined.js**: Added utility integration and error boundaries" >> update-summary.md
          echo "" >> update-summary.md
          echo "## Backups Created" >> update-summary.md
          echo "" >> update-summary.md
          echo "- styles.css.bak" >> update-summary.md
          echo "- combined.js.bak" >> update-summary.md
          echo "" >> update-summary.md
          echo "## Timestamp" >> update-summary.md
          echo "Updated at: $(date)" >> update-summary.md
      
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
      
      - name: Commit and push changes
        run: |
          # Add all changed files
          git add styles.css combined.js
          git add backups/ update-summary.md || true
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            # Commit changes
            git commit -m "Update styles.css and combined.js with new features
          
          - Added toast notifications
          - Added loading indicators
          - Added physiological warnings
          - Added enhanced disclaimers
          - Added error boundaries
          - Integrated new utilities"
            
            # Push changes
            git push origin ${{ github.ref_name }}
          fi
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: update-artifacts
          path: |
            update-summary.md
            backups/
            styles.css
            combined.js
