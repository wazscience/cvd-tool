name: CVD Risk Toolkit Complete Enhancement

on:
  # Triggers when text files are pushed to the repository
  push:
    branches: [ main ]
    paths:
      - '**.txt'
  
  # Allows manual triggering from the Actions tab
  workflow_dispatch:
    inputs:
      deployChanges:
        description: 'Deploy the changes to production'
        required: false
        default: false
        type: boolean

jobs:
  enhance-toolkit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
    
    - name: Create directories for processed files
      run: |
        mkdir -p converted_files
        mkdir -p backup_files
    
    # Backup existing files before making changes
    - name: Backup existing files
      run: |
        # Backup HTML file
        if [ -f "index.html" ]; then
          cp index.html backup_files/index.html.bak
          echo "Backed up index.html"
        fi
        
        # Backup existing JavaScript files
        for file in qrisk3-implementation.js juno-integration.js enhanced-display.js; do
          if [ -f "$file" ]; then
            cp "$file" "backup_files/$(basename "$file").bak"
            echo "Backed up $file"
          fi
        done
        
        echo "Backup completed"
    
    # Convert the text files to JavaScript files
    - name: Convert text files to JavaScript
      run: |
        # Check if QRISK3 Implementation file exists
        if [ -f "QRISK3 Implementation Module.txt" ]; then
          cp "QRISK3 Implementation Module.txt" converted_files/qrisk3-implementation.js
          echo "Converted QRISK3 Implementation Module.txt to qrisk3-implementation.js"
        else 
          echo "Warning: QRISK3 Implementation Module.txt not found"
        fi
        
        # Check if Juno EMR Integration file exists
        if [ -f "Juno EMR Integration Module.txt" ]; then
          cp "Juno EMR Integration Module.txt" converted_files/juno-integration.js
          echo "Converted Juno EMR Integration Module.txt to juno-integration.js"
        else
          echo "Warning: Juno EMR Integration Module.txt not found"
        fi
        
        # Check if Enhanced Results Display file exists (with either spelling)
        if [ -f "Enhanced Results Display Module.txt" ]; then
          cp "Enhanced Results Display Module.txt" converted_files/enhanced-display.js
          echo "Converted Enhanced Results Display Module.txt to enhanced-display.js"
        elif [ -f "Enhanced Results Display Moduel.txt" ]; then
          # Handle alternative spelling
          cp "Enhanced Results Display Moduel.txt" converted_files/enhanced-display.js
          echo "Converted Enhanced Results Display Moduel.txt to enhanced-display.js"
        else
          echo "Warning: Enhanced Results Display file not found with either spelling"
        fi
        
        # List converted files
        echo "Converted files:"
        ls -la converted_files/
    
    # Add legal and attribution headers to JavaScript files
    - name: Add legal and attribution headers
      run: |
        # Create legal header file
        cat > legal_header.txt << 'EOL'
/**
 * CVD Risk Toolkit with Lp(a) Post-Test Modifier
 * 
 * LEGAL DISCLAIMER:
 * This software is provided for educational and informational purposes only. 
 * It is not intended to be a substitute for professional medical advice, diagnosis, or treatment.
 * Always seek the advice of a qualified healthcare provider with any questions regarding medical conditions.
 * Never disregard professional medical advice or delay seeking it because of something you have read in this software.
 * 
 * The creators and contributors of this software make no representations or warranties of any kind, 
 * express or implied, about the completeness, accuracy, reliability, suitability, or availability
 * of the software or the information it contains. Any reliance you place on such information is 
 * strictly at your own risk.
 * 
 * REFERENCES AND ATTRIBUTIONS:
 * - QRISK3 algorithm: Hippisley-Cox J, et al. BMJ 2017;357:j2099
 *   https://qrisk.org/three/
 * - Framingham Risk Score: D'Agostino RB Sr, et al. Circulation 2008;117:743-53
 * - Lp(a) adjustments based on:
 *   - Willeit P, et al. Lancet 2018;392:1311-1320
 *   - Tsimikas S. J Am Coll Cardiol 2017;69:692-711
 *   - Grundy SM, et al. J Am Coll Cardiol 2019;73:e285-e350
 * 
 * Last updated: April 2025
 */

EOL
        
        # Add legal header to each converted JavaScript file
        for file in converted_files/*.js; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            cat legal_header.txt "$file" > temp_file.js
            mv temp_file.js "$file"
            echo "Added legal header to $filename"
          fi
        done
    
    # Validate JavaScript syntax for the converted files
    - name: Validate JavaScript syntax
      run: |
        echo "Checking JavaScript syntax..."
        for file in converted_files/*.js; do
          if [ -f "$file" ]; then
            echo "Validating $file..."
            node --check "$file" || echo "Warning: Syntax issues in $file, but continuing..."
          fi
        done
    
    # Replace existing files with converted ones
    - name: Replace existing JavaScript files
      run: |
        # Move converted JS files to main directory
        for file in converted_files/*.js; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            mv "$file" "./$filename"
            echo "Added/replaced $filename"
          fi
        done
    
    # Update HTML file with legal disclaimer if not already present
    - name: Add Legal Disclaimer to HTML
      run: |
        # Find the main HTML file
        HTML_FILE="index.html"
        if [ ! -f "$HTML_FILE" ]; then
          # Try to find any HTML file if index.html doesn't exist
          HTML_FILE=$(find . -maxdepth 1 -name "*.html" | head -n 1)
          if [ -z "$HTML_FILE" ]; then
            echo "No HTML file found to update"
            exit 0
          fi
        fi
        
        echo "Adding legal disclaimer to $HTML_FILE if not present..."
        
        # Check if legal disclaimer exists
        if ! grep -q "This tool is not a substitute for professional medical advice" "$HTML_FILE"; then
          # Create temp file for legal disclaimer
          cat > temp_legal.txt << 'EOL'
<div class="legal-disclaimer-banner" style="background-color: #f8f9fa; border-left: 4px solid #3498db; padding: 1rem; margin-bottom: 2rem; border-radius: 0.25rem; box-shadow: 0 1px 3px rgba(0,0,0,0.12);">
    <p><strong>Healthcare Professional Use Only:</strong> This tool is designed to support clinical decision-making, not replace it. Always use clinical judgment.</p>
    <p style="font-size: 0.875rem; margin-top: 0.5rem;">This tool is not a substitute for professional medical advice, diagnosis, or treatment. The calculations are based on established risk algorithms but have inherent limitations.</p>
</div>
EOL
          
          # Find where to insert the disclaimer (after header or at top of main content)
          if grep -q "<main" "$HTML_FILE"; then
            MAIN_LINE=$(grep -n "<main" "$HTML_FILE" | head -n 1 | cut -d ':' -f 1)
            # Find the line after the opening main tag where content starts
            CONTENT_START=$((MAIN_LINE + 2))
            sed -i "${CONTENT_START}r temp_legal.txt" "$HTML_FILE"
            echo "Added legal disclaimer at the beginning of main content"
          elif grep -q "<body" "$HTML_FILE"; then
            BODY_LINE=$(grep -n "<body" "$HTML_FILE" | head -n 1 | cut -d ':' -f 1)
            # Find position after body tag
            AFTER_BODY=$((BODY_LINE + 1))
            sed -i "${AFTER_BODY}r temp_legal.txt" "$HTML_FILE"
            echo "Added legal disclaimer at the beginning of body"
          else
            echo "Could not find appropriate location for legal disclaimer"
          fi
        else
          echo "Legal disclaimer already exists in HTML file"
        fi
    
    # Update HTML file with references section
    - name: Add References Section to HTML
      run: |
        # Find the main HTML file
        HTML_FILE="index.html"
        if [ ! -f "$HTML_FILE" ]; then
          HTML_FILE=$(find . -maxdepth 1 -name "*.html" | head -n 1)
          if [ -z "$HTML_FILE" ]; then
            echo "No HTML file found to update"
            exit 0
          fi
        fi
        
        echo "Adding references section to $HTML_FILE if not present..."
        
        # Check if references section exists
        if ! grep -q "References and Attributions" "$HTML_FILE"; then
          # Create temp file for references
          cat > temp_refs.txt << 'EOL'
<div class="references-section" style="margin-top: 3rem; padding-top: 1.5rem; border-top: 1px solid #ddd;">
    <h3>References and Attributions</h3>
    <div class="references-content" style="font-size: 0.875rem;">
        <p><strong>Risk Calculators:</strong></p>
        <ul>
            <li>QRISK3: Hippisley-Cox J, et al. Development and validation of QRISK3 risk prediction algorithms to estimate future risk of cardiovascular disease: prospective cohort study. <em>BMJ</em> 2017;357:j2099</li>
            <li>Framingham Risk Score: D'Agostino RB Sr, et al. General cardiovascular risk profile for use in primary care: the Framingham Heart Study. <em>Circulation</em> 2008;117:743-53</li>
        </ul>
        <p><strong>Lp(a) Risk Modification:</strong></p>
        <ul>
            <li>Willeit P, et al. Cardiovascular risk prediction using lipoprotein(a): a story half-told? <em>Lancet</em> 2018;392:1311-1320</li>
            <li>Tsimikas S. A test in context: lipoprotein(a): diagnosis, prognosis, controversies, and emerging therapies. <em>J Am Coll Cardiol</em> 2017;69:692-711</li>
            <li>Grundy SM, et al. 2018 AHA/ACC/AACVPR/AAPA/ABC/ACPM/ADA/AGS/APhA/ASPC/NLA/PCNA Guideline on the Management of Blood Cholesterol. <em>J Am Coll Cardiol</em> 2019;73:e285-e350</li>
        </ul>
        <p><strong>Treatment Guidelines:</strong></p>
        <ul>
            <li>Pearson GJ, et al. 2021 Canadian Cardiovascular Society Guidelines for the Management of Dyslipidemia for the Prevention of Cardiovascular Disease in Adults. <em>Can J Cardiol</em> 2021;37(8):1129-1150</li>
            <li>Mach F, et al. 2019 ESC/EAS Guidelines for the management of dyslipidaemias. <em>Eur Heart J</em> 2020;41(1):111-188</li>
        </ul>
        <p><small>Last updated: April 2025. For educational and informational purposes only.</small></p>
    </div>
</div>
EOL
          
          # Find where to insert the references (before closing body tag or at end of content)
          if grep -q "</body>" "$HTML_FILE"; then
            BODY_END=$(grep -n "</body>" "$HTML_FILE" | head -n 1 | cut -d ':' -f 1)
            BEFORE_BODY_END=$((BODY_END - 1))
            sed -i "${BEFORE_BODY_END}r temp_refs.txt" "$HTML_FILE"
            echo "Added references section before closing body tag"
          elif grep -q "</main>" "$HTML_FILE"; then
            MAIN_END=$(grep -n "</main>" "$HTML_FILE" | head -n 1 | cut -d ':' -f 1)
            BEFORE_MAIN_END=$((MAIN_END - 1))
            sed -i "${BEFORE_MAIN_END}r temp_refs.txt" "$HTML_FILE"
            echo "Added references section before closing main tag"
          else
            # Append to end of file
            cat temp_refs.txt >> "$HTML_FILE"
            echo "Added references section at the end of the file"
          fi
        else
          echo "References section already exists in HTML file"
        fi
    
    # Update HTML file with script tags and form fields
    - name: Update HTML file
      run: |
        # Find the main HTML file
        HTML_FILE="index.html"
        if [ ! -f "$HTML_FILE" ]; then
          # Try to find any HTML file if index.html doesn't exist
          HTML_FILE=$(find . -maxdepth 1 -name "*.html" | head -n 1)
          if [ -z "$HTML_FILE" ]; then
            echo "No HTML file found to update"
            exit 0
          fi
        fi
        
        echo "Updating $HTML_FILE..."
        
        # 1. Add script references if they don't exist
        if ! grep -q "qrisk3-implementation.js" "$HTML_FILE"; then
          # Find closing body tag to insert scripts before it
          if grep -q "</body>" "$HTML_FILE"; then
            # Insert scripts before closing body tag
            sed -i 's|</body>|<script src="qrisk3-implementation.js"></script>\n<script src="juno-integration.js"></script>\n<script src="enhanced-display.js"></script>\n</body>|' "$HTML_FILE"
            echo "Added script references before closing body tag"
          else
            # If no body tag, add to the end of the file
            echo -e "\n<script src=\"qrisk3-implementation.js\"></script>\n<script src=\"juno-integration.js\"></script>\n<script src=\"enhanced-display.js\"></script>" >> "$HTML_FILE"
            echo "Added script references at the end of the file"
          fi
        else
          echo "Script references already exist in the HTML file"
        fi
        
        # 2. Update QRISK3 form with new fields
        # Find the Medical Conditions section
        if grep -q "Medical Conditions" "$HTML_FILE"; then
          # Create a temporary file for the new medical condition fields
          cat > temp_fields.txt << EOF
<div class="checkbox-item">
    <input type="checkbox" id="qrisk-migraine">
    <label for="qrisk-migraine">Migraine</label>
</div>

<div class="checkbox-item">
    <input type="checkbox" id="qrisk-sle">
    <label for="qrisk-sle">Systemic Lupus Erythematosus (SLE)</label>
</div>

<div class="checkbox-item">
    <input type="checkbox" id="qrisk-semi">
    <label for="qrisk-semi">Severe Mental Illness</label>
</div>

<div class="checkbox-item" id="qrisk-ed-container" style="display: none;">
    <input type="checkbox" id="qrisk-ed">
    <label for="qrisk-ed">Erectile Dysfunction/Impotence</label>
</div>
EOF

          # Check if these fields already exist
          if ! grep -q "qrisk-migraine" "$HTML_FILE"; then
            # Find the closing div for checkbox-group in the Medical Conditions section
            MEDICAL_LINE=$(grep -n "Medical Conditions" "$HTML_FILE" | head -n 1 | cut -d ':' -f 1)
            CHECKBOX_GROUP_END=$(tail -n +$MEDICAL_LINE "$HTML_FILE" | grep -n "</div>" | head -n 3 | tail -n 1 | cut -d ':' -f 1)
            CHECKBOX_GROUP_END=$((MEDICAL_LINE + CHECKBOX_GROUP_END - 1))
            
            # Insert new fields before the closing div
            sed -i "${CHECKBOX_GROUP_END}r temp_fields.txt" "$HTML_FILE"
            echo "Added new medical condition fields"
          else
            echo "Medical condition fields already exist"
          fi
          
          # Create the Medications section if it doesn't exist
          if ! grep -q "qrisk-atypical-antipsychotics" "$HTML_FILE"; then
            # Create a temporary file for the medications section
            cat > temp_medications.txt << EOF
<div class="card">
    <div class="card-header active">
        <h3>Medications</h3>
        <span class="toggle-icon">▼</span>
    </div>
    <div class="card-body active">
        <div class="checkbox-group">
            <div class="checkbox-item">
                <input type="checkbox" id="qrisk-atypical-antipsychotics">
                <label for="qrisk-atypical-antipsychotics">On Atypical Antipsychotics</label>
            </div>
            
            <div class="checkbox-item">
                <input type="checkbox" id="qrisk-corticosteroids">
                <label for="qrisk-corticosteroids">On Regular Corticosteroids</label>
            </div>
        </div>
    </div>
</div>
EOF
            
            # Find the closing div after the Medical Conditions card
            MEDICAL_LINE=$(grep -n "Medical Conditions" "$HTML_FILE" | head -n 1 | cut -d ':' -f 1)
            CARD_END=$(tail -n +$MEDICAL_LINE "$HTML_FILE" | grep -n "</div>" | head -n 6 | tail -n 1 | cut -d ':' -f 1)
            CARD_END=$((MEDICAL_LINE + CARD_END))
            
            # Insert medications section after the Medical Conditions card
            sed -i "${CARD_END}r temp_medications.txt" "$HTML_FILE"
            echo "Added medications section"
          else
            echo "Medications section already exists"
          fi
          
          # Add hidden fields for BMI and cholesterol ratio
          if ! grep -q "qrisk-bmi\|qrisk-chol-ratio" "$HTML_FILE"; then
            # Find the Lipid Profile section
            LIPID_LINE=$(grep -n "Lipid Profile" "$HTML_FILE" | head -n 1 | cut -d ':' -f 1)
            if [ -n "$LIPID_LINE" ]; then
              # Add hidden fields after the closing div of the Lipid Profile card
              LIPID_END=$(tail -n +$LIPID_LINE "$HTML_FILE" | grep -n "</div>" | head -n 6 | tail -n 1 | cut -d ':' -f 1)
              LIPID_END=$((LIPID_LINE + LIPID_END))
              
              # Create temp file for hidden fields
              cat > temp_hidden.txt << EOF
<!-- Hidden fields for calculations -->
<input type="hidden" id="qrisk-bmi">
<input type="hidden" id="qrisk-chol-ratio">
EOF
              
              sed -i "${LIPID_END}r temp_hidden.txt" "$HTML_FILE"
              echo "Added hidden fields for calculations"
            else
              echo "Could not find Lipid Profile section to add hidden fields"
            fi
          else
            echo "Hidden calculation fields already exist"
          fi
        else
          echo "Could not find Medical Conditions section in the HTML file"
        fi
        
        # 3. Add event handlers and function updates
        # First check if there's a script section at the end
        if grep -q "</script>" "$HTML_FILE"; then
          # Create temp file for event handlers
          cat > temp_handlers.txt << 'EOF'
// QRISK3 Enhancement Event Handlers
document.addEventListener('DOMContentLoaded', function() {
    // Toggle erectile dysfunction field based on sex
    const sexSelect = document.getElementById('qrisk-sex');
    if (sexSelect) {
        sexSelect.addEventListener('change', function() {
            const edContainer = document.getElementById('qrisk-ed-container');
            if (edContainer) {
                if (this.value === 'male') {
                    edContainer.style.display = 'block';
                } else {
                    edContainer.style.display = 'none';
                    document.getElementById('qrisk-ed').checked = false;
                }
            }
        });
    }

    // Auto-calculate BMI when height or weight changes
    const heightInput = document.getElementById('qrisk-height');
    const weightInput = document.getElementById('qrisk-weight');
    if (heightInput) heightInput.addEventListener('change', calculateBMIForQRISK);
    if (weightInput) weightInput.addEventListener('change', calculateBMIForQRISK);
    
    // Auto-calculate cholesterol ratio
    const totalCholInput = document.getElementById('qrisk-total-chol');
    const hdlInput = document.getElementById('qrisk-hdl');
    if (totalCholInput) totalCholInput.addEventListener('change', calculateCholesterolRatio);
    if (hdlInput) hdlInput.addEventListener('change', calculateCholesterolRatio);
    
    // Initialize Juno EMR integration if available
    if (window.JunoIntegration && typeof window.JunoIntegration.init === 'function') {
        window.JunoIntegration.init();
    }
});

// Override the calculateQRISK function to use the new implementation
function calculateQRISK() {
    const result = validateQRISKForm();
    
    if (!result.isValid) {
        displayErrors(result.errors);
        return;
    }
    
    const data = result.data;
    
    // Add additional fields to data object
    data.migraine = document.getElementById('qrisk-migraine')?.checked || false;
    data.sle = document.getElementById('qrisk-sle')?.checked || false;
    data.severeMetalIllness = document.getElementById('qrisk-semi')?.checked || false;
    data.erectileDysfunction = document.getElementById('qrisk-ed')?.checked || false;
    data.atypicalAntipsychotics = document.getElementById('qrisk-atypical-antipsychotics')?.checked || false;
    data.corticosteroids = document.getElementById('qrisk-corticosteroids')?.checked || false;
    
    // Get BMI and cholesterol ratio from hidden fields if available
    const bmiInput = document.getElementById('qrisk-bmi');
    if (bmiInput && bmiInput.value) {
        data.bmi = parseFloat(bmiInput.value);
    }
    
    const cholRatioInput = document.getElementById('qrisk-chol-ratio');
    if (cholRatioInput && cholRatioInput.value) {
        data.cholRatio = parseFloat(cholRatioInput.value);
    }
    
    const results = calculateQRISK3Score(data);
    
    // Get LDL value for treatment recommendations if available
    let ldlValue = null;
    if (data.ldl !== null) {
        ldlValue = data.ldl;
        if (data.ldlUnit === 'mg/dL') {
            ldlValue = convertCholesterol(ldlValue, 'mg/dL', 'mmol/L');
        }
    }
    
    // Get treatment recommendations
    const recommendations = getCCSRecommendation(
        results.modifiedRisk, 
        ldlValue, 
        data.diabetes !== 'none', 
        data.age
    );
    
    // Use the enhanced display function if available, otherwise fall back to original
    if (typeof displayQRISKResults === 'function') {
        displayQRISKResults(data, results, recommendations);
    } else {
        // Legacy display function
        console.warn("Enhanced display function not available, using legacy display");
        displayResults(data, results, recommendations);
    }
    
    // Dispatch event with risk data for cross-tab sharing
    document.dispatchEvent(new CustomEvent('risk-calculated', {
        detail: {
            riskScore: results.modifiedRisk,
            calculator: 'QRISK3'
        }
    }));
    
    // Update the comparison tab status if function exists
    if (typeof updateComparisonTabStatus === 'function') {
        updateComparisonTabStatus('qrisk', true);
    }
}
EOF
          
          # Find the last script tag in the file
          LAST_SCRIPT=$(grep -n "</script>" "$HTML_FILE" | tail -n 1 | cut -d ':' -f 1)
          
          # Insert handlers before the closing script tag
          sed -i "${LAST_SCRIPT}i $(cat temp_handlers.txt)" "$HTML_FILE"
          echo "Added event handlers and function overrides"
        else
          # Create a new script section at the end of the file
          cat > temp_script.txt << 'EOF'
<script>
// QRISK3 Enhancement Event Handlers
document.addEventListener('DOMContentLoaded', function() {
    // Toggle erectile dysfunction field based on sex
    const sexSelect = document.getElementById('qrisk-sex');
    if (sexSelect) {
        sexSelect.addEventListener('change', function() {
            const edContainer = document.getElementById('qrisk-ed-container');
            if (edContainer) {
                if (this.value === 'male') {
                    edContainer.style.display = 'block';
                } else {
                    edContainer.style.display = 'none';
                    document.getElementById('qrisk-ed').checked = false;
                }
            }
        });
    }

    // Auto-calculate BMI when height or weight changes
    const heightInput = document.getElementById('qrisk-height');
    const weightInput = document.getElementById('qrisk-weight');
    if (heightInput) heightInput.addEventListener('change', calculateBMIForQRISK);
    if (weightInput) weightInput.addEventListener('change', calculateBMIForQRISK);
    
    // Auto-calculate cholesterol ratio
    const totalCholInput = document.getElementById('qrisk-total-chol');
    const hdlInput = document.getElementById('qrisk-hdl');
    if (totalCholInput) totalCholInput.addEventListener('change', calculateCholesterolRatio);
    if (hdlInput) hdlInput.addEventListener('change', calculateCholesterolRatio);
    
    // Initialize Juno EMR integration if available
    if (window.JunoIntegration && typeof window.JunoIntegration.init === 'function') {
        window.JunoIntegration.init();
    }
});

// Override the calculateQRISK function to use the new implementation
function calculateQRISK() {
    const result = validateQRISKForm();
    
    if (!result.isValid) {
        displayErrors(result.errors);
        return;
    }
    
    const data = result.data;
    
    // Add additional fields to data object
    data.migraine = document.getElementById('qrisk-migraine')?.checked || false;
    data.sle = document.getElementById('qrisk-sle')?.checked || false;
    data.severeMetalIllness = document.getElementById('qrisk-semi')?.checked || false;
    data.erectileDysfunction = document.getElementById('qrisk-ed')?.checked || false;
    data.atypicalAntipsychotics = document.getElementById('qrisk-atypical-antipsychotics')?.checked || false;
    data.corticosteroids = document.getElementById('qrisk-corticosteroids')?.checked || false;
    
    // Get BMI and cholesterol ratio from hidden fields if available
    const bmiInput = document.getElementById('qrisk-bmi');
    if (bmiInput && bmiInput.value) {
        data.bmi = parseFloat(bmiInput.value);
    }
    
    const cholRatioInput = document.getElementById('qrisk-chol-ratio');
    if (cholRatioInput && cholRatioInput.value) {
        data.cholRatio = parseFloat(cholRatioInput.value);
    }
    
    const results = calculateQRISK3Score(data);
    
    // Get LDL value for treatment recommendations if available
    let ldlValue = null;
    if (data.ldl !== null) {
        ldlValue = data.ldl;
        if (data.ldlUnit === 'mg/dL') {
            ldlValue = convertCholesterol(ldlValue, 'mg/dL', 'mmol/L');
        }
    }
    
    // Get treatment recommendations
    const recommendations = getCCSRecommendation(
        results.modifiedRisk, 
        ldlValue, 
        data.diabetes !== 'none', 
        data.age
    );
    
    // Use the enhanced display function if available, otherwise fall back to original
    if (typeof displayQRISKResults === 'function') {
        displayQRISKResults(data, results, recommendations);
    } else {
        // Legacy display function
        console.warn("Enhanced display function not available, using legacy display");
        displayResults(data, results, recommendations);
    }
    
    // Dispatch event with risk data for cross-tab sharing
    document.dispatchEvent(new CustomEvent('risk-calculated', {
        detail: {
            riskScore: results.modifiedRisk,
            calculator: 'QRISK3'
        }
    }));
    
    // Update the comparison tab status if function exists
    if (typeof updateComparisonTabStatus === 'function') {
        updateComparisonTabStatus('qrisk', true);
    }
}
</script>
EOF
          
          # Add script section to the end of the file
          echo -e "\n$(cat temp_script.txt)" >> "$HTML_FILE"
          echo "Added new script section with event handlers and function overrides"
        fi
        
        # Clean up temporary files
        rm -f temp_*.txt
        
        echo "HTML file update completed"
    
    # Commit all changes
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add and commit all changes
        git add *.js *.html
        git commit -m "Implement CVD Risk Toolkit enhancements with legal disclaimers and references" || echo "No changes to commit"
    
    # Push the changes
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
    
    # Optional deployment step
    - name: Deploy to production
      if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.deployChanges == 'true' }}
      run: |
        echo "Deploying to production..."
        # Add your deployment commands here
        # For example, deploy to GitHub Pages:
        # git subtree push --prefix dist origin gh-pages
