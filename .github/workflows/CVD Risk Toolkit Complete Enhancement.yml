name: Enhanced CVD Risk Toolkit Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    # Run weekly on Sunday at 2 AM for medical research updates
    - cron: '0 2 * * 0'

# Explicit permissions to avoid security issues
permissions:
  contents: write
  pull-requests: write
  issues: write
  packages: read

jobs:
  enhance-toolkit:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install dependencies
        run: |
          npm install crypto-js
          npm install html2pdf.js
          npm install flatpickr
          npm install axios
          npm install cheerio
          npm install @google-cloud/logging
          npm install performance-now
          npm install @sentry/browser
          npm install validator
          npm install puppeteer
          npm install html-to-image
          npm install tensorflow
          npm install ml-regression
          npm install eslint
          npm install eslint-plugin-security
          npm install @babel/core
          npm install @babel/preset-env
          npm install jest
          npm install @testing-library/dom
          npm install @testing-library/jest-dom
          
      - name: Create directory structure
        run: |
          mkdir -p js/components
          mkdir -p js/utils
          mkdir -p js/models
          mkdir -p js/analytics
          mkdir -p js/ml
          mkdir -p scripts
          mkdir -p styles
          mkdir -p tests
          mkdir -p tests/clinical
          mkdir -p tests/browser
          mkdir -p tests/accessibility
          mkdir -p tests/mocks
          mkdir -p .github/workflows
      
      # This section ensures all text files are properly converted to JS files
      - name: Process script files
        run: |
          # Now that scripts are already in the right places, make sure they're executable
          chmod +x scripts/*.js
          chmod +x js/utils/*.js
      
      # Apply all the enhancements in sequence
      - name: Apply Clinical Validation Improvements
        run: |
          echo "Applying clinical validation improvements..."
          node scripts/enhance-clinical-validation.js
          if [ $? -ne 0 ]; then
            echo "Failed to apply clinical validation improvements"
            exit 1
          fi
          echo "Clinical validation improvements applied successfully"
      
      - name: Implement Security Enhancements
        run: |
          echo "Implementing security enhancements..."
          node scripts/implement-security.js
          if [ $? -ne 0 ]; then
            echo "Failed to implement security enhancements"
            exit 1
          fi
          echo "Security enhancements implemented successfully"
      
      - name: Add Input Sanitization
        run: |
          echo "Adding input sanitization..."
          node scripts/add-input-sanitization.js
          if [ $? -ne 0 ]; then
            echo "Failed to add input sanitization"
            exit 1
          fi
          echo "Input sanitization added successfully"
      
      - name: Add Physiological Checks
        run: |
          echo "Adding physiological checks..."
          node scripts/add-physiological-checks.js
          if [ $? -ne 0 ]; then
            echo "Failed to add physiological checks"
            exit 1
          fi
          echo "Physiological checks added successfully"
      
      - name: Add Loading Indicators
        run: |
          echo "Adding loading indicators..."
          node scripts/add-loading-indicators.js
          if [ $? -ne 0 ]; then
            echo "Failed to add loading indicators"
            exit 1
          fi
          echo "Loading indicators added successfully"
      
      - name: Add Content Security Policy
        run: |
          echo "Adding content security policy..."
          node scripts/add-csp.js
          if [ $? -ne 0 ]; then
            echo "Failed to add content security policy"
            exit 1
          fi
          echo "Content security policy added successfully"
      
      - name: Fix PDF Preview
        run: |
          echo "Fixing PDF preview functionality..."
          node scripts/fix-pdf-preview.js
          if [ $? -ne 0 ]; then
            echo "Failed to fix PDF preview functionality"
            exit 1
          fi
          echo "PDF preview functionality fixed successfully"
      
      # Update CSS and HTML to include all required changes
      - name: Update styles.css file
        run: |
          echo "Updating CSS file with enhanced styles..."
          # Combine any new CSS from the enhancement files
          
          # Check if the file exists
          if [ -f "styles.css" ]; then
            # Create a backup of the original file
            cp styles.css styles.css.bak
            
            # Extract CSS from the physiological validation file and append to styles.css
            node -e "
              const fs = require('fs');
              const path = require('path');
              
              // Function to extract CSS from a file
              function extractCSS(filePath) {
                try {
                  const content = fs.readFileSync(filePath, 'utf8');
                  const cssMatches = content.match(/\`([\s\S]*?\.[\s\S]*?)\`/g);
                  return cssMatches ? cssMatches.map(m => m.slice(1, -1)).join('\n\n') : '';
                } catch (err) {
                  console.error('Error reading file:', err);
                  return '';
                }
              }
              
              // Files that might contain CSS
              const cssFiles = [
                'scripts/add-physiological-checks.js',
                'scripts/add-loading-indicators.js',
                'scripts/fix-pdf-preview.js'
              ];
              
              // Extract and combine all CSS
              let combinedCSS = '';
              cssFiles.forEach(file => {
                const css = extractCSS(file);
                if (css) {
                  combinedCSS += '/* CSS from ' + file + ' */\n' + css + '\n\n';
                }
              });
              
              // Read existing styles.css
              let existingCSS = '';
              try {
                existingCSS = fs.readFileSync('styles.css', 'utf8');
              } catch (err) {
                console.error('Error reading styles.css:', err);
                existingCSS = '/* CVD Risk Toolkit Styles */\n\n';
              }
              
              // Avoid duplication by checking if sections already exist
              const cssLines = combinedCSS.split('\n');
              let uniqueCSS = '';
              for (const line of cssLines) {
                if (line.trim() && !existingCSS.includes(line.trim())) {
                  uniqueCSS += line + '\n';
                }
              }
              
              // Only append if there's new CSS to add
              if (uniqueCSS.trim()) {
                fs.writeFileSync('styles.css', existingCSS + '\n/* Enhanced styles */\n' + uniqueCSS);
                console.log('Added new CSS styles to styles.css');
              } else {
                console.log('No new CSS styles to add');
              }
            "
          else
            # If styles.css doesn't exist, create it from scratch
            node -e "
              const fs = require('fs');
              
              // Function to extract CSS from a file
              function extractCSS(filePath) {
                try {
                  const content = fs.readFileSync(filePath, 'utf8');
                  const cssMatches = content.match(/\`([\s\S]*?\.[\s\S]*?)\`/g);
                  return cssMatches ? cssMatches.map(m => m.slice(1, -1)).join('\n\n') : '';
                } catch (err) {
                  console.error('Error reading file:', err);
                  return '';
                }
              }
              
              // Files that might contain CSS
              const cssFiles = [
                'scripts/add-physiological-checks.js',
                'scripts/add-loading-indicators.js',
                'scripts/fix-pdf-preview.js'
              ];
              
              // Extract and combine all CSS
              let combinedCSS = '/* CVD Risk Toolkit Styles */\n\n';
              cssFiles.forEach(file => {
                const css = extractCSS(file);
                if (css) {
                  combinedCSS += '/* CSS from ' + file + ' */\n' + css + '\n\n';
                }
              });
              
              fs.writeFileSync('styles.css', combinedCSS);
              console.log('Created new styles.css file');
            "
          fi
      
      - name: Update index.html file
        run: |
          echo "Updating index.html with new script references..."
          
          # Check if index.html exists
          if [ -f "index.html" ]; then
            # Create a backup of the original file
            cp index.html index.html.bak
            
            # Update index.html with new script references and CSP
            node -e "
              const fs = require('fs');
              
              try {
                let indexHtml = fs.readFileSync('index.html', 'utf8');
                
                // Add Content Security Policy if not present
                if (!indexHtml.includes('Content-Security-Policy')) {
                  indexHtml = indexHtml.replace('<head>', '<head>\n    <meta http-equiv=\"Content-Security-Policy\" content=\"default-src \'self\'; script-src \'self\' \'unsafe-inline\' https://cdnjs.cloudflare.com; style-src \'self\' \'unsafe-inline\' https://fonts.googleapis.com; font-src \'self\' https://fonts.gstatic.com; img-src \'self\' data:; connect-src \'self\'\">');
                  console.log('Added Content Security Policy');
                }
                
                // Script references to add
                const scriptReferences = [
                  '<script src=\"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js\" integrity=\"sha512-E8QSvWZ0eCLGk4km3hxSsNmGWbLtSCSUcewDQPQWZF6pEU8GlT8a5fF32wOl1i8ftdMhssTrF/OhyGWwonTcXA==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>',
                  '<script src=\"js/utils/secure-storage.js\"></script>',
                  '<script src=\"js/utils/xss-protection.js\"></script>',
                  '<script src=\"js/utils/csrf-protection.js\"></script>',
                  '<script src=\"js/utils/data-privacy.js\"></script>',
                  '<script src=\"js/utils/error-logging.js\"></script>',
                  '<script src=\"js/utils/performance-monitoring.js\"></script>',
                  '<script src=\"js/utils/csp-report-handler.js\"></script>',
                  '<script src=\"js/utils/encryption-wrapper.js\"></script>',
                  '<script src=\"js/utils/input-sanitizer.js\"></script>',
                  '<script src=\"js/utils/validator-extension.js\"></script>',
                  '<script src=\"js/utils/physiological-validation.js\"></script>',
                  '<script src=\"js/utils/enhanced-disclaimer.js\"></script>',
                  '<script src=\"js/form-submission-enhancer.js\"></script>',
                  '<script src=\"js/app-initializer.js\"></script>'
                ];
                
                // Check for each script reference and add if not present
                let scriptsToAdd = '';
                scriptReferences.forEach(script => {
                  const scriptFile = script.match(/src=\"([^\"]+)\"/)[1];
                  if (!indexHtml.includes(scriptFile)) {
                    scriptsToAdd += '    ' + script + '\\n';
                  }
                });
                
                // Add script references before closing body tag
                if (scriptsToAdd) {
                  indexHtml = indexHtml.replace('</body>', scriptsToAdd + '</body>');
                  console.log('Added new script references');
                }
                
                // Write updated HTML back to file
                fs.writeFileSync('index.html', indexHtml);
                console.log('Updated index.html successfully');
              } catch (err) {
                console.error('Error updating index.html:', err);
                process.exit(1);
              }
            "
          else
            echo "index.html not found. Make sure the file exists."
            exit 1
          fi
      
      # Run validation tests
      - name: Run validation tests
        run: |
          echo "Running validation tests..."
          # Create a simple test to verify that enhancements have been applied
          cat > validate-enhancements.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          console.log('Validating CVD Risk Toolkit enhancements...');
          
          // Files that should exist after enhancements
          const requiredFiles = [
            'js/utils/secure-storage.js',
            'js/utils/xss-protection.js',
            'js/utils/csrf-protection.js',
            'js/utils/data-privacy.js',
            'js/utils/error-logging.js',
            'js/utils/performance-monitoring.js',
            'js/utils/physiological-validation.js',
            'js/utils/enhanced-disclaimer.js',
            'js/utils/encryption-wrapper.js',
            'js/utils/input-sanitizer.js',
            'js/form-submission-enhancer.js',
            'js/app-initializer.js'
          ];
          
          // Check each required file
          let missingFiles = [];
          for (const file of requiredFiles) {
            if (!fs.existsSync(file)) {
              missingFiles.push(file);
            }
          }
          
          // Check for CSP in index.html
          let indexHtml = '';
          let hasCsp = false;
          try {
            indexHtml = fs.readFileSync('index.html', 'utf8');
            hasCsp = indexHtml.includes('Content-Security-Policy');
          } catch (err) {
            console.error('Error reading index.html:', err);
          }
          
          // Check for physiological validation styles in CSS
          let stylesContent = '';
          let hasValidationStyles = false;
          try {
            stylesContent = fs.readFileSync('styles.css', 'utf8');
            hasValidationStyles = stylesContent.includes('.physiological-warning') || 
                                 stylesContent.includes('.physiological-error');
          } catch (err) {
            console.error('Error reading styles.css:', err);
          }
          
          // Print validation results
          if (missingFiles.length > 0) {
            console.error('Validation failed: Missing files:');
            missingFiles.forEach(file => console.error(` - ${file}`));
          } else {
            console.log('✓ All required files exist');
          }
          
          if (!hasCsp) {
            console.error('Validation failed: Content Security Policy not found in index.html');
          } else {
            console.log('✓ Content Security Policy found in index.html');
          }
          
          if (!hasValidationStyles) {
            console.error('Validation failed: Physiological validation styles not found in styles.css');
          } else {
            console.log('✓ Physiological validation styles found in styles.css');
          }
          
          // Exit with appropriate code
          if (missingFiles.length > 0 || !hasCsp || !hasValidationStyles) {
            process.exit(1);
          } else {
            console.log('All validations passed successfully!');
            process.exit(0);
          }
          EOF
          
          # Run the validation script
          node validate-enhancements.js
      
      # Create package.json for dependency tracking
      - name: Create package.json for dependency tracking
        run: |
          cat > package.json << 'EOF'
          {
            "name": "cvd-risk-toolkit",
            "version": "1.0.0",
            "description": "CVD Risk Toolkit with Lp(a) Post-Test Modifier",
            "main": "index.js",
            "scripts": {
              "start": "http-server -p 8000",
              "security:scan": "eslint --ext .js --config .eslintrc.security.js ./js",
              "security:add-csp": "node ./scripts/add-csp.js",
              "security:sanitize-inputs": "node ./scripts/add-input-sanitization.js",
              "security:encrypt-storage": "node ./scripts/implement-security.js",
              "clinical:add-validation": "node ./scripts/enhance-clinical-validation.js",
              "clinical:document-thresholds": "node ./scripts/document-clinical-thresholds.js",
              "clinical:add-warnings": "node ./scripts/add-physiological-checks.js",
              "clinical:update-guidelines": "node ./scripts/update-guidelines.js",
              "ui:add-loaders": "node ./scripts/add-loading-indicators.js",
              "ui:fix-pdf-preview": "node ./scripts/fix-pdf-preview.js",
              "test": "jest",
              "test:browsers": "jest --testMatch='**/tests/browser/**/*.test.js'",
              "test:clinical-cases": "jest --testMatch='**/tests/clinical/**/*.test.js'",
              "test:accessibility": "jest --testMatch='**/tests/accessibility/**/*.test.js'"
            },
            "keywords": [
              "cardiovascular",
              "risk",
              "calculator",
              "Lp(a)",
              "framingham",
              "qrisk3",
              "medicine"
            ],
            "author": "",
            "license": "MIT",
            "dependencies": {
              "crypto-js": "^4.1.1",
              "html2pdf.js": "^0.10.1",
              "flatpickr": "^4.6.13",
              "axios": "^1.4.0",
              "cheerio": "^1.0.0-rc.12",
              "@google-cloud/logging": "^10.4.0",
              "performance-now": "^2.1.0",
              "@sentry/browser": "^7.52.1",
              "validator": "^13.9.0",
              "puppeteer": "^20.7.3",
              "html-to-image": "^1.11.11",
              "@tensorflow/tfjs": "^4.7.0",
              "ml-regression": "^5.0.0"
            },
            "devDependencies": {
              "@axe-core/puppeteer": "^4.7.0",
              "@babel/core": "^7.22.5",
              "@babel/preset-env": "^7.22.5",
              "@testing-library/dom": "^9.3.1",
              "@testing-library/jest-dom": "^5.16.5",
              "babel-jest": "^29.5.0",
              "chai": "^4.3.7",
              "eslint": "^8.43.0",
              "eslint-plugin-security": "^1.7.1",
              "http-server": "^14.1.1",
              "jest": "^29.5.0",
              "jest-environment-jsdom": "^29.5.0",
              "selenium-webdriver": "^4.10.0"
            }
          }
          EOF
      
      # Add a clear README
      - name: Create README
        run: |
          cat > README.md << 'EOF'
          # CVD Risk Toolkit with Lp(a) Post-Test Modifier
          
          A comprehensive clinical toolkit for cardiovascular disease risk assessment with Lipoprotein(a) post-test risk modification.
          
          ## Key Features
          
          - **Multiple Risk Calculators**: Includes Framingham Risk Score and QRISK3
          - **Lp(a) Post-Test Modifier**: Adjusts risk based on Lipoprotein(a) levels
          - **Clinical Validation**: Physiological plausibility checks for input values
          - **Enhanced Security**: CSP, input sanitization, and encrypted storage
          - **Improved UI**: Loading indicators, better PDF exports, and mobile optimization
          - **Standards Compliance**: Follows clinical guidelines for risk calculation and treatment recommendations
          
          ## For Healthcare Professionals
          
          This tool is intended for use by healthcare professionals only. The calculations and recommendations provided are based on established risk algorithms and guidelines but have inherent limitations.
          
          ## Enhancements
          
          Recent enhancements to this toolkit include:
          
          - Clinical validation with physiological plausibility checks
          - Improved security measures
          - Enhanced UI with loading indicators and better PDF exports
          - Comprehensive error handling
          - Performance improvements
          
          ## License
          
          MIT
          EOF
      
      # Commit all changes
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Applied comprehensive enhancements to CVD Risk Toolkit" || echo "No changes to commit"
          git push
