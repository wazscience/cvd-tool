/**
 * Enhanced Results Display Module for CVD Risk Toolkit
 * 
 * This module implements improved results visualization and interpretation
 * with particular focus on QRISK3 enhancement and Lp(a) post-test modification
 */

/**
 * Display QRISK3 results in the results section with enhanced visualization
 * @param {Object} data - Input data from the form
 * @param {Object} results - Calculation results
 * @param {string} recommendations - HTML-formatted treatment recommendations
 */
function displayQRISKResults(data, results, recommendations) {
    const resultsContainer = document.getElementById('results-container');
    const resultsDiv = document.getElementById('risk-results');
    
    if (!resultsContainer || !resultsDiv) {
        console.error('Results container not found');
        return;
    }
    
    // Get result template
    const template = document.getElementById('single-risk-template');
    if (!template) {
        console.error('Result template not found');
        return;
    }
    
    // Clear previous results
    resultsDiv.innerHTML = '';
    
    // Clone template
    const resultCard = template.content.cloneNode(true);
    
    // Set title
    resultCard.querySelector('.risk-title').textContent = 'QRISK3 Results';
    
    // Set risk values
    resultCard.querySelector('.risk-value').textContent = `${results.modifiedRisk.toFixed(1)}%`;
    resultCard.querySelector('.base-risk').textContent = `${results.baseRisk.toFixed(1)}%`;
    
    // Set Lp(a) modifier
    const modifierRow = resultCard.querySelector('.lpa-modifier-row');
    if (results.lpaModifier > 1.0) {
        resultCard.querySelector('.lpa-modifier').textContent = `${results.lpaModifier.toFixed(1)}x`;
    } else {
        modifierRow.style.display = 'none';
    }
    
    resultCard.querySelector('.adjusted-risk').textContent = `${results.modifiedRisk.toFixed(1)}%`;
    resultCard.querySelector('.risk-badge').textContent = results.riskCategory.charAt(0).toUpperCase() + results.riskCategory.slice(1);
    resultCard.querySelector('.risk-badge').classList.add(results.riskCategory);
    
    // Risk category in results
    resultCard.querySelector('.risk-category').textContent = 
        results.riskCategory.charAt(0).toUpperCase() + results.riskCategory.slice(1) + ' Risk';
    
    // Add patient information summary
    let patientInfoHTML = createPatientSummary(data);
    
    // Add contributing factors if available
    let contributingFactorsHTML = '';
    if (results.contributing && results.contributing.length > 0) {
        contributingFactorsHTML = createContributingFactorsHTML(results.contributing);
    }
    
    // Set interpretation with enhanced information
    resultCard.querySelector('.risk-interpretation').innerHTML = `
        <p>Based on the QRISK3 calculator, this individual has a ${results.modifiedRisk.toFixed(1)}% risk of experiencing a cardiovascular event in the next 10 years, which is classified as <strong>${results.riskCategory} risk</strong>.</p>
        ${data.lpa && results.lpaModifier > 1.0 ? `<p>The baseline risk of ${results.baseRisk.toFixed(1)}% has been modified by a factor of ${results.lpaModifier.toFixed(1)}x due to the elevated Lipoprotein(a) level.</p>` : ''}
        
        ${patientInfoHTML}
        
        ${contributingFactorsHTML}
    `;
    
    // Add to results
    resultsDiv.appendChild(resultCard);
    
    // Show treatment recommendations
    document.getElementById('recommendations-content').innerHTML = recommendations;
    
    // Set date and show results container
    document.querySelector('#results-date span').textContent = new Date().toLocaleDateString();
    resultsContainer.style.display = 'block';
    
    // Scroll to results
    resultsContainer.scrollIntoView({ behavior: 'smooth' });
}

/**
 * Create patient summary HTML
 * @param {Object} data - Patient data
 * @returns {string} - HTML for patient summary
 */
function createPatientSummary(data) {
    // Format BMI with category
    let bmiText = '';
    if (data.bmi) {
        let bmiCategory = '';
        if (data.bmi < 18.5) {
            bmiCategory = "Underweight";
        } else if (data.bmi < 25) {
            bmiCategory = "Normal weight";
        } else if (data.bmi < 30) {
            bmiCategory = "Overweight";
        } else if (data.bmi < 35) {
            bmiCategory = "Obese Class I";
        } else if (data.bmi < 40) {
            bmiCategory = "Obese Class II";
        } else {
            bmiCategory = "Obese Class III";
        }
        
        bmiText = `BMI: ${data.bmi.toFixed(1)} kg/mÂ² (${bmiCategory})`;
    }
    
    // Format cholesterol data
    let cholText = '';
    if (data.totalChol && data.hdl) {
        const totalCholUnit = data.totalCholUnit || 'mmol/L';
        const hdlUnit = data.hdlUnit || 'mmol/L';
        
        let totalChol = data.totalChol;
        let hdl = data.hdl;
        let chol_hdl_ratio = data.cholRatio;
        
        // Add cholesterol information
        cholText = `Total Cholesterol: ${totalChol.toFixed(1)} ${totalCholUnit}, HDL: ${hdl.toFixed(1)} ${hdlUnit}, Ratio: ${chol_hdl_ratio.toFixed(1)}`;
    }
    
    // Format blood pressure
    let bpText = '';
    if (data.sbp) {
        bpText = `Blood Pressure: ${data.sbp} mmHg`;
        if (data.bpTreatment === 'yes') {
            bpText += ' (on treatment)';
        }
    }
    
    // Create patient information summary
    return `
        <div class="patient-summary">
            <h4>Patient Information</h4>
            <div class="summary-details">
                <p>${data.age} year old ${data.sex}, ${data.ethnicity.replace('_', ' ')}</p>
                <p>${bmiText}</p>
                <p>${cholText}</p>
                <p>${bpText}</p>
                <p>Smoking: ${formatSmokerStatus(data.smoker)}</p>
                ${data.diabetes !== 'none' ? `<p>Diabetes: ${data.diabetes === 'type1' ? 'Type 1' : 'Type 2'}</p>` : ''}
                ${data.familyHistory === 'yes' ? '<p>Family history of CVD</p>' : ''}
            </div>
        </div>
    `;
}

/**
 * Format smoker status for display
 * @param {string} status - Smoker status from form
 * @returns {string} - Formatted status for display
 */
function formatSmokerStatus(status) {
    const statusMap = {
        'non': 'Non-smoker',
        'ex': 'Ex-smoker',
        'light': 'Light smoker (<10/day)',
        'moderate': 'Moderate smoker (10-19/day)',
        'heavy': 'Heavy smoker (20+/day)'
    };
    
    return statusMap[status] || status;
}

/**
 * Create HTML for contributing factors
 * @param {Array} factors - Contributing risk factors
 * @returns {string} - HTML for contributing factors
 */
function createContributingFactorsHTML(factors) {
    if (!factors || factors.length === 0) {
        return '';
    }
    
    // Sort factors by impact (high -> moderate -> low)
    const sortedFactors = [...factors].sort((a, b) => {
        const impactOrder = { high: 0, moderate: 1, low: 2 };
        return impactOrder[a.impact] - impactOrder[b.impact];
    });
    
    // Create HTML
    let html = `
        <div class="contributing-factors">
            <h4>Contributing Risk Factors</h4>
            <div class="factors-list">
    `;
    
    // Add factors grouped by impact
    const highFactors = sortedFactors.filter(f => f.impact === 'high');
    const moderateFactors = sortedFactors.filter(f => f.impact === 'moderate');
    const lowFactors = sortedFactors.filter(f => f.impact === 'low');
    
    if (highFactors.length > 0) {
        html += '<div class="factor-group high-impact">';
        html += '<h5>Major Impact</h5>';
        html += '<ul>';
        highFactors.forEach(factor => {
            html += `<li><span class="factor-name">${factor.name}</span>: ${factor.description}</li>`;
        });
        html += '</ul></div>';
    }
    
    if (moderateFactors.length > 0) {
        html += '<div class="factor-group moderate-impact">';
        html += '<h5>Moderate Impact</h5>';
        html += '<ul>';
        moderateFactors.forEach(factor => {
            html += `<li><span class="factor-name">${factor.name}</span>: ${factor.description}</li>`;
        });
        html += '</ul></div>';
    }
    
    if (lowFactors.length > 0) {
        html += '<div class="factor-group low-impact">';
        html += '<h5>Minor Impact</h5>';
        html += '<ul>';
        lowFactors.forEach(factor => {
            html += `<li><span class="factor-name">${factor.name}</span>: ${factor.description}</li>`;
        });
        html += '</ul></div>';
    }
    
    html += '</div></div>';
    
    return html;
}

/**
 * Display comparison results in the results section with enhanced visualization
 * @param {Object} frsData - FRS input data
 * @param {Object} frsResults - FRS calculation results
 * @param {Object} qriskData - QRISK input data
 * @param {Object} qriskResults - QRISK calculation results
 * @param {string} recommendations - HTML-formatted treatment recommendations
 */
function displayComparisonResults(frsData, frsResults, qriskData, qriskResults, recommendations) {
    const resultsContainer = document.getElementById('results-container');
    const resultsDiv = document.getElementById('risk-results');
    
    if (!resultsContainer || !resultsDiv) {
        console.error('Results container not found');
        return;
    }
    
    // Get comparison template
    const template = document.getElementById('comparison-risk-template');
    if (!template) {
        console.error('Comparison template not found');
        return;
    }
    
    // Clear previous results
    resultsDiv.innerHTML = '';
    
    // Clone template
    const resultCard = template.content.cloneNode(true);
    
    // Fill in comparison table
    document.getElementById('compare-frs-base').textContent = `${frsResults.baseRisk.toFixed(1)}%`;
    document.getElementById('compare-qrisk-base').textContent = `${qriskResults.baseRisk.toFixed(1)}%`;
    
    document.getElementById('compare-frs-lpa').textContent = `${frsResults.lpaModifier.toFixed(1)}x`;
    document.getElementById('compare-qrisk-lpa').textContent = `${qriskResults.lpaModifier.toFixed(1)}x`;
    
    document.getElementById('compare-frs-adjusted').textContent = `${frsResults.modifiedRisk.toFixed(1)}%`;
    document.getElementById('compare-qrisk-adjusted').textContent = `${qriskResults.modifiedRisk.toFixed(1)}%`;
    
    document.getElementById('compare-frs-category').textContent = frsResults.riskCategory.charAt(0).toUpperCase() + frsResults.riskCategory.slice(1);
    document.getElementById('compare-qrisk-category').textContent = qriskResults.riskCategory.charAt(0).toUpperCase() + qriskResults.riskCategory.slice(1);
    
    // Create comparison chart
    createComparisonChart(frsResults, qriskResults);
    
    // Set clinical interpretation
    const difference = Math.abs(frsResults.modifiedRisk - qriskResults.modifiedRisk);
    const percentDifference = (difference / ((frsResults.modifiedRisk + qriskResults.modifiedRisk) / 2)) * 100;
    
    let interpretationText = '';
    if (percentDifference < 10) {
        interpretationText = `The Framingham Risk Score and QRISK3 provide similar risk estimates (${frsResults.modifiedRisk.toFixed(1)}% vs ${qriskResults.modifiedRisk.toFixed(1)}%), suggesting a consistent risk assessment.`;
    } else if (percentDifference < 30) {
        interpretationText = `There is a moderate difference between the Framingham Risk Score (${frsResults.modifiedRisk.toFixed(1)}%) and QRISK3 (${qriskResults.modifiedRisk.toFixed(1)}%). This may be due to the additional factors considered in QRISK3 or differences in the underlying populations used to develop these scores.`;
    } else {
        interpretationText = `There is a substantial difference between the Framingham Risk Score (${frsResults.modifiedRisk.toFixed(1)}%) and QRISK3 (${qriskResults.modifiedRisk.toFixed(1)}%). This significant variation suggests that the additional factors considered in QRISK3 (such as ethnicity, family history, or medical conditions) may have a major impact on this individual's risk assessment.`;
    }
    
    // Add which score is higher
    if (frsResults.modifiedRisk > qriskResults.modifiedRisk) {
        interpretationText += ` The Framingham Risk Score gives a higher risk estimate, which may be more conservative for treatment decisions.`;
    } else if (qriskResults.modifiedRisk > frsResults.modifiedRisk) {
        interpretationText += ` QRISK3 gives a higher risk estimate, which may account for additional risk factors not captured in the Framingham score.`;
    }
    
    // Add treatment considerations
    interpretationText += ` Based on the higher risk score of ${Math.max(frsResults.modifiedRisk, qriskResults.modifiedRisk).toFixed(1)}%, this patient falls into the ${Math.max(frsResults.modifiedRisk, qriskResults.modifiedRisk) >= 20 ? 'high' : (Math.max(frsResults.modifiedRisk, qriskResults.modifiedRisk) >= 10 ? 'intermediate' : 'low')} risk category for treatment considerations.`;
    
    document.getElementById('comparison-interpretation').textContent = interpretationText;
    
    // Add patient summary information
    let patientSummaryHTML = createPatientSummaryForComparison(qriskData);
    
    // Add contributing factors if available from QRISK3
    let contributingFactorsHTML = '';
    if (qriskResults.contributing && qriskResults.contributing.length > 0) {
        contributingFactorsHTML = createContributingFactorsHTML(qriskResults.contributing);
    }
    
    // Add the additional information after the comparison interpretation
    const comparisonConclusion = document.getElementById('comparison-interpretation').parentNode;
    const additionalInfoDiv = document.createElement('div');
    additionalInfoDiv.className = 'additional-comparison-info';
    additionalInfoDiv.innerHTML = patientSummaryHTML + contributingFactorsHTML;
    comparisonConclusion.appendChild(additionalInfoDiv);
    
    // Add result card to results div
    resultsDiv.appendChild(resultCard);
    
    // Show treatment recommendations
    document.getElementById('recommendations-content').innerHTML = recommendations;
    
    // Set date and show results container
    document.querySelector('#results-date span').textContent = new Date().toLocaleDateString();
    resultsContainer.style.display = 'block';
    
    // Scroll to results
    resultsContainer.scrollIntoView({ behavior: 'smooth' });
}

/**
 * Create patient summary for comparison view
 * @param {Object} data - Patient data (using QRISK data as it has more fields)
 * @returns {string} - HTML for patient summary
 */
function createPatientSummaryForComparison(data) {
    return `
        <div class="patient-summary">
            <h4>Patient Profile</h4>
            <div class="summary-details">
                <p>${data.age} year old ${data.sex}, ${data.ethnicity.replace('_', ' ')}</p>
                ${data.bmi ? `<p>BMI: ${data.bmi.toFixed(1)} kg/mÂ²</p>` : ''}
                ${data.smoker ? `<p>Smoking: ${formatSmokerStatus(data.smoker)}</p>` : ''}
                ${data.sbp ? `<p>Systolic BP: ${data.sbp} mmHg${data.bpTreatment === 'yes' ? ' (on treatment)' : ''}</p>` : ''}
                ${data.totalChol && data.hdl ? `<p>Total Cholesterol: ${data.totalChol.toFixed(1)}, HDL: ${data.hdl.toFixed(1)}, Ratio: ${(data.totalChol/data.hdl).toFixed(1)}</p>` : ''}
                ${data.diabetes !== 'none' ? `<p>Diabetes: ${data.diabetes === 'type1' ? 'Type 1' : 'Type 2'}</p>` : ''}
                ${data.familyHistory === 'yes' ? '<p>Family history of CVD</p>' : ''}
                
                <!-- Additional QRISK3 specific factors -->
                <div class="additional-factors">
                    ${createMedicalConditionsList(data)}
                </div>
            </div>
        </div>
    `;
}

/**
 * Create list of medical conditions for the patient summary
 * @param {Object} data - Patient data
 * @returns {string} - HTML for medical conditions list
 */
function createMedicalConditionsList(data) {
    const conditions = [];
    
    if (data.atrialFibrillation) conditions.push('Atrial fibrillation');
    if (data.rheumatoidArthritis) conditions.push('Rheumatoid arthritis');
    if (data.chronicKidneyDisease) conditions.push('Chronic kidney disease');
    if (data.migraine) conditions.push('Migraine');
    if (data.sle) conditions.push('Systemic lupus erythematosus');
    if (data.severeMetalIllness) conditions.push('Severe mental illness');
    if (data.erectileDysfunction && data.sex === 'male') conditions.push('Erectile dysfunction');
    if (data.atypicalAntipsychotics) conditions.push('On atypical antipsychotics');
    if (data.corticosteroids) conditions.push('On regular corticosteroids');
    
    if (conditions.length === 0) {
        return '';
    }
    
    return `
        <p><strong>Medical Conditions:</strong> ${conditions.join(', ')}</p>
    `;
}

/**
 * Create comparison chart for FRS and QRISK3 results
 * @param {Object} frsResults - FRS calculation results
 * @param {Object} qriskResults - QRISK3 calculation results
 */
function createComparisonChart(frsResults, qriskResults) {
    // Simple bar chart using div elements
    const chartContainer = document.getElementById('comparison-chart-container');
    if (!chartContainer) return;
    
    // Clear previous chart
    chartContainer.innerHTML = '';
    
    // Create chart HTML
    chartContainer.innerHTML = `
        <div class="comparison-bars">
            <div class="chart-bar-container">
                <div class="chart-label">Framingham</div>
                <div class="chart-bar-wrapper">
                    <div class="chart-bar frs-bar" style="height: ${Math.min(frsResults.modifiedRisk * 2, 100)}%;">
                        <span class="chart-value">${frsResults.modifiedRisk.toFixed(1)}%</span>
                    </div>
                </div>
            </div>
            <div class="chart-bar-container">
                <div class="chart-label">QRISK3</div>
                <div class="chart-bar-wrapper">
                    <div class="chart-bar qrisk-bar" style="height: ${Math.min(qriskResults.modifiedRisk * 2, 100)}%;">
                        <span class="chart-value">${qriskResults.modifiedRisk.toFixed(1)}%</span>
                    </div>
                </div>
            </div>
        </div>
        <div class="chart-axis">
            <div class="axis-label">0%</div>
            <div class="axis-line"></div>
            <div class="axis-marker" style="bottom: 20%;">10%</div>
            <div class="axis-marker" style="bottom: 40%;">20%</div>
            <div class="axis-marker" style="bottom: 60%;">30%</div>
            <div class="axis-marker" style="bottom: 80%;">40%</div>
            <div class="axis-marker" style="bottom: 100%;">50%+</div>
        </div>
    `;
}

// Add CSS for the enhanced displays
const enhancedDisplayStyles = `
.patient-summary {
    background-color: rgba(52, 152, 219, 0.05);
    border-radius: var(--border-radius);
    padding: var(--space-md);
    margin: var(--space-lg) 0;
}

.dark-theme .patient-summary {
    background-color: rgba(52, 152, 219, 0.1);
}

.patient-summary h4 {
    margin-top: 0;
    margin-bottom: var(--space-sm);
    color: var(--secondary-color);
}

.summary-details p {
    margin: var(--space-xs) 0;
}

.contributing-factors {
    margin-top: var(--space-lg);
}

.contributing-factors h4 {
    color: var(--primary-color);
    margin-bottom: var(--space-sm);
}

.factor-group {
    margin-bottom: var(--space-md);
    padding: var(--space-sm);
    border-radius: var(--border-radius-sm);
}

.high-impact {
    background-color: rgba(192, 57, 43, 0.05);
    border-left: 3px solid var(--high-risk-color);
}

.moderate-impact {
    background-color: rgba(243, 156, 18, 0.05);
    border-left: 3px solid var(--moderate-risk-color);
}

.low-impact {
    background-color: rgba(39, 174, 96, 0.05);
    border-left: 3px solid var(--low-risk-color);
}

.dark-theme .high-impact {
    background-color: rgba(192, 57, 43, 0.1);
}

.dark-theme .moderate-impact {
    background-color: rgba(243, 156, 18, 0.1);
}

.dark-theme .low-impact {
    background-color: rgba(39, 174, 96, 0.1);
}

.factor-group h5 {
    margin-top: 0;
    margin-bottom: var(--space-sm);
}

.factor-group ul {
    margin-bottom: 0;
}

.factor-name {
    font-weight: 600;
}

.additional-comparison-info {
    margin-top: var(--space-xl);
}

.additional-factors {
    margin-top: var(--space-sm);
    font-size: var(--font-size-sm);
}
`;

// Add the styles to the page when the script loads
function addEnhancedDisplayStyles() {
    const styleElement = document.createElement('style');
    styleElement.textContent = enhancedDisplayStyles;
    document.head.appendChild(styleElement);
}

// Initialize styles when the page loads
window.addEventListener('DOMContentLoaded', addEnhancedDisplayStyles);